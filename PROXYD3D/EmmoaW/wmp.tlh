// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (5119db3f).
//
// e:\popwin\popwin\tmp\wmp.tlh
//
// C++ source equivalent of Win32 type library wmp.dll
// compiler-generated file created 07/05/08 at 08:45:56 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace IGAMEDIA {

//
// Forward references and typedefs
//

struct __declspec(uuid("19a6627b-da9e-47c1-bb23-00b5e668236a"))
/* interface */ IWMPEvents;
struct __declspec(uuid("1e7601fa-47ea-4107-9ea9-9004ed9684ff"))
/* interface */ IWMPEvents2;
struct __declspec(uuid("82a2986c-0293-4fd0-b279-b21b86c058be"))
/* interface */ IWMPSyncDevice;
struct __declspec(uuid("6bf52a51-394a-11d3-b153-00c04f79faa6"))
/* dispinterface */ _WMPOCXEvents;
struct /* coclass */ WindowsMediaPlayer;
struct __declspec(uuid("6c497d62-8919-413c-82db-e935fb3ec584"))
/* dual interface */ IWMPPlayer4;
struct __declspec(uuid("7587c667-628f-499f-88e7-6a6f4e888464"))
/* dual interface */ IWMPCore3;
struct __declspec(uuid("bc17e5b7-7561-4c18-bb90-17d485775659"))
/* dual interface */ IWMPCore2;
struct __declspec(uuid("d84cca99-cce2-11d2-9ecc-0000f8085981"))
/* dual interface */ IWMPCore;
struct __declspec(uuid("74c09e02-f828-11d2-a74b-00a0c905f36e"))
/* dual interface */ IWMPControls;
struct __declspec(uuid("94d55e95-3fac-11d3-b155-00c04f79faa6"))
/* dual interface */ IWMPMedia;
struct __declspec(uuid("d5f0f4f1-130c-11d3-b14e-00c04f79faa6"))
/* dual interface */ IWMPPlaylist;
struct __declspec(uuid("9104d1ab-80c9-4fed-abf0-2e6417a6df14"))
/* dual interface */ IWMPSettings;
struct __declspec(uuid("8363bc22-b4b4-4b19-989d-1cd765749dd1"))
/* dual interface */ IWMPMediaCollection;
struct __declspec(uuid("4a976298-8c0d-11d3-b389-00c04f68574b"))
/* dual interface */ IWMPStringCollection;
struct __declspec(uuid("10a13217-23a7-439b-b1c0-d847c79b7774"))
/* dual interface */ IWMPPlaylistCollection;
struct __declspec(uuid("679409c0-99f7-11d3-9fb7-00105aa620bb"))
/* dual interface */ IWMPPlaylistArray;
struct __declspec(uuid("ec21b779-edef-462d-bba4-ad9dde2b29a7"))
/* dual interface */ IWMPNetwork;
struct __declspec(uuid("ee4c8fe2-34b2-11d3-a3bf-006097c9b344"))
/* dual interface */ IWMPCdromCollection;
struct __declspec(uuid("cfab6e98-8730-11d3-b388-00c04f68574b"))
/* dual interface */ IWMPCdrom;
struct __declspec(uuid("4f2df574-c588-11d3-9ed0-00c04fb6e937"))
/* dual interface */ IWMPClosedCaption;
struct __declspec(uuid("a12dcf7d-14ab-4c1b-a8cd-63909f06025b"))
/* dual interface */ IWMPError;
struct __declspec(uuid("3614c646-3b3b-4de7-a81e-930e3f2127b3"))
/* dual interface */ IWMPErrorItem;
struct __declspec(uuid("8da61686-4668-4a5c-ae5d-803193293dbe"))
/* dual interface */ IWMPDVD;
struct __declspec(uuid("40897764-ceab-47be-ad4a-8e28537f9bbf"))
/* dual interface */ IWMPPlayerApplication;
struct __declspec(uuid("54062b68-052a-4c25-a39f-8b63346511d4"))
/* dual interface */ IWMPPlayer3;
struct __declspec(uuid("0e6b01d1-d407-4c85-bf5f-1c01f6150280"))
/* dual interface */ IWMPPlayer2;
struct __declspec(uuid("6bf52a4f-394a-11d3-b153-00c04f79faa6"))
/* dual interface */ IWMPPlayer;
struct __declspec(uuid("f75ccec0-c67c-475c-931e-8719870bee7d"))
/* dual interface */ IWMPErrorItem2;
struct __declspec(uuid("6f030d25-0890-480f-9775-1f7e40ab5b8e"))
/* dual interface */ IWMPControls2;
struct __declspec(uuid("ab7c88bb-143e-4ea4-acc3-e4350b2106c3"))
/* dual interface */ IWMPMedia2;
struct __declspec(uuid("f118efc7-f03a-4fb4-99c9-1c02a5c1065b"))
/* dual interface */ IWMPMedia3;
struct __declspec(uuid("5c29bbe0-f87d-4c45-aa28-a70f0230ffa9"))
/* dual interface */ IWMPMetadataPicture;
struct __declspec(uuid("769a72db-13d2-45e2-9c48-53ca9d5b7450"))
/* dual interface */ IWMPMetadataText;
struct __declspec(uuid("fda937a4-eece-4da5-a0b6-39bf89ade2c2"))
/* dual interface */ IWMPSettings2;
struct __declspec(uuid("a1d1110e-d545-476a-9a78-ac3e4cb1e6bd"))
/* dual interface */ IWMPControls3;
struct __declspec(uuid("350ba78b-6bc8-4113-a5f5-312056934eb6"))
/* dual interface */ IWMPClosedCaption2;
struct __declspec(uuid("5f9cfd92-8cad-11d3-9a7e-00c04f8efb70"))
/* dual interface */ IWMPPlaylistCtrl;
struct __declspec(uuid("e41c88dd-2364-4ff7-a0f5-ca9859af783f"))
/* dual interface */ IAppDispatch;
struct __declspec(uuid("ef870383-83ab-4ea9-be48-56fa4251af10"))
/* dual interface */ IWMPSafeBrowser;
struct __declspec(uuid("8b5050ff-e0a4-4808-b3a8-893a9e1ed894"))
/* interface */ IWMPSyncServices;
struct __declspec(uuid("21d077c1-4baa-11d3-bd45-00c04f6ea5ae"))
/* dual interface */ IWMPObjectExtendedProps;
struct __declspec(uuid("72f486b1-0d43-11d3-bd3f-00c04f6ea5ae"))
/* dual interface */ IWMPLayoutSubView;
struct __declspec(uuid("172e905d-80d9-4c2f-b7ce-2ccb771787a2"))
/* dual interface */ IWMPLayoutView;
struct __declspec(uuid("5af0bec1-46aa-11d3-bd45-00c04f6ea5ae"))
/* dual interface */ IWMPEventObject;
struct __declspec(uuid("6fcae13d-e492-4584-9c21-d2c052a2a33a"))
/* dual interface */ IWMPTheme;
struct __declspec(uuid("b2c2d18e-97af-4b6a-a56b-2ffff470fb81"))
/* dual interface */ IWMPLayoutSettingsDispatch;
struct __declspec(uuid("98bb02d4-ed74-43cc-ad6a-45888f2e0dcc"))
/* dual interface */ IWMPBrandDispatch;
struct __declspec(uuid("504f112e-77cc-4e3c-a073-5371b31d9b36"))
/* dual interface */ IWMPNowPlayingHelperDispatch;
struct __declspec(uuid("bb17fff7-1692-4555-918a-6af7bfacedd2"))
/* dispinterface */ IWMPButtonCtrlEvents;
struct /* coclass */ WMPButtonCtrl;
struct __declspec(uuid("87291b50-0c8e-11d3-bb2a-00a0c93ca73a"))
/* dual interface */ IWMPButtonCtrl;
struct /* coclass */ WMPListBoxCtrl;
struct __declspec(uuid("fc1880ce-83b9-43a7-a066-c44ce8c82583"))
/* dual interface */ IWMPListBoxCtrl;
struct __declspec(uuid("d255dfb8-c22a-42cf-b8b7-f15d7bcf65d6"))
/* dual interface */ IWMPListBoxItem;
struct __declspec(uuid("63d9d30f-ae4c-4678-8ca8-5720f4fe4419"))
/* dual interface */ IWMPPlaylistCtrlColumn;
struct __declspec(uuid("cdac14d2-8be4-11d3-bb48-00a0c93ca73a"))
/* dispinterface */ IWMPSliderCtrlEvents;
struct /* coclass */ WMPSliderCtrl;
struct __declspec(uuid("f2bf2c8f-405f-11d3-bb39-00a0c93ca73a"))
/* dual interface */ IWMPSliderCtrl;
struct __declspec(uuid("a85c0477-714c-4a06-b9f6-7c8ca38b45dc"))
/* dispinterface */ IWMPVideoCtrlEvents;
struct /* coclass */ WMPVideoCtrl;
struct __declspec(uuid("61cecf10-fc3a-11d2-a1cd-005004602752"))
/* dual interface */ IWMPVideoCtrl;
struct /* coclass */ WMPEffects;
struct __declspec(uuid("a9efab80-0a60-4c3f-bbd1-4558dd2a9769"))
/* dual interface */ IWMPEffectsCtrl;
struct /* coclass */ WMPEqualizerSettingsCtrl;
struct __declspec(uuid("2bd3716f-a914-49fb-8655-996d5f495498"))
/* dual interface */ IWMPEqualizerSettingsCtrl;
struct /* coclass */ WMPVideoSettingsCtrl;
struct __declspec(uuid("07ec23da-ef73-4bde-a40f-f269e0b7afd6"))
/* dual interface */ IWMPVideoSettingsCtrl;
struct /* coclass */ WMPLibraryTreeCtrl;
struct __declspec(uuid("b738fcae-f089-45df-aed6-034b9e7db632"))
/* dual interface */ IWMPLibraryTreeCtrl;
struct /* coclass */ WMPEditCtrl;
struct __declspec(uuid("70e1217c-c617-4cfd-bd8a-69ca2043e70b"))
/* dual interface */ IWMPEditCtrl;
struct __declspec(uuid("5d0ad945-289e-45c5-a9c6-f301f0152108"))
/* dual interface */ IWMPPluginUIHost;
struct /* coclass */ WMPMenuCtrl;
struct __declspec(uuid("158a7adc-33da-4039-a553-bddbbe389f5c"))
/* dual interface */ IWMPMenuCtrl;
struct /* coclass */ WMPAutoMenuCtrl;
struct __declspec(uuid("1ad13e0b-4f3a-41df-9be2-f9e6fe0a7875"))
/* dual interface */ IWMPAutoMenuCtrl;
struct /* coclass */ WMPRegionalButtonCtrl;
struct __declspec(uuid("58d507b1-2354-11d3-bd41-00c04f6ea5ae"))
/* dual interface */ IWMPRegionalButtonCtrl;
struct __declspec(uuid("50fc8d31-67ac-11d3-bd4c-00c04f6ea5ae"))
/* dispinterface */ IWMPRegionalButtonEvents;
struct /* coclass */ WMPRegionalButton;
struct __declspec(uuid("58d507b2-2354-11d3-bd41-00c04f6ea5ae"))
/* dual interface */ IWMPRegionalButton;
struct __declspec(uuid("95f45aa4-ed0a-11d2-ba67-0000f80855e6"))
/* dispinterface */ IWMPCustomSliderCtrlEvents;
struct /* coclass */ WMPCustomSliderCtrl;
struct __declspec(uuid("95f45aa2-ed0a-11d2-ba67-0000f80855e6"))
/* dual interface */ IWMPCustomSlider;
struct /* coclass */ WMPTextCtrl;
struct __declspec(uuid("237dac8e-0e32-11d3-a2e2-00c04f79f88e"))
/* dual interface */ IWMPTextCtrl;
struct /* coclass */ WMPPlaylistCtrl;
struct __declspec(uuid("891eadb1-1c45-48b0-b704-49a888da98c4"))
/* dual interface */ ITaskCntrCtrl;
struct __declspec(uuid("d84cca96-cce2-11d2-9ecc-0000f8085981"))
/* dispinterface */ _WMPCoreEvents;
struct /* coclass */ WMPCore;
struct __declspec(uuid("6b550945-018f-11d3-b14a-00c04f79faa6"))
/* dual interface */ IWMPGraphEventHandler;
typedef unsigned long ULONG_PTR;
struct __declspec(uuid("28682b8e-9055-47a9-a179-8e0bab1164d1"))
/* dual interface */ IAssaultVis;
struct __declspec(uuid("f8578bfa-cd8f-4ce1-a684-5b7e85fca7dc"))
/* dual interface */ IBattery;
struct __declspec(uuid("40c6bde7-9c90-49d4-ad20-bef81a6c5f22"))
/* dual interface */ IBatteryPreset;
struct __declspec(uuid("f85e2d65-207d-48db-84b1-915e1735db17"))
/* dual interface */ IBatteryRandomPreset;
struct __declspec(uuid("876e7208-0172-4ebb-b08b-2e1d30dfe44c"))
/* dual interface */ IBatterySavedPreset;
struct __declspec(uuid("33e9291a-f6a9-11d2-9435-00a0c92a2f2d"))
/* dual interface */ IBarsEffect;
struct __declspec(uuid("3984e7eb-08ef-11d3-9447-00a0c92a2f2d"))
/* dual interface */ ISpikesEffect;
struct __declspec(uuid("37327700-ef20-11d2-9431-00a0c92a2f2d"))
/* dual interface */ IDotPlaneEffect;
struct __declspec(uuid("e31e7583-32d5-491c-b611-825d032b02cf"))
/* dual interface */ IPlenoptic;
struct __declspec(uuid("e2cc638c-fd2c-409b-a1ea-5ddb72dc8e84"))
/* dual interface */ IWMPExternal;
struct __declspec(uuid("d10ccdff-472d-498c-b5fe-3630e5405e0a"))
/* dual interface */ IWMPExternalColors;
struct __declspec(uuid("54df358e-cf38-4010-99f1-f44b0e9000e5"))
/* dual interface */ IWMPSubscriptionServiceLimited;
struct __declspec(uuid("2e922378-ee70-4ceb-bbab-ce7ce4a04816"))
/* dual interface */ IWMPSubscriptionServiceExternal;
struct __declspec(uuid("e15e9ad1-8f20-4cc4-9ec7-1a328ca86a0d"))
/* dual interface */ IWMPDownloadManager;
struct __declspec(uuid("0a319c7f-85f9-436c-b88e-82fd88000e1c"))
/* dual interface */ IWMPDownloadCollection;
struct __declspec(uuid("9fbb3336-6da3-479d-b8ff-67d46e20a987"))
/* dual interface */ IWMPDownloadItem2;
struct __declspec(uuid("c9470e8e-3f6b-46a9-a0a9-452815c34297"))
/* dual interface */ IWMPDownloadItem;
struct __declspec(uuid("5f0248c1-62b3-42d7-b927-029119e6ad14"))
/* dual interface */ IWMPSubscriptionServicePlayMedia;
struct __declspec(uuid("2d7ef888-1d3c-484a-a906-9f49d99bb344"))
/* dual interface */ IWMPCDDVDWizardExternal;
struct __declspec(uuid("f81b2a59-02bc-4003-8b2f-c124af66fc66"))
/* dual interface */ IWMPBaseExternal;
struct __declspec(uuid("3148e685-b243-423d-8341-8480d6eff674"))
/* dual interface */ IWMPOfflineExternal;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IWMPEvents, __uuidof(IWMPEvents));
_COM_SMARTPTR_TYPEDEF(IWMPEvents2, __uuidof(IWMPEvents2));
_COM_SMARTPTR_TYPEDEF(IWMPSyncDevice, __uuidof(IWMPSyncDevice));
_COM_SMARTPTR_TYPEDEF(_WMPOCXEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPCore, __uuidof(IWMPCore));
_COM_SMARTPTR_TYPEDEF(IWMPCore2, __uuidof(IWMPCore2));
_COM_SMARTPTR_TYPEDEF(IWMPCore3, __uuidof(IWMPCore3));
_COM_SMARTPTR_TYPEDEF(IWMPPlayer4, __uuidof(IWMPPlayer4));
_COM_SMARTPTR_TYPEDEF(IWMPControls, __uuidof(IWMPControls));
_COM_SMARTPTR_TYPEDEF(IWMPMedia, __uuidof(IWMPMedia));
_COM_SMARTPTR_TYPEDEF(IWMPPlaylist, __uuidof(IWMPPlaylist));
_COM_SMARTPTR_TYPEDEF(IWMPSettings, __uuidof(IWMPSettings));
_COM_SMARTPTR_TYPEDEF(IWMPMediaCollection, __uuidof(IWMPMediaCollection));
_COM_SMARTPTR_TYPEDEF(IWMPStringCollection, __uuidof(IWMPStringCollection));
_COM_SMARTPTR_TYPEDEF(IWMPPlaylistCollection, __uuidof(IWMPPlaylistCollection));
_COM_SMARTPTR_TYPEDEF(IWMPPlaylistArray, __uuidof(IWMPPlaylistArray));
_COM_SMARTPTR_TYPEDEF(IWMPNetwork, __uuidof(IWMPNetwork));
_COM_SMARTPTR_TYPEDEF(IWMPCdromCollection, __uuidof(IWMPCdromCollection));
_COM_SMARTPTR_TYPEDEF(IWMPCdrom, __uuidof(IWMPCdrom));
_COM_SMARTPTR_TYPEDEF(IWMPClosedCaption, __uuidof(IWMPClosedCaption));
_COM_SMARTPTR_TYPEDEF(IWMPError, __uuidof(IWMPError));
_COM_SMARTPTR_TYPEDEF(IWMPErrorItem, __uuidof(IWMPErrorItem));
_COM_SMARTPTR_TYPEDEF(IWMPDVD, __uuidof(IWMPDVD));
_COM_SMARTPTR_TYPEDEF(IWMPPlayerApplication, __uuidof(IWMPPlayerApplication));
_COM_SMARTPTR_TYPEDEF(IWMPPlayer3, __uuidof(IWMPPlayer3));
_COM_SMARTPTR_TYPEDEF(IWMPPlayer2, __uuidof(IWMPPlayer2));
_COM_SMARTPTR_TYPEDEF(IWMPPlayer, __uuidof(IWMPPlayer));
_COM_SMARTPTR_TYPEDEF(IWMPErrorItem2, __uuidof(IWMPErrorItem2));
_COM_SMARTPTR_TYPEDEF(IWMPControls2, __uuidof(IWMPControls2));
_COM_SMARTPTR_TYPEDEF(IWMPMedia2, __uuidof(IWMPMedia2));
_COM_SMARTPTR_TYPEDEF(IWMPMedia3, __uuidof(IWMPMedia3));
_COM_SMARTPTR_TYPEDEF(IWMPMetadataPicture, __uuidof(IWMPMetadataPicture));
_COM_SMARTPTR_TYPEDEF(IWMPMetadataText, __uuidof(IWMPMetadataText));
_COM_SMARTPTR_TYPEDEF(IWMPSettings2, __uuidof(IWMPSettings2));
_COM_SMARTPTR_TYPEDEF(IWMPControls3, __uuidof(IWMPControls3));
_COM_SMARTPTR_TYPEDEF(IWMPClosedCaption2, __uuidof(IWMPClosedCaption2));
_COM_SMARTPTR_TYPEDEF(IWMPPlaylistCtrl, __uuidof(IWMPPlaylistCtrl));
_COM_SMARTPTR_TYPEDEF(IAppDispatch, __uuidof(IAppDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPSafeBrowser, __uuidof(IWMPSafeBrowser));
_COM_SMARTPTR_TYPEDEF(IWMPSyncServices, __uuidof(IWMPSyncServices));
_COM_SMARTPTR_TYPEDEF(IWMPObjectExtendedProps, __uuidof(IWMPObjectExtendedProps));
_COM_SMARTPTR_TYPEDEF(IWMPLayoutSubView, __uuidof(IWMPLayoutSubView));
_COM_SMARTPTR_TYPEDEF(IWMPLayoutView, __uuidof(IWMPLayoutView));
_COM_SMARTPTR_TYPEDEF(IWMPEventObject, __uuidof(IWMPEventObject));
_COM_SMARTPTR_TYPEDEF(IWMPTheme, __uuidof(IWMPTheme));
_COM_SMARTPTR_TYPEDEF(IWMPLayoutSettingsDispatch, __uuidof(IWMPLayoutSettingsDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPBrandDispatch, __uuidof(IWMPBrandDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPNowPlayingHelperDispatch, __uuidof(IWMPNowPlayingHelperDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPButtonCtrlEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPButtonCtrl, __uuidof(IWMPButtonCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPListBoxCtrl, __uuidof(IWMPListBoxCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPListBoxItem, __uuidof(IWMPListBoxItem));
_COM_SMARTPTR_TYPEDEF(IWMPPlaylistCtrlColumn, __uuidof(IWMPPlaylistCtrlColumn));
_COM_SMARTPTR_TYPEDEF(IWMPSliderCtrlEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPSliderCtrl, __uuidof(IWMPSliderCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPVideoCtrlEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPVideoCtrl, __uuidof(IWMPVideoCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPEffectsCtrl, __uuidof(IWMPEffectsCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPEqualizerSettingsCtrl, __uuidof(IWMPEqualizerSettingsCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPVideoSettingsCtrl, __uuidof(IWMPVideoSettingsCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPLibraryTreeCtrl, __uuidof(IWMPLibraryTreeCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPEditCtrl, __uuidof(IWMPEditCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPPluginUIHost, __uuidof(IWMPPluginUIHost));
_COM_SMARTPTR_TYPEDEF(IWMPMenuCtrl, __uuidof(IWMPMenuCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPAutoMenuCtrl, __uuidof(IWMPAutoMenuCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPRegionalButtonCtrl, __uuidof(IWMPRegionalButtonCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPRegionalButtonEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPRegionalButton, __uuidof(IWMPRegionalButton));
_COM_SMARTPTR_TYPEDEF(IWMPCustomSliderCtrlEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPCustomSlider, __uuidof(IWMPCustomSlider));
_COM_SMARTPTR_TYPEDEF(IWMPTextCtrl, __uuidof(IWMPTextCtrl));
_COM_SMARTPTR_TYPEDEF(ITaskCntrCtrl, __uuidof(ITaskCntrCtrl));
_COM_SMARTPTR_TYPEDEF(_WMPCoreEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPGraphEventHandler, __uuidof(IWMPGraphEventHandler));
_COM_SMARTPTR_TYPEDEF(IAssaultVis, __uuidof(IAssaultVis));
_COM_SMARTPTR_TYPEDEF(IBattery, __uuidof(IBattery));
_COM_SMARTPTR_TYPEDEF(IBatteryPreset, __uuidof(IBatteryPreset));
_COM_SMARTPTR_TYPEDEF(IBatteryRandomPreset, __uuidof(IBatteryRandomPreset));
_COM_SMARTPTR_TYPEDEF(IBatterySavedPreset, __uuidof(IBatterySavedPreset));
_COM_SMARTPTR_TYPEDEF(IBarsEffect, __uuidof(IBarsEffect));
_COM_SMARTPTR_TYPEDEF(ISpikesEffect, __uuidof(ISpikesEffect));
_COM_SMARTPTR_TYPEDEF(IDotPlaneEffect, __uuidof(IDotPlaneEffect));
_COM_SMARTPTR_TYPEDEF(IPlenoptic, __uuidof(IPlenoptic));
_COM_SMARTPTR_TYPEDEF(IWMPExternal, __uuidof(IWMPExternal));
_COM_SMARTPTR_TYPEDEF(IWMPExternalColors, __uuidof(IWMPExternalColors));
_COM_SMARTPTR_TYPEDEF(IWMPSubscriptionServiceLimited, __uuidof(IWMPSubscriptionServiceLimited));
_COM_SMARTPTR_TYPEDEF(IWMPSubscriptionServiceExternal, __uuidof(IWMPSubscriptionServiceExternal));
_COM_SMARTPTR_TYPEDEF(IWMPDownloadManager, __uuidof(IWMPDownloadManager));
_COM_SMARTPTR_TYPEDEF(IWMPDownloadCollection, __uuidof(IWMPDownloadCollection));
_COM_SMARTPTR_TYPEDEF(IWMPDownloadItem, __uuidof(IWMPDownloadItem));
_COM_SMARTPTR_TYPEDEF(IWMPDownloadItem2, __uuidof(IWMPDownloadItem2));
_COM_SMARTPTR_TYPEDEF(IWMPSubscriptionServicePlayMedia, __uuidof(IWMPSubscriptionServicePlayMedia));
_COM_SMARTPTR_TYPEDEF(IWMPCDDVDWizardExternal, __uuidof(IWMPCDDVDWizardExternal));
_COM_SMARTPTR_TYPEDEF(IWMPBaseExternal, __uuidof(IWMPBaseExternal));
_COM_SMARTPTR_TYPEDEF(IWMPOfflineExternal, __uuidof(IWMPOfflineExternal));

//
// Type library items
//

struct __declspec(uuid("19a6627b-da9e-47c1-bb23-00b5e668236a"))
IWMPEvents : IUnknown
{
    //
    // Raw methods provided by interface
    //

    virtual void __stdcall OpenStateChange (
        long NewState ) = 0;
    virtual void __stdcall PlayStateChange (
        long NewState ) = 0;
    virtual void __stdcall AudioLanguageChange (
        long LangID ) = 0;
    virtual void __stdcall StatusChange ( ) = 0;
    virtual void __stdcall ScriptCommand (
        BSTR scType,
        BSTR Param ) = 0;
    virtual void __stdcall NewStream ( ) = 0;
    virtual void __stdcall Disconnect (
        long Result ) = 0;
    virtual void __stdcall Buffering (
        VARIANT_BOOL Start ) = 0;
    virtual void __stdcall Error ( ) = 0;
    virtual void __stdcall Warning (
        long WarningType,
        long Param,
        BSTR Description ) = 0;
    virtual void __stdcall EndOfStream (
        long Result ) = 0;
    virtual void __stdcall PositionChange (
        double oldPosition,
        double newPosition ) = 0;
    virtual void __stdcall MarkerHit (
        long MarkerNum ) = 0;
    virtual void __stdcall DurationUnitChange (
        long NewDurationUnit ) = 0;
    virtual void __stdcall CdromMediaChange (
        long CdromNum ) = 0;
    virtual void __stdcall PlaylistChange (
        IDispatch * Playlist,
        enum WMPPlaylistChangeEventType change ) = 0;
    virtual void __stdcall CurrentPlaylistChange (
        enum WMPPlaylistChangeEventType change ) = 0;
    virtual void __stdcall CurrentPlaylistItemAvailable (
        BSTR bstrItemName ) = 0;
    virtual void __stdcall MediaChange (
        IDispatch * Item ) = 0;
    virtual void __stdcall CurrentMediaItemAvailable (
        BSTR bstrItemName ) = 0;
    virtual void __stdcall CurrentItemChange (
        IDispatch * pdispMedia ) = 0;
    virtual void __stdcall MediaCollectionChange ( ) = 0;
    virtual void __stdcall MediaCollectionAttributeStringAdded (
        BSTR bstrAttribName,
        BSTR bstrAttribVal ) = 0;
    virtual void __stdcall MediaCollectionAttributeStringRemoved (
        BSTR bstrAttribName,
        BSTR bstrAttribVal ) = 0;
    virtual void __stdcall MediaCollectionAttributeStringChanged (
        BSTR bstrAttribName,
        BSTR bstrOldAttribVal,
        BSTR bstrNewAttribVal ) = 0;
    virtual void __stdcall PlaylistCollectionChange ( ) = 0;
    virtual void __stdcall PlaylistCollectionPlaylistAdded (
        BSTR bstrPlaylistName ) = 0;
    virtual void __stdcall PlaylistCollectionPlaylistRemoved (
        BSTR bstrPlaylistName ) = 0;
    virtual void __stdcall PlaylistCollectionPlaylistSetAsDeleted (
        BSTR bstrPlaylistName,
        VARIANT_BOOL varfIsDeleted ) = 0;
    virtual void __stdcall ModeChange (
        BSTR ModeName,
        VARIANT_BOOL NewValue ) = 0;
    virtual void __stdcall MediaError (
        IDispatch * pMediaObject ) = 0;
    virtual void __stdcall OpenPlaylistSwitch (
        IDispatch * pItem ) = 0;
    virtual void __stdcall DomainChange (
        BSTR strDomain ) = 0;
    virtual void __stdcall SwitchedToPlayerApplication ( ) = 0;
    virtual void __stdcall SwitchedToControl ( ) = 0;
    virtual void __stdcall PlayerDockedStateChange ( ) = 0;
    virtual void __stdcall PlayerReconnect ( ) = 0;
    virtual void __stdcall Click (
        short nButton,
        short nShiftState,
        long fX,
        long fY ) = 0;
    virtual void __stdcall DoubleClick (
        short nButton,
        short nShiftState,
        long fX,
        long fY ) = 0;
    virtual void __stdcall KeyDown (
        short nKeyCode,
        short nShiftState ) = 0;
    virtual void __stdcall KeyPress (
        short nKeyAscii ) = 0;
    virtual void __stdcall KeyUp (
        short nKeyCode,
        short nShiftState ) = 0;
    virtual void __stdcall MouseDown (
        short nButton,
        short nShiftState,
        long fX,
        long fY ) = 0;
    virtual void __stdcall MouseMove (
        short nButton,
        short nShiftState,
        long fX,
        long fY ) = 0;
    virtual void __stdcall MouseUp (
        short nButton,
        short nShiftState,
        long fX,
        long fY ) = 0;
};

enum WMPPlaylistChangeEventType
{
    wmplcUnknown = 0,
    wmplcClear = 1,
    wmplcInfoChange = 2,
    wmplcMove = 3,
    wmplcDelete = 4,
    wmplcInsert = 5,
    wmplcAppend = 6,
    wmplcPrivate = 7,
    wmplcNameChange = 8,
    wmplcMorph = 9,
    wmplcSort = 10,
    wmplcLast = 11
};

struct __declspec(uuid("1e7601fa-47ea-4107-9ea9-9004ed9684ff"))
IWMPEvents2 : IWMPEvents
{
    //
    // Raw methods provided by interface
    //

    virtual void __stdcall DeviceConnect (
        struct IWMPSyncDevice * pDevice ) = 0;
    virtual void __stdcall DeviceDisconnect (
        struct IWMPSyncDevice * pDevice ) = 0;
    virtual void __stdcall DeviceStatusChange (
        struct IWMPSyncDevice * pDevice,
        enum WMPDeviceStatus NewStatus ) = 0;
    virtual void __stdcall DeviceSyncStateChange (
        struct IWMPSyncDevice * pDevice,
        enum WMPSyncState NewState ) = 0;
    virtual void __stdcall DeviceSyncError (
        struct IWMPSyncDevice * pDevice,
        IDispatch * pMedia ) = 0;
    virtual void __stdcall CreatePartnershipComplete (
        struct IWMPSyncDevice * pDevice,
        HRESULT hrResult ) = 0;
};

struct __declspec(uuid("82a2986c-0293-4fd0-b279-b21b86c058be"))
IWMPSyncDevice : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetfriendlyName,put=PutfriendlyName))
    _bstr_t friendlyName;
    __declspec(property(get=GetdeviceName))
    _bstr_t deviceName;
    __declspec(property(get=GetdeviceId))
    _bstr_t deviceId;
    __declspec(property(get=GetpartnershipIndex))
    long partnershipIndex;
    __declspec(property(get=Getconnected))
    VARIANT_BOOL connected;
    __declspec(property(get=Getstatus))
    enum WMPDeviceStatus status;
    __declspec(property(get=GetsyncState))
    enum WMPSyncState syncState;
    __declspec(property(get=Getprogress))
    long progress;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetfriendlyName ( );
    void PutfriendlyName (
        _bstr_t pbstrName );
    _bstr_t GetdeviceName ( );
    _bstr_t GetdeviceId ( );
    long GetpartnershipIndex ( );
    VARIANT_BOOL Getconnected ( );
    enum WMPDeviceStatus Getstatus ( );
    enum WMPSyncState GetsyncState ( );
    long Getprogress ( );
    _bstr_t getItemInfo (
        _bstr_t bstrItemName );
    HRESULT createPartnership (
        VARIANT_BOOL vbShowUI );
    HRESULT deletePartnership ( );
    HRESULT Start ( );
    HRESULT stop ( );
    HRESULT showSettings ( );
    VARIANT_BOOL isIdentical (
        struct IWMPSyncDevice * pDevice );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_friendlyName (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall put_friendlyName (
        BSTR pbstrName ) = 0;
    virtual HRESULT __stdcall get_deviceName (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall get_deviceId (
        BSTR * pbstrDeviceId ) = 0;
    virtual HRESULT __stdcall get_partnershipIndex (
        long * plIndex ) = 0;
    virtual HRESULT __stdcall get_connected (
        VARIANT_BOOL * pvbConnected ) = 0;
    virtual HRESULT __stdcall get_status (
        enum WMPDeviceStatus * pwmpds ) = 0;
    virtual HRESULT __stdcall get_syncState (
        enum WMPSyncState * pwmpss ) = 0;
    virtual HRESULT __stdcall get_progress (
        long * plProgress ) = 0;
    virtual HRESULT __stdcall raw_getItemInfo (
        BSTR bstrItemName,
        BSTR * pbstrVal ) = 0;
    virtual HRESULT __stdcall raw_createPartnership (
        VARIANT_BOOL vbShowUI ) = 0;
    virtual HRESULT __stdcall raw_deletePartnership ( ) = 0;
    virtual HRESULT __stdcall raw_Start ( ) = 0;
    virtual HRESULT __stdcall raw_stop ( ) = 0;
    virtual HRESULT __stdcall raw_showSettings ( ) = 0;
    virtual HRESULT __stdcall raw_isIdentical (
        struct IWMPSyncDevice * pDevice,
        VARIANT_BOOL * pvbool ) = 0;
};

enum WMPDeviceStatus
{
    wmpdsUnknown = 0,
    wmpdsPartnershipExists = 1,
    wmpdsPartnershipDeclined = 2,
    wmpdsPartnershipAnother = 3,
    wmpdsManualDevice = 4,
    wmpdsNewDevice = 5,
    wmpdsLast = 6
};

enum WMPSyncState
{
    wmpssUnknown = 0,
    wmpssSynchronizing = 1,
    wmpssStopped = 2,
    wmpssLast = 3
};

struct __declspec(uuid("6bf52a51-394a-11d3-b153-00c04f79faa6"))
_WMPOCXEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OpenStateChange (
        long NewState );
    HRESULT PlayStateChange (
        long NewState );
    HRESULT AudioLanguageChange (
        long LangID );
    HRESULT StatusChange ( );
    HRESULT ScriptCommand (
        _bstr_t scType,
        _bstr_t Param );
    HRESULT NewStream ( );
    HRESULT Disconnect (
        long Result );
    HRESULT Buffering (
        VARIANT_BOOL Start );
    HRESULT Error ( );
    HRESULT Warning (
        long WarningType,
        long Param,
        _bstr_t Description );
    HRESULT EndOfStream (
        long Result );
    HRESULT PositionChange (
        double oldPosition,
        double newPosition );
    HRESULT MarkerHit (
        long MarkerNum );
    HRESULT DurationUnitChange (
        long NewDurationUnit );
    HRESULT CdromMediaChange (
        long CdromNum );
    HRESULT PlaylistChange (
        IDispatch * Playlist,
        enum WMPPlaylistChangeEventType change );
    HRESULT CurrentPlaylistChange (
        enum WMPPlaylistChangeEventType change );
    HRESULT CurrentPlaylistItemAvailable (
        _bstr_t bstrItemName );
    HRESULT MediaChange (
        IDispatch * Item );
    HRESULT CurrentMediaItemAvailable (
        _bstr_t bstrItemName );
    HRESULT CurrentItemChange (
        IDispatch * pdispMedia );
    HRESULT MediaCollectionChange ( );
    HRESULT MediaCollectionAttributeStringAdded (
        _bstr_t bstrAttribName,
        _bstr_t bstrAttribVal );
    HRESULT MediaCollectionAttributeStringRemoved (
        _bstr_t bstrAttribName,
        _bstr_t bstrAttribVal );
    HRESULT MediaCollectionAttributeStringChanged (
        _bstr_t bstrAttribName,
        _bstr_t bstrOldAttribVal,
        _bstr_t bstrNewAttribVal );
    HRESULT PlaylistCollectionChange ( );
    HRESULT PlaylistCollectionPlaylistAdded (
        _bstr_t bstrPlaylistName );
    HRESULT PlaylistCollectionPlaylistRemoved (
        _bstr_t bstrPlaylistName );
    HRESULT PlaylistCollectionPlaylistSetAsDeleted (
        _bstr_t bstrPlaylistName,
        VARIANT_BOOL varfIsDeleted );
    HRESULT ModeChange (
        _bstr_t ModeName,
        VARIANT_BOOL NewValue );
    HRESULT MediaError (
        IDispatch * pMediaObject );
    HRESULT OpenPlaylistSwitch (
        IDispatch * pItem );
    HRESULT DomainChange (
        _bstr_t strDomain );
    HRESULT SwitchedToPlayerApplication ( );
    HRESULT SwitchedToControl ( );
    HRESULT PlayerDockedStateChange ( );
    HRESULT PlayerReconnect ( );
    HRESULT Click (
        short nButton,
        short nShiftState,
        long fX,
        long fY );
    HRESULT DoubleClick (
        short nButton,
        short nShiftState,
        long fX,
        long fY );
    HRESULT KeyDown (
        short nKeyCode,
        short nShiftState );
    HRESULT KeyPress (
        short nKeyAscii );
    HRESULT KeyUp (
        short nKeyCode,
        short nShiftState );
    HRESULT MouseDown (
        short nButton,
        short nShiftState,
        long fX,
        long fY );
    HRESULT MouseMove (
        short nButton,
        short nShiftState,
        long fX,
        long fY );
    HRESULT MouseUp (
        short nButton,
        short nShiftState,
        long fX,
        long fY );
    HRESULT DeviceConnect (
        struct IWMPSyncDevice * pDevice );
    HRESULT DeviceDisconnect (
        struct IWMPSyncDevice * pDevice );
    HRESULT DeviceStatusChange (
        struct IWMPSyncDevice * pDevice,
        enum WMPDeviceStatus NewStatus );
    HRESULT DeviceSyncStateChange (
        struct IWMPSyncDevice * pDevice,
        enum WMPSyncState NewState );
    HRESULT DeviceSyncError (
        struct IWMPSyncDevice * pDevice,
        IDispatch * pMedia );
    HRESULT CreatePartnershipComplete (
        struct IWMPSyncDevice * pDevice,
        HRESULT hrResult );
};

struct __declspec(uuid("6bf52a52-394a-11d3-b153-00c04f79faa6"))
WindowsMediaPlayer;
    // [ default ] interface IWMPPlayer4
    // interface IWMPPlayer3
    // interface IWMPPlayer2
    // interface IWMPPlayer
    // interface IWMPControls
    // interface IWMPSettings
    // interface IWMPPlaylist
    // interface IWMPMedia
    // interface IWMPMediaCollection
    // interface IWMPPlaylistCollection
    // interface IWMPCdromCollection
    // interface IWMPError
    // interface IWMPErrorItem
    // interface IWMPErrorItem2
    // interface IWMPClosedCaption
    // interface IWMPDVD
    // interface IWMPControls2
    // interface IWMPMedia2
    // interface IWMPMedia3
    // interface IWMPMetadataPicture
    // interface IWMPMetadataText
    // interface IWMPSettings2
    // interface IWMPControls3
    // interface IWMPClosedCaption2
    // [ default, source ] dispinterface _WMPOCXEvents

struct __declspec(uuid("d84cca99-cce2-11d2-9ecc-0000f8085981"))
IWMPCore : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetURL,put=PutURL))
    _bstr_t URL;
    __declspec(property(get=GetopenState))
    enum WMPOpenState openState;
    __declspec(property(get=Getcontrols))
    IWMPControlsPtr controls;
    __declspec(property(get=Getsettings))
    IWMPSettingsPtr settings;
    __declspec(property(get=GetcurrentMedia,put=PutcurrentMedia))
    IWMPMediaPtr currentMedia;
    __declspec(property(get=Getnetwork))
    IWMPNetworkPtr network;
    __declspec(property(get=GetmediaCollection))
    IWMPMediaCollectionPtr mediaCollection;
    __declspec(property(get=GetplaylistCollection))
    IWMPPlaylistCollectionPtr playlistCollection;
    __declspec(property(get=GetplayState))
    enum WMPPlayState playState;
    __declspec(property(get=GetversionInfo))
    _bstr_t versionInfo;
    __declspec(property(get=GetcurrentPlaylist,put=PutcurrentPlaylist))
    IWMPPlaylistPtr currentPlaylist;
    __declspec(property(get=GetcdromCollection))
    IWMPCdromCollectionPtr cdromCollection;
    __declspec(property(get=GetclosedCaption))
    IWMPClosedCaptionPtr closedCaption;
    __declspec(property(get=GetisOnline))
    VARIANT_BOOL isOnline;
    __declspec(property(get=GetError))
    IWMPErrorPtr Error;
    __declspec(property(get=Getstatus))
    _bstr_t status;

    //
    // Wrapper methods for error-handling
    //

    HRESULT close ( );
    _bstr_t GetURL ( );
    void PutURL (
        _bstr_t pbstrURL );
    enum WMPOpenState GetopenState ( );
    enum WMPPlayState GetplayState ( );
    IWMPControlsPtr Getcontrols ( );
    IWMPSettingsPtr Getsettings ( );
    IWMPMediaPtr GetcurrentMedia ( );
    void PutcurrentMedia (
        struct IWMPMedia * ppMedia );
    IWMPMediaCollectionPtr GetmediaCollection ( );
    IWMPPlaylistCollectionPtr GetplaylistCollection ( );
    _bstr_t GetversionInfo ( );
    HRESULT launchURL (
        _bstr_t bstrURL );
    IWMPNetworkPtr Getnetwork ( );
    IWMPPlaylistPtr GetcurrentPlaylist ( );
    void PutcurrentPlaylist (
        struct IWMPPlaylist * ppPL );
    IWMPCdromCollectionPtr GetcdromCollection ( );
    IWMPClosedCaptionPtr GetclosedCaption ( );
    VARIANT_BOOL GetisOnline ( );
    IWMPErrorPtr GetError ( );
    _bstr_t Getstatus ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_close ( ) = 0;
    virtual HRESULT __stdcall get_URL (
        BSTR * pbstrURL ) = 0;
    virtual HRESULT __stdcall put_URL (
        BSTR pbstrURL ) = 0;
    virtual HRESULT __stdcall get_openState (
        enum WMPOpenState * pwmpos ) = 0;
    virtual HRESULT __stdcall get_playState (
        enum WMPPlayState * pwmpps ) = 0;
    virtual HRESULT __stdcall get_controls (
        struct IWMPControls * * ppControl ) = 0;
    virtual HRESULT __stdcall get_settings (
        struct IWMPSettings * * ppSettings ) = 0;
    virtual HRESULT __stdcall get_currentMedia (
        struct IWMPMedia * * ppMedia ) = 0;
    virtual HRESULT __stdcall put_currentMedia (
        struct IWMPMedia * ppMedia ) = 0;
    virtual HRESULT __stdcall get_mediaCollection (
        struct IWMPMediaCollection * * ppMediaCollection ) = 0;
    virtual HRESULT __stdcall get_playlistCollection (
        struct IWMPPlaylistCollection * * ppPlaylistCollection ) = 0;
    virtual HRESULT __stdcall get_versionInfo (
        BSTR * pbstrVersionInfo ) = 0;
    virtual HRESULT __stdcall raw_launchURL (
        BSTR bstrURL ) = 0;
    virtual HRESULT __stdcall get_network (
        struct IWMPNetwork * * ppQNI ) = 0;
    virtual HRESULT __stdcall get_currentPlaylist (
        struct IWMPPlaylist * * ppPL ) = 0;
    virtual HRESULT __stdcall put_currentPlaylist (
        struct IWMPPlaylist * ppPL ) = 0;
    virtual HRESULT __stdcall get_cdromCollection (
        struct IWMPCdromCollection * * ppCdromCollection ) = 0;
    virtual HRESULT __stdcall get_closedCaption (
        struct IWMPClosedCaption * * ppClosedCaption ) = 0;
    virtual HRESULT __stdcall get_isOnline (
        VARIANT_BOOL * pfOnline ) = 0;
    virtual HRESULT __stdcall get_Error (
        struct IWMPError * * ppError ) = 0;
    virtual HRESULT __stdcall get_status (
        BSTR * pbstrStatus ) = 0;
};

struct __declspec(uuid("bc17e5b7-7561-4c18-bb90-17d485775659"))
IWMPCore2 : IWMPCore
{
    //
    // Property data
    //

    __declspec(property(get=Getdvd))
    IWMPDVDPtr dvd;

    //
    // Wrapper methods for error-handling
    //

    IWMPDVDPtr Getdvd ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_dvd (
        struct IWMPDVD * * ppDVD ) = 0;
};

struct __declspec(uuid("7587c667-628f-499f-88e7-6a6f4e888464"))
IWMPCore3 : IWMPCore2
{
    //
    // Wrapper methods for error-handling
    //

    IWMPPlaylistPtr newPlaylist (
        _bstr_t bstrName,
        _bstr_t bstrURL );
    IWMPMediaPtr newMedia (
        _bstr_t bstrURL );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_newPlaylist (
        BSTR bstrName,
        BSTR bstrURL,
        struct IWMPPlaylist * * ppPlaylist ) = 0;
    virtual HRESULT __stdcall raw_newMedia (
        BSTR bstrURL,
        struct IWMPMedia * * ppMedia ) = 0;
};

struct __declspec(uuid("6c497d62-8919-413c-82db-e935fb3ec584"))
IWMPPlayer4 : IWMPCore3
{
    //
    // Property data
    //

    __declspec(property(get=Getenabled,put=Putenabled))
    VARIANT_BOOL enabled;
    __declspec(property(get=GetuiMode,put=PutuiMode))
    _bstr_t uiMode;
    __declspec(property(get=GetstretchToFit,put=PutstretchToFit))
    VARIANT_BOOL stretchToFit;
    __declspec(property(get=GetwindowlessVideo,put=PutwindowlessVideo))
    VARIANT_BOOL windowlessVideo;
    __declspec(property(get=GetisRemote))
    VARIANT_BOOL isRemote;
    __declspec(property(get=GetplayerApplication))
    IWMPPlayerApplicationPtr playerApplication;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Getenabled ( );
    void Putenabled (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetfullScreen ( );
    void PutfullScreen (
        VARIANT_BOOL pbFullScreen );
    VARIANT_BOOL GetenableContextMenu ( );
    void PutenableContextMenu (
        VARIANT_BOOL pbEnableContextMenu );
    void PutuiMode (
        _bstr_t pbstrMode );
    _bstr_t GetuiMode ( );
    VARIANT_BOOL GetstretchToFit ( );
    void PutstretchToFit (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetwindowlessVideo ( );
    void PutwindowlessVideo (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetisRemote ( );
    IWMPPlayerApplicationPtr GetplayerApplication ( );
    HRESULT openPlayer (
        _bstr_t bstrURL );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_enabled (
        VARIANT_BOOL * pbEnabled ) = 0;
    virtual HRESULT __stdcall put_enabled (
        VARIANT_BOOL pbEnabled ) = 0;
    virtual HRESULT __stdcall get_fullScreen (
        VARIANT_BOOL * pbFullScreen ) = 0;
    virtual HRESULT __stdcall put_fullScreen (
        VARIANT_BOOL pbFullScreen ) = 0;
    virtual HRESULT __stdcall get_enableContextMenu (
        VARIANT_BOOL * pbEnableContextMenu ) = 0;
    virtual HRESULT __stdcall put_enableContextMenu (
        VARIANT_BOOL pbEnableContextMenu ) = 0;
    virtual HRESULT __stdcall put_uiMode (
        BSTR pbstrMode ) = 0;
    virtual HRESULT __stdcall get_uiMode (
        BSTR * pbstrMode ) = 0;
    virtual HRESULT __stdcall get_stretchToFit (
        VARIANT_BOOL * pbEnabled ) = 0;
    virtual HRESULT __stdcall put_stretchToFit (
        VARIANT_BOOL pbEnabled ) = 0;
    virtual HRESULT __stdcall get_windowlessVideo (
        VARIANT_BOOL * pbEnabled ) = 0;
    virtual HRESULT __stdcall put_windowlessVideo (
        VARIANT_BOOL pbEnabled ) = 0;
    virtual HRESULT __stdcall get_isRemote (
        VARIANT_BOOL * pvarfIsRemote ) = 0;
    virtual HRESULT __stdcall get_playerApplication (
        struct IWMPPlayerApplication * * ppIWMPPlayerApplication ) = 0;
    virtual HRESULT __stdcall raw_openPlayer (
        BSTR bstrURL ) = 0;
};

enum WMPOpenState
{
    wmposUndefined = 0,
    wmposPlaylistChanging = 1,
    wmposPlaylistLocating = 2,
    wmposPlaylistConnecting = 3,
    wmposPlaylistLoading = 4,
    wmposPlaylistOpening = 5,
    wmposPlaylistOpenNoMedia = 6,
    wmposPlaylistChanged = 7,
    wmposMediaChanging = 8,
    wmposMediaLocating = 9,
    wmposMediaConnecting = 10,
    wmposMediaLoading = 11,
    wmposMediaOpening = 12,
    wmposMediaOpen = 13,
    wmposBeginCodecAcquisition = 14,
    wmposEndCodecAcquisition = 15,
    wmposBeginLicenseAcquisition = 16,
    wmposEndLicenseAcquisition = 17,
    wmposBeginIndividualization = 18,
    wmposEndIndividualization = 19,
    wmposMediaWaiting = 20,
    wmposOpeningUnknownURL = 21
};

enum WMPPlayState
{
    wmppsUndefined = 0,
    wmppsStopped = 1,
    wmppsPaused = 2,
    wmppsPlaying = 3,
    wmppsScanForward = 4,
    wmppsScanReverse = 5,
    wmppsBuffering = 6,
    wmppsWaiting = 7,
    wmppsMediaEnded = 8,
    wmppsTransitioning = 9,
    wmppsReady = 10,
    wmppsReconnecting = 11,
    wmppsLast = 12
};

struct __declspec(uuid("74c09e02-f828-11d2-a74b-00a0c905f36e"))
IWMPControls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetcurrentPosition,put=PutcurrentPosition))
    double currentPosition;
    __declspec(property(get=GetcurrentPositionString))
    _bstr_t currentPositionString;
    __declspec(property(get=GetcurrentItem,put=PutcurrentItem))
    IWMPMediaPtr currentItem;
    __declspec(property(get=GetcurrentMarker,put=PutcurrentMarker))
    long currentMarker;
    __declspec(property(get=GetisAvailable))
    VARIANT_BOOL isAvailable[];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetisAvailable (
        _bstr_t bstrItem );
    HRESULT play ( );
    HRESULT stop ( );
    HRESULT pause ( );
    HRESULT fastForward ( );
    HRESULT fastReverse ( );
    double GetcurrentPosition ( );
    void PutcurrentPosition (
        double pdCurrentPosition );
    _bstr_t GetcurrentPositionString ( );
    HRESULT next ( );
    HRESULT previous ( );
    IWMPMediaPtr GetcurrentItem ( );
    void PutcurrentItem (
        struct IWMPMedia * ppIWMPMedia );
    long GetcurrentMarker ( );
    void PutcurrentMarker (
        long plMarker );
    HRESULT playItem (
        struct IWMPMedia * pIWMPMedia );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_isAvailable (
        BSTR bstrItem,
        VARIANT_BOOL * pIsAvailable ) = 0;
    virtual HRESULT __stdcall raw_play ( ) = 0;
    virtual HRESULT __stdcall raw_stop ( ) = 0;
    virtual HRESULT __stdcall raw_pause ( ) = 0;
    virtual HRESULT __stdcall raw_fastForward ( ) = 0;
    virtual HRESULT __stdcall raw_fastReverse ( ) = 0;
    virtual HRESULT __stdcall get_currentPosition (
        double * pdCurrentPosition ) = 0;
    virtual HRESULT __stdcall put_currentPosition (
        double pdCurrentPosition ) = 0;
    virtual HRESULT __stdcall get_currentPositionString (
        BSTR * pbstrCurrentPosition ) = 0;
    virtual HRESULT __stdcall raw_next ( ) = 0;
    virtual HRESULT __stdcall raw_previous ( ) = 0;
    virtual HRESULT __stdcall get_currentItem (
        struct IWMPMedia * * ppIWMPMedia ) = 0;
    virtual HRESULT __stdcall put_currentItem (
        struct IWMPMedia * ppIWMPMedia ) = 0;
    virtual HRESULT __stdcall get_currentMarker (
        long * plMarker ) = 0;
    virtual HRESULT __stdcall put_currentMarker (
        long plMarker ) = 0;
    virtual HRESULT __stdcall raw_playItem (
        struct IWMPMedia * pIWMPMedia ) = 0;
};

struct __declspec(uuid("94d55e95-3fac-11d3-b155-00c04f79faa6"))
IWMPMedia : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetsourceURL))
    _bstr_t sourceURL;
    __declspec(property(get=GetimageSourceWidth))
    long imageSourceWidth;
    __declspec(property(get=GetimageSourceHeight))
    long imageSourceHeight;
    __declspec(property(get=GetmarkerCount))
    long markerCount;
    __declspec(property(get=Getduration))
    double duration;
    __declspec(property(get=GetdurationString))
    _bstr_t durationString;
    __declspec(property(get=GetattributeCount))
    long attributeCount;
    __declspec(property(get=GetisIdentical))
    VARIANT_BOOL isIdentical[];
    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetisIdentical (
        struct IWMPMedia * pIWMPMedia );
    _bstr_t GetsourceURL ( );
    _bstr_t Getname ( );
    void Putname (
        _bstr_t pbstrName );
    long GetimageSourceWidth ( );
    long GetimageSourceHeight ( );
    long GetmarkerCount ( );
    double getMarkerTime (
        long MarkerNum );
    _bstr_t getMarkerName (
        long MarkerNum );
    double Getduration ( );
    _bstr_t GetdurationString ( );
    long GetattributeCount ( );
    _bstr_t getAttributeName (
        long lIndex );
    _bstr_t getItemInfo (
        _bstr_t bstrItemName );
    HRESULT setItemInfo (
        _bstr_t bstrItemName,
        _bstr_t bstrVal );
    _bstr_t getItemInfoByAtom (
        long lAtom );
    VARIANT_BOOL isMemberOf (
        struct IWMPPlaylist * pPlaylist );
    VARIANT_BOOL isReadOnlyItem (
        _bstr_t bstrItemName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_isIdentical (
        struct IWMPMedia * pIWMPMedia,
        VARIANT_BOOL * pvbool ) = 0;
    virtual HRESULT __stdcall get_sourceURL (
        BSTR * pbstrSourceURL ) = 0;
    virtual HRESULT __stdcall get_name (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall put_name (
        BSTR pbstrName ) = 0;
    virtual HRESULT __stdcall get_imageSourceWidth (
        long * pWidth ) = 0;
    virtual HRESULT __stdcall get_imageSourceHeight (
        long * pHeight ) = 0;
    virtual HRESULT __stdcall get_markerCount (
        long * pMarkerCount ) = 0;
    virtual HRESULT __stdcall raw_getMarkerTime (
        long MarkerNum,
        double * pMarkerTime ) = 0;
    virtual HRESULT __stdcall raw_getMarkerName (
        long MarkerNum,
        BSTR * pbstrMarkerName ) = 0;
    virtual HRESULT __stdcall get_duration (
        double * pDuration ) = 0;
    virtual HRESULT __stdcall get_durationString (
        BSTR * pbstrDuration ) = 0;
    virtual HRESULT __stdcall get_attributeCount (
        long * plCount ) = 0;
    virtual HRESULT __stdcall raw_getAttributeName (
        long lIndex,
        BSTR * pbstrItemName ) = 0;
    virtual HRESULT __stdcall raw_getItemInfo (
        BSTR bstrItemName,
        BSTR * pbstrVal ) = 0;
    virtual HRESULT __stdcall raw_setItemInfo (
        BSTR bstrItemName,
        BSTR bstrVal ) = 0;
    virtual HRESULT __stdcall raw_getItemInfoByAtom (
        long lAtom,
        BSTR * pbstrVal ) = 0;
    virtual HRESULT __stdcall raw_isMemberOf (
        struct IWMPPlaylist * pPlaylist,
        VARIANT_BOOL * pvarfIsMemberOf ) = 0;
    virtual HRESULT __stdcall raw_isReadOnlyItem (
        BSTR bstrItemName,
        VARIANT_BOOL * pvarfIsReadOnly ) = 0;
};

struct __declspec(uuid("d5f0f4f1-130c-11d3-b14e-00c04f79faa6"))
IWMPPlaylist : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcount))
    long count;
    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;
    __declspec(property(get=GetattributeCount))
    long attributeCount;
    __declspec(property(get=GetattributeName))
    _bstr_t attributeName[];
    __declspec(property(get=GetisIdentical))
    VARIANT_BOOL isIdentical[];

    //
    // Wrapper methods for error-handling
    //

    long Getcount ( );
    _bstr_t Getname ( );
    void Putname (
        _bstr_t pbstrName );
    long GetattributeCount ( );
    _bstr_t GetattributeName (
        long lIndex );
    IWMPMediaPtr GetItem (
        long lIndex );
    _bstr_t getItemInfo (
        _bstr_t bstrName );
    HRESULT setItemInfo (
        _bstr_t bstrName,
        _bstr_t bstrValue );
    VARIANT_BOOL GetisIdentical (
        struct IWMPPlaylist * pIWMPPlaylist );
    HRESULT clear ( );
    HRESULT insertItem (
        long lIndex,
        struct IWMPMedia * pIWMPMedia );
    HRESULT appendItem (
        struct IWMPMedia * pIWMPMedia );
    HRESULT removeItem (
        struct IWMPMedia * pIWMPMedia );
    HRESULT moveItem (
        long lIndexOld,
        long lIndexNew );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_count (
        long * plCount ) = 0;
    virtual HRESULT __stdcall get_name (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall put_name (
        BSTR pbstrName ) = 0;
    virtual HRESULT __stdcall get_attributeCount (
        long * plCount ) = 0;
    virtual HRESULT __stdcall get_attributeName (
        long lIndex,
        BSTR * pbstrAttributeName ) = 0;
    virtual HRESULT __stdcall get_Item (
        long lIndex,
        struct IWMPMedia * * ppIWMPMedia ) = 0;
    virtual HRESULT __stdcall raw_getItemInfo (
        BSTR bstrName,
        BSTR * pbstrVal ) = 0;
    virtual HRESULT __stdcall raw_setItemInfo (
        BSTR bstrName,
        BSTR bstrValue ) = 0;
    virtual HRESULT __stdcall get_isIdentical (
        struct IWMPPlaylist * pIWMPPlaylist,
        VARIANT_BOOL * pvbool ) = 0;
    virtual HRESULT __stdcall raw_clear ( ) = 0;
    virtual HRESULT __stdcall raw_insertItem (
        long lIndex,
        struct IWMPMedia * pIWMPMedia ) = 0;
    virtual HRESULT __stdcall raw_appendItem (
        struct IWMPMedia * pIWMPMedia ) = 0;
    virtual HRESULT __stdcall raw_removeItem (
        struct IWMPMedia * pIWMPMedia ) = 0;
    virtual HRESULT __stdcall raw_moveItem (
        long lIndexOld,
        long lIndexNew ) = 0;
};

struct __declspec(uuid("9104d1ab-80c9-4fed-abf0-2e6417a6df14"))
IWMPSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetautoStart,put=PutautoStart))
    VARIANT_BOOL autoStart;
    __declspec(property(get=Getbalance,put=Putbalance))
    long balance;
    __declspec(property(get=GetinvokeURLs,put=PutinvokeURLs))
    VARIANT_BOOL invokeURLs;
    __declspec(property(get=Getmute,put=Putmute))
    VARIANT_BOOL mute;
    __declspec(property(get=GetplayCount,put=PutplayCount))
    long playCount;
    __declspec(property(get=Getrate,put=Putrate))
    double rate;
    __declspec(property(get=Getvolume,put=Putvolume))
    long volume;
    __declspec(property(get=GetbaseURL,put=PutbaseURL))
    _bstr_t baseURL;
    __declspec(property(get=GetdefaultFrame,put=PutdefaultFrame))
    _bstr_t defaultFrame;
    __declspec(property(get=GetenableErrorDialogs,put=PutenableErrorDialogs))
    VARIANT_BOOL enableErrorDialogs;
    __declspec(property(get=GetisAvailable))
    VARIANT_BOOL isAvailable[];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetisAvailable (
        _bstr_t bstrItem );
    VARIANT_BOOL GetautoStart ( );
    void PutautoStart (
        VARIANT_BOOL pfAutoStart );
    _bstr_t GetbaseURL ( );
    void PutbaseURL (
        _bstr_t pbstrBaseURL );
    _bstr_t GetdefaultFrame ( );
    void PutdefaultFrame (
        _bstr_t pbstrDefaultFrame );
    VARIANT_BOOL GetinvokeURLs ( );
    void PutinvokeURLs (
        VARIANT_BOOL pfInvokeURLs );
    VARIANT_BOOL Getmute ( );
    void Putmute (
        VARIANT_BOOL pfMute );
    long GetplayCount ( );
    void PutplayCount (
        long plCount );
    double Getrate ( );
    void Putrate (
        double pdRate );
    long Getbalance ( );
    void Putbalance (
        long plBalance );
    long Getvolume ( );
    void Putvolume (
        long plVolume );
    VARIANT_BOOL getMode (
        _bstr_t bstrMode );
    HRESULT setMode (
        _bstr_t bstrMode,
        VARIANT_BOOL varfMode );
    VARIANT_BOOL GetenableErrorDialogs ( );
    void PutenableErrorDialogs (
        VARIANT_BOOL pfEnableErrorDialogs );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_isAvailable (
        BSTR bstrItem,
        VARIANT_BOOL * pIsAvailable ) = 0;
    virtual HRESULT __stdcall get_autoStart (
        VARIANT_BOOL * pfAutoStart ) = 0;
    virtual HRESULT __stdcall put_autoStart (
        VARIANT_BOOL pfAutoStart ) = 0;
    virtual HRESULT __stdcall get_baseURL (
        BSTR * pbstrBaseURL ) = 0;
    virtual HRESULT __stdcall put_baseURL (
        BSTR pbstrBaseURL ) = 0;
    virtual HRESULT __stdcall get_defaultFrame (
        BSTR * pbstrDefaultFrame ) = 0;
    virtual HRESULT __stdcall put_defaultFrame (
        BSTR pbstrDefaultFrame ) = 0;
    virtual HRESULT __stdcall get_invokeURLs (
        VARIANT_BOOL * pfInvokeURLs ) = 0;
    virtual HRESULT __stdcall put_invokeURLs (
        VARIANT_BOOL pfInvokeURLs ) = 0;
    virtual HRESULT __stdcall get_mute (
        VARIANT_BOOL * pfMute ) = 0;
    virtual HRESULT __stdcall put_mute (
        VARIANT_BOOL pfMute ) = 0;
    virtual HRESULT __stdcall get_playCount (
        long * plCount ) = 0;
    virtual HRESULT __stdcall put_playCount (
        long plCount ) = 0;
    virtual HRESULT __stdcall get_rate (
        double * pdRate ) = 0;
    virtual HRESULT __stdcall put_rate (
        double pdRate ) = 0;
    virtual HRESULT __stdcall get_balance (
        long * plBalance ) = 0;
    virtual HRESULT __stdcall put_balance (
        long plBalance ) = 0;
    virtual HRESULT __stdcall get_volume (
        long * plVolume ) = 0;
    virtual HRESULT __stdcall put_volume (
        long plVolume ) = 0;
    virtual HRESULT __stdcall raw_getMode (
        BSTR bstrMode,
        VARIANT_BOOL * pvarfMode ) = 0;
    virtual HRESULT __stdcall raw_setMode (
        BSTR bstrMode,
        VARIANT_BOOL varfMode ) = 0;
    virtual HRESULT __stdcall get_enableErrorDialogs (
        VARIANT_BOOL * pfEnableErrorDialogs ) = 0;
    virtual HRESULT __stdcall put_enableErrorDialogs (
        VARIANT_BOOL pfEnableErrorDialogs ) = 0;
};

struct __declspec(uuid("8363bc22-b4b4-4b19-989d-1cd765749dd1"))
IWMPMediaCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IWMPMediaPtr add (
        _bstr_t bstrURL );
    IWMPPlaylistPtr getAll ( );
    IWMPPlaylistPtr getByName (
        _bstr_t bstrName );
    IWMPPlaylistPtr getByGenre (
        _bstr_t bstrGenre );
    IWMPPlaylistPtr getByAuthor (
        _bstr_t bstrAuthor );
    IWMPPlaylistPtr getByAlbum (
        _bstr_t bstrAlbum );
    IWMPPlaylistPtr getByAttribute (
        _bstr_t bstrAttribute,
        _bstr_t bstrValue );
    HRESULT remove (
        struct IWMPMedia * pItem,
        VARIANT_BOOL varfDeleteFile );
    IWMPStringCollectionPtr getAttributeStringCollection (
        _bstr_t bstrAttribute,
        _bstr_t bstrMediaType );
    long getMediaAtom (
        _bstr_t bstrItemName );
    HRESULT setDeleted (
        struct IWMPMedia * pItem,
        VARIANT_BOOL varfIsDeleted );
    VARIANT_BOOL isDeleted (
        struct IWMPMedia * pItem );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_add (
        BSTR bstrURL,
        struct IWMPMedia * * ppItem ) = 0;
    virtual HRESULT __stdcall raw_getAll (
        struct IWMPPlaylist * * ppMediaItems ) = 0;
    virtual HRESULT __stdcall raw_getByName (
        BSTR bstrName,
        struct IWMPPlaylist * * ppMediaItems ) = 0;
    virtual HRESULT __stdcall raw_getByGenre (
        BSTR bstrGenre,
        struct IWMPPlaylist * * ppMediaItems ) = 0;
    virtual HRESULT __stdcall raw_getByAuthor (
        BSTR bstrAuthor,
        struct IWMPPlaylist * * ppMediaItems ) = 0;
    virtual HRESULT __stdcall raw_getByAlbum (
        BSTR bstrAlbum,
        struct IWMPPlaylist * * ppMediaItems ) = 0;
    virtual HRESULT __stdcall raw_getByAttribute (
        BSTR bstrAttribute,
        BSTR bstrValue,
        struct IWMPPlaylist * * ppMediaItems ) = 0;
    virtual HRESULT __stdcall raw_remove (
        struct IWMPMedia * pItem,
        VARIANT_BOOL varfDeleteFile ) = 0;
    virtual HRESULT __stdcall raw_getAttributeStringCollection (
        BSTR bstrAttribute,
        BSTR bstrMediaType,
        struct IWMPStringCollection * * ppStringCollection ) = 0;
    virtual HRESULT __stdcall raw_getMediaAtom (
        BSTR bstrItemName,
        long * plAtom ) = 0;
    virtual HRESULT __stdcall raw_setDeleted (
        struct IWMPMedia * pItem,
        VARIANT_BOOL varfIsDeleted ) = 0;
    virtual HRESULT __stdcall raw_isDeleted (
        struct IWMPMedia * pItem,
        VARIANT_BOOL * pvarfIsDeleted ) = 0;
};

struct __declspec(uuid("4a976298-8c0d-11d3-b389-00c04f68574b"))
IWMPStringCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcount))
    long count;

    //
    // Wrapper methods for error-handling
    //

    long Getcount ( );
    _bstr_t Item (
        long lIndex );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_count (
        long * plCount ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long lIndex,
        BSTR * pbstrString ) = 0;
};

struct __declspec(uuid("10a13217-23a7-439b-b1c0-d847c79b7774"))
IWMPPlaylistCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IWMPPlaylistPtr newPlaylist (
        _bstr_t bstrName );
    IWMPPlaylistArrayPtr getAll ( );
    IWMPPlaylistArrayPtr getByName (
        _bstr_t bstrName );
    HRESULT remove (
        struct IWMPPlaylist * pItem );
    HRESULT setDeleted (
        struct IWMPPlaylist * pItem,
        VARIANT_BOOL varfIsDeleted );
    VARIANT_BOOL isDeleted (
        struct IWMPPlaylist * pItem );
    IWMPPlaylistPtr importPlaylist (
        struct IWMPPlaylist * pItem );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_newPlaylist (
        BSTR bstrName,
        struct IWMPPlaylist * * ppItem ) = 0;
    virtual HRESULT __stdcall raw_getAll (
        struct IWMPPlaylistArray * * ppPlaylistArray ) = 0;
    virtual HRESULT __stdcall raw_getByName (
        BSTR bstrName,
        struct IWMPPlaylistArray * * ppPlaylistArray ) = 0;
    virtual HRESULT __stdcall raw_remove (
        struct IWMPPlaylist * pItem ) = 0;
    virtual HRESULT __stdcall raw_setDeleted (
        struct IWMPPlaylist * pItem,
        VARIANT_BOOL varfIsDeleted ) = 0;
    virtual HRESULT __stdcall raw_isDeleted (
        struct IWMPPlaylist * pItem,
        VARIANT_BOOL * pvarfIsDeleted ) = 0;
    virtual HRESULT __stdcall raw_importPlaylist (
        struct IWMPPlaylist * pItem,
        struct IWMPPlaylist * * ppImportedItem ) = 0;
};

struct __declspec(uuid("679409c0-99f7-11d3-9fb7-00105aa620bb"))
IWMPPlaylistArray : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcount))
    long count;

    //
    // Wrapper methods for error-handling
    //

    long Getcount ( );
    IWMPPlaylistPtr Item (
        long lIndex );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_count (
        long * plCount ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long lIndex,
        struct IWMPPlaylist * * ppItem ) = 0;
};

struct __declspec(uuid("ec21b779-edef-462d-bba4-ad9dde2b29a7"))
IWMPNetwork : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetbandWidth))
    long bandWidth;
    __declspec(property(get=GetrecoveredPackets))
    long recoveredPackets;
    __declspec(property(get=GetsourceProtocol))
    _bstr_t sourceProtocol;
    __declspec(property(get=GetreceivedPackets))
    long receivedPackets;
    __declspec(property(get=GetlostPackets))
    long lostPackets;
    __declspec(property(get=GetreceptionQuality))
    long receptionQuality;
    __declspec(property(get=GetbufferingCount))
    long bufferingCount;
    __declspec(property(get=GetbufferingProgress))
    long bufferingProgress;
    __declspec(property(get=GetbufferingTime,put=PutbufferingTime))
    long bufferingTime;
    __declspec(property(get=GetframeRate))
    long frameRate;
    __declspec(property(get=GetmaxBitRate))
    long maxBitRate;
    __declspec(property(get=GetbitRate))
    long bitRate;
    __declspec(property(get=GetmaxBandwidth,put=PutmaxBandwidth))
    long maxBandwidth;
    __declspec(property(get=GetdownloadProgress))
    long downloadProgress;
    __declspec(property(get=GetencodedFrameRate))
    long encodedFrameRate;
    __declspec(property(get=GetframesSkipped))
    long framesSkipped;

    //
    // Wrapper methods for error-handling
    //

    long GetbandWidth ( );
    long GetrecoveredPackets ( );
    _bstr_t GetsourceProtocol ( );
    long GetreceivedPackets ( );
    long GetlostPackets ( );
    long GetreceptionQuality ( );
    long GetbufferingCount ( );
    long GetbufferingProgress ( );
    long GetbufferingTime ( );
    void PutbufferingTime (
        long plBufferingTime );
    long GetframeRate ( );
    long GetmaxBitRate ( );
    long GetbitRate ( );
    long getProxySettings (
        _bstr_t bstrProtocol );
    HRESULT setProxySettings (
        _bstr_t bstrProtocol,
        long lProxySetting );
    _bstr_t getProxyName (
        _bstr_t bstrProtocol );
    HRESULT setProxyName (
        _bstr_t bstrProtocol,
        _bstr_t bstrProxyName );
    long getProxyPort (
        _bstr_t bstrProtocol );
    HRESULT setProxyPort (
        _bstr_t bstrProtocol,
        long lProxyPort );
    _bstr_t getProxyExceptionList (
        _bstr_t bstrProtocol );
    HRESULT setProxyExceptionList (
        _bstr_t bstrProtocol,
        _bstr_t pbstrExceptionList );
    VARIANT_BOOL getProxyBypassForLocal (
        _bstr_t bstrProtocol );
    HRESULT setProxyBypassForLocal (
        _bstr_t bstrProtocol,
        VARIANT_BOOL fBypassForLocal );
    long GetmaxBandwidth ( );
    void PutmaxBandwidth (
        long lMaxBandwidth );
    long GetdownloadProgress ( );
    long GetencodedFrameRate ( );
    long GetframesSkipped ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_bandWidth (
        long * plBandwidth ) = 0;
    virtual HRESULT __stdcall get_recoveredPackets (
        long * plRecoveredPackets ) = 0;
    virtual HRESULT __stdcall get_sourceProtocol (
        BSTR * pbstrSourceProtocol ) = 0;
    virtual HRESULT __stdcall get_receivedPackets (
        long * plReceivedPackets ) = 0;
    virtual HRESULT __stdcall get_lostPackets (
        long * plLostPackets ) = 0;
    virtual HRESULT __stdcall get_receptionQuality (
        long * plReceptionQuality ) = 0;
    virtual HRESULT __stdcall get_bufferingCount (
        long * plBufferingCount ) = 0;
    virtual HRESULT __stdcall get_bufferingProgress (
        long * plBufferingProgress ) = 0;
    virtual HRESULT __stdcall get_bufferingTime (
        long * plBufferingTime ) = 0;
    virtual HRESULT __stdcall put_bufferingTime (
        long plBufferingTime ) = 0;
    virtual HRESULT __stdcall get_frameRate (
        long * plFrameRate ) = 0;
    virtual HRESULT __stdcall get_maxBitRate (
        long * plBitRate ) = 0;
    virtual HRESULT __stdcall get_bitRate (
        long * plBitRate ) = 0;
    virtual HRESULT __stdcall raw_getProxySettings (
        BSTR bstrProtocol,
        long * plProxySetting ) = 0;
    virtual HRESULT __stdcall raw_setProxySettings (
        BSTR bstrProtocol,
        long lProxySetting ) = 0;
    virtual HRESULT __stdcall raw_getProxyName (
        BSTR bstrProtocol,
        BSTR * pbstrProxyName ) = 0;
    virtual HRESULT __stdcall raw_setProxyName (
        BSTR bstrProtocol,
        BSTR bstrProxyName ) = 0;
    virtual HRESULT __stdcall raw_getProxyPort (
        BSTR bstrProtocol,
        long * lProxyPort ) = 0;
    virtual HRESULT __stdcall raw_setProxyPort (
        BSTR bstrProtocol,
        long lProxyPort ) = 0;
    virtual HRESULT __stdcall raw_getProxyExceptionList (
        BSTR bstrProtocol,
        BSTR * pbstrExceptionList ) = 0;
    virtual HRESULT __stdcall raw_setProxyExceptionList (
        BSTR bstrProtocol,
        BSTR pbstrExceptionList ) = 0;
    virtual HRESULT __stdcall raw_getProxyBypassForLocal (
        BSTR bstrProtocol,
        VARIANT_BOOL * pfBypassForLocal ) = 0;
    virtual HRESULT __stdcall raw_setProxyBypassForLocal (
        BSTR bstrProtocol,
        VARIANT_BOOL fBypassForLocal ) = 0;
    virtual HRESULT __stdcall get_maxBandwidth (
        long * lMaxBandwidth ) = 0;
    virtual HRESULT __stdcall put_maxBandwidth (
        long lMaxBandwidth ) = 0;
    virtual HRESULT __stdcall get_downloadProgress (
        long * plDownloadProgress ) = 0;
    virtual HRESULT __stdcall get_encodedFrameRate (
        long * plFrameRate ) = 0;
    virtual HRESULT __stdcall get_framesSkipped (
        long * plFrames ) = 0;
};

struct __declspec(uuid("ee4c8fe2-34b2-11d3-a3bf-006097c9b344"))
IWMPCdromCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcount))
    long count;

    //
    // Wrapper methods for error-handling
    //

    long Getcount ( );
    IWMPCdromPtr Item (
        long lIndex );
    IWMPCdromPtr getByDriveSpecifier (
        _bstr_t bstrDriveSpecifier );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_count (
        long * plCount ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long lIndex,
        struct IWMPCdrom * * ppItem ) = 0;
    virtual HRESULT __stdcall raw_getByDriveSpecifier (
        BSTR bstrDriveSpecifier,
        struct IWMPCdrom * * ppCdrom ) = 0;
};

struct __declspec(uuid("cfab6e98-8730-11d3-b388-00c04f68574b"))
IWMPCdrom : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdriveSpecifier))
    _bstr_t driveSpecifier;
    __declspec(property(get=GetPlaylist))
    IWMPPlaylistPtr Playlist;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetdriveSpecifier ( );
    IWMPPlaylistPtr GetPlaylist ( );
    HRESULT eject ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_driveSpecifier (
        BSTR * pbstrDrive ) = 0;
    virtual HRESULT __stdcall get_Playlist (
        struct IWMPPlaylist * * ppPlaylist ) = 0;
    virtual HRESULT __stdcall raw_eject ( ) = 0;
};

struct __declspec(uuid("4f2df574-c588-11d3-9ed0-00c04fb6e937"))
IWMPClosedCaption : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSAMIStyle,put=PutSAMIStyle))
    _bstr_t SAMIStyle;
    __declspec(property(get=GetSAMILang,put=PutSAMILang))
    _bstr_t SAMILang;
    __declspec(property(get=GetSAMIFileName,put=PutSAMIFileName))
    _bstr_t SAMIFileName;
    __declspec(property(get=GetcaptioningId,put=PutcaptioningId))
    _bstr_t captioningId;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSAMIStyle ( );
    void PutSAMIStyle (
        _bstr_t pbstrSAMIStyle );
    _bstr_t GetSAMILang ( );
    void PutSAMILang (
        _bstr_t pbstrSAMILang );
    _bstr_t GetSAMIFileName ( );
    void PutSAMIFileName (
        _bstr_t pbstrSAMIFileName );
    _bstr_t GetcaptioningId ( );
    void PutcaptioningId (
        _bstr_t pbstrCaptioningID );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_SAMIStyle (
        BSTR * pbstrSAMIStyle ) = 0;
    virtual HRESULT __stdcall put_SAMIStyle (
        BSTR pbstrSAMIStyle ) = 0;
    virtual HRESULT __stdcall get_SAMILang (
        BSTR * pbstrSAMILang ) = 0;
    virtual HRESULT __stdcall put_SAMILang (
        BSTR pbstrSAMILang ) = 0;
    virtual HRESULT __stdcall get_SAMIFileName (
        BSTR * pbstrSAMIFileName ) = 0;
    virtual HRESULT __stdcall put_SAMIFileName (
        BSTR pbstrSAMIFileName ) = 0;
    virtual HRESULT __stdcall get_captioningId (
        BSTR * pbstrCaptioningID ) = 0;
    virtual HRESULT __stdcall put_captioningId (
        BSTR pbstrCaptioningID ) = 0;
};

struct __declspec(uuid("a12dcf7d-14ab-4c1b-a8cd-63909f06025b"))
IWMPError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GeterrorCount))
    long errorCount;
    __declspec(property(get=GetItem))
    IWMPErrorItemPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    HRESULT clearErrorQueue ( );
    long GeterrorCount ( );
    IWMPErrorItemPtr GetItem (
        long dwIndex );
    HRESULT webHelp ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_clearErrorQueue ( ) = 0;
    virtual HRESULT __stdcall get_errorCount (
        long * plNumErrors ) = 0;
    virtual HRESULT __stdcall get_Item (
        long dwIndex,
        struct IWMPErrorItem * * ppErrorItem ) = 0;
    virtual HRESULT __stdcall raw_webHelp ( ) = 0;
};

struct __declspec(uuid("3614c646-3b3b-4de7-a81e-930e3f2127b3"))
IWMPErrorItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GeterrorCode))
    long errorCode;
    __declspec(property(get=GeterrorDescription))
    _bstr_t errorDescription;
    __declspec(property(get=GeterrorContext))
    _variant_t errorContext;
    __declspec(property(get=Getremedy))
    long remedy;
    __declspec(property(get=GetcustomUrl))
    _bstr_t customUrl;

    //
    // Wrapper methods for error-handling
    //

    long GeterrorCode ( );
    _bstr_t GeterrorDescription ( );
    _variant_t GeterrorContext ( );
    long Getremedy ( );
    _bstr_t GetcustomUrl ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_errorCode (
        long * phr ) = 0;
    virtual HRESULT __stdcall get_errorDescription (
        BSTR * pbstrDescription ) = 0;
    virtual HRESULT __stdcall get_errorContext (
        VARIANT * pvarContext ) = 0;
    virtual HRESULT __stdcall get_remedy (
        long * plRemedy ) = 0;
    virtual HRESULT __stdcall get_customUrl (
        BSTR * pbstrCustomUrl ) = 0;
};

struct __declspec(uuid("8da61686-4668-4a5c-ae5d-803193293dbe"))
IWMPDVD : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetisAvailable))
    VARIANT_BOOL isAvailable[];
    __declspec(property(get=Getdomain))
    _bstr_t domain;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetisAvailable (
        _bstr_t bstrItem );
    _bstr_t Getdomain ( );
    HRESULT topMenu ( );
    HRESULT titleMenu ( );
    HRESULT back ( );
    HRESULT resume ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_isAvailable (
        BSTR bstrItem,
        VARIANT_BOOL * pIsAvailable ) = 0;
    virtual HRESULT __stdcall get_domain (
        BSTR * strDomain ) = 0;
    virtual HRESULT __stdcall raw_topMenu ( ) = 0;
    virtual HRESULT __stdcall raw_titleMenu ( ) = 0;
    virtual HRESULT __stdcall raw_back ( ) = 0;
    virtual HRESULT __stdcall raw_resume ( ) = 0;
};

struct __declspec(uuid("40897764-ceab-47be-ad4a-8e28537f9bbf"))
IWMPPlayerApplication : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetplayerDocked))
    VARIANT_BOOL playerDocked;
    __declspec(property(get=GethasDisplay))
    VARIANT_BOOL hasDisplay;

    //
    // Wrapper methods for error-handling
    //

    HRESULT switchToPlayerApplication ( );
    HRESULT switchToControl ( );
    VARIANT_BOOL GetplayerDocked ( );
    VARIANT_BOOL GethasDisplay ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_switchToPlayerApplication ( ) = 0;
    virtual HRESULT __stdcall raw_switchToControl ( ) = 0;
    virtual HRESULT __stdcall get_playerDocked (
        VARIANT_BOOL * pbPlayerDocked ) = 0;
    virtual HRESULT __stdcall get_hasDisplay (
        VARIANT_BOOL * pbHasDisplay ) = 0;
};

struct __declspec(uuid("54062b68-052a-4c25-a39f-8b63346511d4"))
IWMPPlayer3 : IWMPCore2
{
    //
    // Property data
    //

    __declspec(property(get=Getenabled,put=Putenabled))
    VARIANT_BOOL enabled;
    __declspec(property(get=GetuiMode,put=PutuiMode))
    _bstr_t uiMode;
    __declspec(property(get=GetstretchToFit,put=PutstretchToFit))
    VARIANT_BOOL stretchToFit;
    __declspec(property(get=GetwindowlessVideo,put=PutwindowlessVideo))
    VARIANT_BOOL windowlessVideo;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Getenabled ( );
    void Putenabled (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetfullScreen ( );
    void PutfullScreen (
        VARIANT_BOOL pbFullScreen );
    VARIANT_BOOL GetenableContextMenu ( );
    void PutenableContextMenu (
        VARIANT_BOOL pbEnableContextMenu );
    void PutuiMode (
        _bstr_t pbstrMode );
    _bstr_t GetuiMode ( );
    VARIANT_BOOL GetstretchToFit ( );
    void PutstretchToFit (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetwindowlessVideo ( );
    void PutwindowlessVideo (
        VARIANT_BOOL pbEnabled );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_enabled (
        VARIANT_BOOL * pbEnabled ) = 0;
    virtual HRESULT __stdcall put_enabled (
        VARIANT_BOOL pbEnabled ) = 0;
    virtual HRESULT __stdcall get_fullScreen (
        VARIANT_BOOL * pbFullScreen ) = 0;
    virtual HRESULT __stdcall put_fullScreen (
        VARIANT_BOOL pbFullScreen ) = 0;
    virtual HRESULT __stdcall get_enableContextMenu (
        VARIANT_BOOL * pbEnableContextMenu ) = 0;
    virtual HRESULT __stdcall put_enableContextMenu (
        VARIANT_BOOL pbEnableContextMenu ) = 0;
    virtual HRESULT __stdcall put_uiMode (
        BSTR pbstrMode ) = 0;
    virtual HRESULT __stdcall get_uiMode (
        BSTR * pbstrMode ) = 0;
    virtual HRESULT __stdcall get_stretchToFit (
        VARIANT_BOOL * pbEnabled ) = 0;
    virtual HRESULT __stdcall put_stretchToFit (
        VARIANT_BOOL pbEnabled ) = 0;
    virtual HRESULT __stdcall get_windowlessVideo (
        VARIANT_BOOL * pbEnabled ) = 0;
    virtual HRESULT __stdcall put_windowlessVideo (
        VARIANT_BOOL pbEnabled ) = 0;
};

struct __declspec(uuid("0e6b01d1-d407-4c85-bf5f-1c01f6150280"))
IWMPPlayer2 : IWMPCore
{
    //
    // Property data
    //

    __declspec(property(get=Getenabled,put=Putenabled))
    VARIANT_BOOL enabled;
    __declspec(property(get=GetuiMode,put=PutuiMode))
    _bstr_t uiMode;
    __declspec(property(get=GetstretchToFit,put=PutstretchToFit))
    VARIANT_BOOL stretchToFit;
    __declspec(property(get=GetwindowlessVideo,put=PutwindowlessVideo))
    VARIANT_BOOL windowlessVideo;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Getenabled ( );
    void Putenabled (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetfullScreen ( );
    void PutfullScreen (
        VARIANT_BOOL pbFullScreen );
    VARIANT_BOOL GetenableContextMenu ( );
    void PutenableContextMenu (
        VARIANT_BOOL pbEnableContextMenu );
    void PutuiMode (
        _bstr_t pbstrMode );
    _bstr_t GetuiMode ( );
    VARIANT_BOOL GetstretchToFit ( );
    void PutstretchToFit (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetwindowlessVideo ( );
    void PutwindowlessVideo (
        VARIANT_BOOL pbEnabled );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_enabled (
        VARIANT_BOOL * pbEnabled ) = 0;
    virtual HRESULT __stdcall put_enabled (
        VARIANT_BOOL pbEnabled ) = 0;
    virtual HRESULT __stdcall get_fullScreen (
        VARIANT_BOOL * pbFullScreen ) = 0;
    virtual HRESULT __stdcall put_fullScreen (
        VARIANT_BOOL pbFullScreen ) = 0;
    virtual HRESULT __stdcall get_enableContextMenu (
        VARIANT_BOOL * pbEnableContextMenu ) = 0;
    virtual HRESULT __stdcall put_enableContextMenu (
        VARIANT_BOOL pbEnableContextMenu ) = 0;
    virtual HRESULT __stdcall put_uiMode (
        BSTR pbstrMode ) = 0;
    virtual HRESULT __stdcall get_uiMode (
        BSTR * pbstrMode ) = 0;
    virtual HRESULT __stdcall get_stretchToFit (
        VARIANT_BOOL * pbEnabled ) = 0;
    virtual HRESULT __stdcall put_stretchToFit (
        VARIANT_BOOL pbEnabled ) = 0;
    virtual HRESULT __stdcall get_windowlessVideo (
        VARIANT_BOOL * pbEnabled ) = 0;
    virtual HRESULT __stdcall put_windowlessVideo (
        VARIANT_BOOL pbEnabled ) = 0;
};

struct __declspec(uuid("6bf52a4f-394a-11d3-b153-00c04f79faa6"))
IWMPPlayer : IWMPCore
{
    //
    // Property data
    //

    __declspec(property(get=Getenabled,put=Putenabled))
    VARIANT_BOOL enabled;
    __declspec(property(get=GetuiMode,put=PutuiMode))
    _bstr_t uiMode;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Getenabled ( );
    void Putenabled (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetfullScreen ( );
    void PutfullScreen (
        VARIANT_BOOL pbFullScreen );
    VARIANT_BOOL GetenableContextMenu ( );
    void PutenableContextMenu (
        VARIANT_BOOL pbEnableContextMenu );
    void PutuiMode (
        _bstr_t pbstrMode );
    _bstr_t GetuiMode ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_enabled (
        VARIANT_BOOL * pbEnabled ) = 0;
    virtual HRESULT __stdcall put_enabled (
        VARIANT_BOOL pbEnabled ) = 0;
    virtual HRESULT __stdcall get_fullScreen (
        VARIANT_BOOL * pbFullScreen ) = 0;
    virtual HRESULT __stdcall put_fullScreen (
        VARIANT_BOOL pbFullScreen ) = 0;
    virtual HRESULT __stdcall get_enableContextMenu (
        VARIANT_BOOL * pbEnableContextMenu ) = 0;
    virtual HRESULT __stdcall put_enableContextMenu (
        VARIANT_BOOL pbEnableContextMenu ) = 0;
    virtual HRESULT __stdcall put_uiMode (
        BSTR pbstrMode ) = 0;
    virtual HRESULT __stdcall get_uiMode (
        BSTR * pbstrMode ) = 0;
};

struct __declspec(uuid("f75ccec0-c67c-475c-931e-8719870bee7d"))
IWMPErrorItem2 : IWMPErrorItem
{
    //
    // Property data
    //

    __declspec(property(get=Getcondition))
    long condition;

    //
    // Wrapper methods for error-handling
    //

    long Getcondition ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_condition (
        long * plCondition ) = 0;
};

struct __declspec(uuid("6f030d25-0890-480f-9775-1f7e40ab5b8e"))
IWMPControls2 : IWMPControls
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT step (
        long lStep );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_step (
        long lStep ) = 0;
};

struct __declspec(uuid("ab7c88bb-143e-4ea4-acc3-e4350b2106c3"))
IWMPMedia2 : IWMPMedia
{
    //
    // Property data
    //

    __declspec(property(get=GetError))
    IWMPErrorItemPtr Error;

    //
    // Wrapper methods for error-handling
    //

    IWMPErrorItemPtr GetError ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Error (
        struct IWMPErrorItem * * ppIWMPErrorItem ) = 0;
};

struct __declspec(uuid("f118efc7-f03a-4fb4-99c9-1c02a5c1065b"))
IWMPMedia3 : IWMPMedia2
{
    //
    // Wrapper methods for error-handling
    //

    long getAttributeCountByType (
        _bstr_t bstrType,
        _bstr_t bstrLanguage );
    _variant_t getItemInfoByType (
        _bstr_t bstrType,
        _bstr_t bstrLanguage,
        long lIndex );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_getAttributeCountByType (
        BSTR bstrType,
        BSTR bstrLanguage,
        long * plCount ) = 0;
    virtual HRESULT __stdcall raw_getItemInfoByType (
        BSTR bstrType,
        BSTR bstrLanguage,
        long lIndex,
        VARIANT * pvarValue ) = 0;
};

struct __declspec(uuid("5c29bbe0-f87d-4c45-aa28-a70f0230ffa9"))
IWMPMetadataPicture : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetmimeType))
    _bstr_t mimeType;
    __declspec(property(get=GetpictureType))
    _bstr_t pictureType;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetURL))
    _bstr_t URL;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetmimeType ( );
    _bstr_t GetpictureType ( );
    _bstr_t GetDescription ( );
    _bstr_t GetURL ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_mimeType (
        BSTR * pbstrMimeType ) = 0;
    virtual HRESULT __stdcall get_pictureType (
        BSTR * pbstrPictureType ) = 0;
    virtual HRESULT __stdcall get_Description (
        BSTR * pbstrDescription ) = 0;
    virtual HRESULT __stdcall get_URL (
        BSTR * pbstrURL ) = 0;
};

struct __declspec(uuid("769a72db-13d2-45e2-9c48-53ca9d5b7450"))
IWMPMetadataText : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=Gettext))
    _bstr_t text;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    _bstr_t Gettext ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Description (
        BSTR * pbstrDescription ) = 0;
    virtual HRESULT __stdcall get_text (
        BSTR * pbstrText ) = 0;
};

struct __declspec(uuid("fda937a4-eece-4da5-a0b6-39bf89ade2c2"))
IWMPSettings2 : IWMPSettings
{
    //
    // Property data
    //

    __declspec(property(get=GetdefaultAudioLanguage))
    long defaultAudioLanguage;
    __declspec(property(get=GetmediaAccessRights))
    _bstr_t mediaAccessRights;

    //
    // Wrapper methods for error-handling
    //

    long GetdefaultAudioLanguage ( );
    _bstr_t GetmediaAccessRights ( );
    VARIANT_BOOL requestMediaAccessRights (
        _bstr_t bstrDesiredAccess );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_defaultAudioLanguage (
        long * plLangID ) = 0;
    virtual HRESULT __stdcall get_mediaAccessRights (
        BSTR * pbstrRights ) = 0;
    virtual HRESULT __stdcall raw_requestMediaAccessRights (
        BSTR bstrDesiredAccess,
        VARIANT_BOOL * pvbAccepted ) = 0;
};

struct __declspec(uuid("a1d1110e-d545-476a-9a78-ac3e4cb1e6bd"))
IWMPControls3 : IWMPControls2
{
    //
    // Property data
    //

    __declspec(property(get=GetaudioLanguageCount))
    long audioLanguageCount;
    __declspec(property(get=GetcurrentAudioLanguage,put=PutcurrentAudioLanguage))
    long currentAudioLanguage;
    __declspec(property(get=GetcurrentAudioLanguageIndex,put=PutcurrentAudioLanguageIndex))
    long currentAudioLanguageIndex;
    __declspec(property(get=GetcurrentPositionTimecode,put=PutcurrentPositionTimecode))
    _bstr_t currentPositionTimecode;

    //
    // Wrapper methods for error-handling
    //

    long GetaudioLanguageCount ( );
    long getAudioLanguageID (
        long lIndex );
    _bstr_t getAudioLanguageDescription (
        long lIndex );
    long GetcurrentAudioLanguage ( );
    void PutcurrentAudioLanguage (
        long plLangID );
    long GetcurrentAudioLanguageIndex ( );
    void PutcurrentAudioLanguageIndex (
        long plIndex );
    _bstr_t getLanguageName (
        long lLangID );
    _bstr_t GetcurrentPositionTimecode ( );
    void PutcurrentPositionTimecode (
        _bstr_t bstrTimecode );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_audioLanguageCount (
        long * plCount ) = 0;
    virtual HRESULT __stdcall raw_getAudioLanguageID (
        long lIndex,
        long * plLangID ) = 0;
    virtual HRESULT __stdcall raw_getAudioLanguageDescription (
        long lIndex,
        BSTR * pbstrLangDesc ) = 0;
    virtual HRESULT __stdcall get_currentAudioLanguage (
        long * plLangID ) = 0;
    virtual HRESULT __stdcall put_currentAudioLanguage (
        long plLangID ) = 0;
    virtual HRESULT __stdcall get_currentAudioLanguageIndex (
        long * plIndex ) = 0;
    virtual HRESULT __stdcall put_currentAudioLanguageIndex (
        long plIndex ) = 0;
    virtual HRESULT __stdcall raw_getLanguageName (
        long lLangID,
        BSTR * pbstrLangName ) = 0;
    virtual HRESULT __stdcall get_currentPositionTimecode (
        BSTR * bstrTimecode ) = 0;
    virtual HRESULT __stdcall put_currentPositionTimecode (
        BSTR bstrTimecode ) = 0;
};

struct __declspec(uuid("350ba78b-6bc8-4113-a5f5-312056934eb6"))
IWMPClosedCaption2 : IWMPClosedCaption
{
    //
    // Property data
    //

    __declspec(property(get=GetSAMILangCount))
    long SAMILangCount;
    __declspec(property(get=GetSAMIStyleCount))
    long SAMIStyleCount;

    //
    // Wrapper methods for error-handling
    //

    long GetSAMILangCount ( );
    _bstr_t getSAMILangName (
        long nIndex );
    long getSAMILangID (
        long nIndex );
    long GetSAMIStyleCount ( );
    _bstr_t getSAMIStyleName (
        long nIndex );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_SAMILangCount (
        long * plCount ) = 0;
    virtual HRESULT __stdcall raw_getSAMILangName (
        long nIndex,
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall raw_getSAMILangID (
        long nIndex,
        long * plLangID ) = 0;
    virtual HRESULT __stdcall get_SAMIStyleCount (
        long * plCount ) = 0;
    virtual HRESULT __stdcall raw_getSAMIStyleName (
        long nIndex,
        BSTR * pbstrName ) = 0;
};

struct __declspec(uuid("5f9cfd92-8cad-11d3-9a7e-00c04f8efb70"))
IWMPPlaylistCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetitemErrorColor,put=PutitemErrorColor))
    _bstr_t itemErrorColor;
    __declspec(property(get=GetitemCount))
    long itemCount;
    __declspec(property(get=GetitemMedia))
    IWMPMediaPtr itemMedia[];
    __declspec(property(get=GetitemPlaylist))
    IWMPPlaylistPtr itemPlaylist[];
    __declspec(property(get=GetleftStatus,put=PutleftStatus))
    _bstr_t leftStatus;
    __declspec(property(get=GetrightStatus,put=PutrightStatus))
    _bstr_t rightStatus;
    __declspec(property(get=GeteditButtonVisible,put=PuteditButtonVisible))
    VARIANT_BOOL editButtonVisible;
    __declspec(property(get=GetdropDownImage,put=PutdropDownImage))
    _bstr_t dropDownImage;
    __declspec(property(get=GetdropDownBackgroundImage,put=PutdropDownBackgroundImage))
    _bstr_t dropDownBackgroundImage;
    __declspec(property(get=GethueShift,put=PuthueShift))
    float hueShift;
    __declspec(property(get=Getsaturation,put=Putsaturation))
    float saturation;
    __declspec(property(get=GetstatusColor,put=PutstatusColor))
    _bstr_t statusColor;
    __declspec(property(get=GettoolbarVisible,put=PuttoolbarVisible))
    VARIANT_BOOL toolbarVisible;
    __declspec(property(get=GetPlaylist,put=PutPlaylist))
    IWMPPlaylistPtr Playlist;
    __declspec(property(get=Getcolumns,put=Putcolumns))
    _bstr_t columns;
    __declspec(property(get=GetcolumnCount))
    long columnCount;
    __declspec(property(get=GetcolumnOrder,put=PutcolumnOrder))
    _bstr_t columnOrder;
    __declspec(property(get=GetcolumnsVisible,put=PutcolumnsVisible))
    VARIANT_BOOL columnsVisible;
    __declspec(property(get=GetitemSelectedColor,put=PutitemSelectedColor))
    _bstr_t itemSelectedColor;
    __declspec(property(get=GetdropDownVisible,put=PutdropDownVisible))
    VARIANT_BOOL dropDownVisible;
    __declspec(property(get=GetplaylistItemsVisible,put=PutplaylistItemsVisible))
    VARIANT_BOOL playlistItemsVisible;
    __declspec(property(get=GetcheckboxesVisible,put=PutcheckboxesVisible))
    VARIANT_BOOL checkboxesVisible;
    __declspec(property(get=GetitemSelectedFocusLostColor,put=PutitemSelectedFocusLostColor))
    _bstr_t itemSelectedFocusLostColor;
    __declspec(property(get=GetitemSelectedBackgroundColor,put=PutitemSelectedBackgroundColor))
    _bstr_t itemSelectedBackgroundColor;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetforegroundColor,put=PutforegroundColor))
    _bstr_t foregroundColor;
    __declspec(property(get=GetdisabledItemColor,put=PutdisabledItemColor))
    _bstr_t disabledItemColor;
    __declspec(property(get=GetitemPlayingColor,put=PutitemPlayingColor))
    _bstr_t itemPlayingColor;
    __declspec(property(get=GetitemPlayingBackgroundColor,put=PutitemPlayingBackgroundColor))
    _bstr_t itemPlayingBackgroundColor;
    __declspec(property(get=GetbackgroundImage,put=PutbackgroundImage))
    _bstr_t backgroundImage;
    __declspec(property(get=GetallowItemEditing,put=PutallowItemEditing))
    VARIANT_BOOL allowItemEditing;
    __declspec(property(get=GetallowColumnSorting,put=PutallowColumnSorting))
    VARIANT_BOOL allowColumnSorting;
    __declspec(property(get=GetdropDownList,put=PutdropDownList))
    _bstr_t dropDownList;
    __declspec(property(get=GetdropDownToolTip,put=PutdropDownToolTip))
    _bstr_t dropDownToolTip;
    __declspec(property(get=Getcopying))
    VARIANT_BOOL copying;
    __declspec(property(get=GetitemSelectedBackgroundFocusLostColor,put=PutitemSelectedBackgroundFocusLostColor))
    _bstr_t itemSelectedBackgroundFocusLostColor;
    __declspec(property(get=GetbackgroundSplitColor,put=PutbackgroundSplitColor))
    _bstr_t backgroundSplitColor;
    __declspec(property(get=GetstatusTextColor,put=PutstatusTextColor))
    _bstr_t statusTextColor;

    //
    // Wrapper methods for error-handling
    //

    IWMPPlaylistPtr GetPlaylist ( );
    void PutPlaylist (
        struct IWMPPlaylist * ppdispPlaylist );
    _bstr_t Getcolumns ( );
    void Putcolumns (
        _bstr_t pbstrColumns );
    long GetcolumnCount ( );
    _bstr_t GetcolumnOrder ( );
    void PutcolumnOrder (
        _bstr_t pbstrColumnOrder );
    VARIANT_BOOL GetcolumnsVisible ( );
    void PutcolumnsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetdropDownVisible ( );
    void PutdropDownVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetplaylistItemsVisible ( );
    void PutplaylistItemsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetcheckboxesVisible ( );
    void PutcheckboxesVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pbstrColor );
    _bstr_t GetforegroundColor ( );
    void PutforegroundColor (
        _bstr_t pbstrColor );
    _bstr_t GetdisabledItemColor ( );
    void PutdisabledItemColor (
        _bstr_t pbstrColor );
    _bstr_t GetitemPlayingColor ( );
    void PutitemPlayingColor (
        _bstr_t pbstrColor );
    _bstr_t GetitemPlayingBackgroundColor ( );
    void PutitemPlayingBackgroundColor (
        _bstr_t pbstrBackgroundColor );
    _bstr_t GetbackgroundImage ( );
    void PutbackgroundImage (
        _bstr_t pbstrImage );
    VARIANT_BOOL GetallowItemEditing ( );
    void PutallowItemEditing (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetallowColumnSorting ( );
    void PutallowColumnSorting (
        VARIANT_BOOL pVal );
    _bstr_t GetdropDownList ( );
    void PutdropDownList (
        _bstr_t pbstrList );
    _bstr_t GetdropDownToolTip ( );
    void PutdropDownToolTip (
        _bstr_t pbstrToolTip );
    VARIANT_BOOL Getcopying ( );
    HRESULT copy ( );
    HRESULT abortCopy ( );
    HRESULT deleteSelected ( );
    HRESULT deleteSelectedFromLibrary ( );
    HRESULT moveSelectedUp ( );
    HRESULT moveSelectedDown ( );
    HRESULT addSelectedToPlaylist (
        struct IWMPPlaylist * pdispPlaylist );
    long getNextSelectedItem (
        long nStartIndex );
    long getNextCheckedItem (
        long nStartIndex );
    HRESULT setSelectedState (
        long nIndex,
        VARIANT_BOOL vbSelected );
    HRESULT setCheckedState (
        long nIndex,
        VARIANT_BOOL vbChecked );
    HRESULT sortColumn (
        long nIndex );
    HRESULT setColumnResizeMode (
        long nIndex,
        _bstr_t newMode );
    HRESULT setColumnWidth (
        long nIndex,
        long nWidth );
    _bstr_t GetitemErrorColor ( );
    void PutitemErrorColor (
        _bstr_t pbstrColor );
    long GetitemCount ( );
    IWMPMediaPtr GetitemMedia (
        long nIndex );
    IWMPPlaylistPtr GetitemPlaylist (
        long nIndex );
    long getNextSelectedItem2 (
        long nStartIndex );
    long getNextCheckedItem2 (
        long nStartIndex );
    HRESULT setSelectedState2 (
        long nIndex,
        VARIANT_BOOL vbSelected );
    HRESULT setCheckedState2 (
        long nIndex,
        VARIANT_BOOL vbChecked );
    _bstr_t GetleftStatus ( );
    void PutleftStatus (
        _bstr_t pbstrStatus );
    _bstr_t GetrightStatus ( );
    void PutrightStatus (
        _bstr_t pbstrStatus );
    VARIANT_BOOL GeteditButtonVisible ( );
    void PuteditButtonVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetdropDownImage ( );
    void PutdropDownImage (
        _bstr_t pbstrImage );
    _bstr_t GetdropDownBackgroundImage ( );
    void PutdropDownBackgroundImage (
        _bstr_t pbstrImage );
    float GethueShift ( );
    void PuthueShift (
        float pVal );
    float Getsaturation ( );
    void Putsaturation (
        float pVal );
    _bstr_t GetstatusColor ( );
    void PutstatusColor (
        _bstr_t pbstrColor );
    VARIANT_BOOL GettoolbarVisible ( );
    void PuttoolbarVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetitemSelectedColor ( );
    void PutitemSelectedColor (
        _bstr_t pbstrColor );
    _bstr_t GetitemSelectedFocusLostColor ( );
    void PutitemSelectedFocusLostColor (
        _bstr_t pbstrFocusLostColor );
    _bstr_t GetitemSelectedBackgroundColor ( );
    void PutitemSelectedBackgroundColor (
        _bstr_t pbstrColor );
    _bstr_t GetitemSelectedBackgroundFocusLostColor ( );
    void PutitemSelectedBackgroundFocusLostColor (
        _bstr_t pbstrFocusLostColor );
    _bstr_t GetbackgroundSplitColor ( );
    void PutbackgroundSplitColor (
        _bstr_t pbstrColor );
    _bstr_t GetstatusTextColor ( );
    void PutstatusTextColor (
        _bstr_t pbstrColor );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Playlist (
        struct IWMPPlaylist * * ppdispPlaylist ) = 0;
    virtual HRESULT __stdcall put_Playlist (
        struct IWMPPlaylist * ppdispPlaylist ) = 0;
    virtual HRESULT __stdcall get_columns (
        BSTR * pbstrColumns ) = 0;
    virtual HRESULT __stdcall put_columns (
        BSTR pbstrColumns ) = 0;
    virtual HRESULT __stdcall get_columnCount (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_columnOrder (
        BSTR * pbstrColumnOrder ) = 0;
    virtual HRESULT __stdcall put_columnOrder (
        BSTR pbstrColumnOrder ) = 0;
    virtual HRESULT __stdcall get_columnsVisible (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_columnsVisible (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_dropDownVisible (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_dropDownVisible (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_playlistItemsVisible (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_playlistItemsVisible (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_checkboxesVisible (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_checkboxesVisible (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_backgroundColor (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall put_backgroundColor (
        BSTR pbstrColor ) = 0;
    virtual HRESULT __stdcall get_foregroundColor (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall put_foregroundColor (
        BSTR pbstrColor ) = 0;
    virtual HRESULT __stdcall get_disabledItemColor (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall put_disabledItemColor (
        BSTR pbstrColor ) = 0;
    virtual HRESULT __stdcall get_itemPlayingColor (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall put_itemPlayingColor (
        BSTR pbstrColor ) = 0;
    virtual HRESULT __stdcall get_itemPlayingBackgroundColor (
        BSTR * pbstrBackgroundColor ) = 0;
    virtual HRESULT __stdcall put_itemPlayingBackgroundColor (
        BSTR pbstrBackgroundColor ) = 0;
    virtual HRESULT __stdcall get_backgroundImage (
        BSTR * pbstrImage ) = 0;
    virtual HRESULT __stdcall put_backgroundImage (
        BSTR pbstrImage ) = 0;
    virtual HRESULT __stdcall get_allowItemEditing (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_allowItemEditing (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_allowColumnSorting (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_allowColumnSorting (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_dropDownList (
        BSTR * pbstrList ) = 0;
    virtual HRESULT __stdcall put_dropDownList (
        BSTR pbstrList ) = 0;
    virtual HRESULT __stdcall get_dropDownToolTip (
        BSTR * pbstrToolTip ) = 0;
    virtual HRESULT __stdcall put_dropDownToolTip (
        BSTR pbstrToolTip ) = 0;
    virtual HRESULT __stdcall get_copying (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall raw_copy ( ) = 0;
    virtual HRESULT __stdcall raw_abortCopy ( ) = 0;
    virtual HRESULT __stdcall raw_deleteSelected ( ) = 0;
    virtual HRESULT __stdcall raw_deleteSelectedFromLibrary ( ) = 0;
    virtual HRESULT __stdcall raw_moveSelectedUp ( ) = 0;
    virtual HRESULT __stdcall raw_moveSelectedDown ( ) = 0;
    virtual HRESULT __stdcall raw_addSelectedToPlaylist (
        struct IWMPPlaylist * pdispPlaylist ) = 0;
    virtual HRESULT __stdcall raw_getNextSelectedItem (
        long nStartIndex,
        long * pnSelected ) = 0;
    virtual HRESULT __stdcall raw_getNextCheckedItem (
        long nStartIndex,
        long * pnChecked ) = 0;
    virtual HRESULT __stdcall raw_setSelectedState (
        long nIndex,
        VARIANT_BOOL vbSelected ) = 0;
    virtual HRESULT __stdcall raw_setCheckedState (
        long nIndex,
        VARIANT_BOOL vbChecked ) = 0;
    virtual HRESULT __stdcall raw_sortColumn (
        long nIndex ) = 0;
    virtual HRESULT __stdcall raw_setColumnResizeMode (
        long nIndex,
        BSTR newMode ) = 0;
    virtual HRESULT __stdcall raw_setColumnWidth (
        long nIndex,
        long nWidth ) = 0;
    virtual HRESULT __stdcall get_itemErrorColor (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall put_itemErrorColor (
        BSTR pbstrColor ) = 0;
    virtual HRESULT __stdcall get_itemCount (
        long * pnItemCount ) = 0;
    virtual HRESULT __stdcall get_itemMedia (
        long nIndex,
        struct IWMPMedia * * ppMedia ) = 0;
    virtual HRESULT __stdcall get_itemPlaylist (
        long nIndex,
        struct IWMPPlaylist * * ppPlaylist ) = 0;
    virtual HRESULT __stdcall raw_getNextSelectedItem2 (
        long nStartIndex,
        long * pnSelected ) = 0;
    virtual HRESULT __stdcall raw_getNextCheckedItem2 (
        long nStartIndex,
        long * pnChecked ) = 0;
    virtual HRESULT __stdcall raw_setSelectedState2 (
        long nIndex,
        VARIANT_BOOL vbSelected ) = 0;
    virtual HRESULT __stdcall raw_setCheckedState2 (
        long nIndex,
        VARIANT_BOOL vbChecked ) = 0;
    virtual HRESULT __stdcall get_leftStatus (
        BSTR * pbstrStatus ) = 0;
    virtual HRESULT __stdcall put_leftStatus (
        BSTR pbstrStatus ) = 0;
    virtual HRESULT __stdcall get_rightStatus (
        BSTR * pbstrStatus ) = 0;
    virtual HRESULT __stdcall put_rightStatus (
        BSTR pbstrStatus ) = 0;
    virtual HRESULT __stdcall get_editButtonVisible (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_editButtonVisible (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_dropDownImage (
        BSTR * pbstrImage ) = 0;
    virtual HRESULT __stdcall put_dropDownImage (
        BSTR pbstrImage ) = 0;
    virtual HRESULT __stdcall get_dropDownBackgroundImage (
        BSTR * pbstrImage ) = 0;
    virtual HRESULT __stdcall put_dropDownBackgroundImage (
        BSTR pbstrImage ) = 0;
    virtual HRESULT __stdcall get_hueShift (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_hueShift (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_saturation (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_saturation (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_statusColor (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall put_statusColor (
        BSTR pbstrColor ) = 0;
    virtual HRESULT __stdcall get_toolbarVisible (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_toolbarVisible (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_itemSelectedColor (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall put_itemSelectedColor (
        BSTR pbstrColor ) = 0;
    virtual HRESULT __stdcall get_itemSelectedFocusLostColor (
        BSTR * pbstrFocusLostColor ) = 0;
    virtual HRESULT __stdcall put_itemSelectedFocusLostColor (
        BSTR pbstrFocusLostColor ) = 0;
    virtual HRESULT __stdcall get_itemSelectedBackgroundColor (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall put_itemSelectedBackgroundColor (
        BSTR pbstrColor ) = 0;
    virtual HRESULT __stdcall get_itemSelectedBackgroundFocusLostColor (
        BSTR * pbstrFocusLostColor ) = 0;
    virtual HRESULT __stdcall put_itemSelectedBackgroundFocusLostColor (
        BSTR pbstrFocusLostColor ) = 0;
    virtual HRESULT __stdcall get_backgroundSplitColor (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall put_backgroundSplitColor (
        BSTR pbstrColor ) = 0;
    virtual HRESULT __stdcall get_statusTextColor (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall put_statusTextColor (
        BSTR pbstrColor ) = 0;
};

struct __declspec(uuid("e41c88dd-2364-4ff7-a0f5-ca9859af783f"))
IAppDispatch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GettitlebarVisible,put=PuttitlebarVisible))
    VARIANT_BOOL titlebarVisible;
    __declspec(property(get=GettitlebarAutoHide,put=PuttitlebarAutoHide))
    VARIANT_BOOL titlebarAutoHide;
    __declspec(property(get=GetcurrentTask,put=PutcurrentTask))
    _bstr_t currentTask;
    __declspec(property(get=GetsettingsVisible,put=PutsettingsVisible))
    VARIANT_BOOL settingsVisible;
    __declspec(property(get=GetplaylistVisible,put=PutplaylistVisible))
    VARIANT_BOOL playlistVisible;
    __declspec(property(get=GettaskbarVisible,put=PuttaskbarVisible))
    VARIANT_BOOL taskbarVisible;
    __declspec(property(get=GettitlebarCurrentlyVisible))
    VARIANT_BOOL titlebarCurrentlyVisible;
    __declspec(property(get=GetbgPluginRunning))
    VARIANT_BOOL bgPluginRunning;
    __declspec(property(get=GetisXPOrBetter))
    VARIANT_BOOL isXPOrBetter;
    __declspec(property(get=Getmaximized))
    VARIANT_BOOL maximized;
    __declspec(property(get=GetpreviousEnabled))
    VARIANT_BOOL previousEnabled;
    __declspec(property(get=GetDPI))
    long DPI;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GettitlebarVisible ( );
    void PuttitlebarVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GettitlebarAutoHide ( );
    void PuttitlebarAutoHide (
        VARIANT_BOOL pVal );
    _bstr_t GetcurrentTask ( );
    void PutcurrentTask (
        _bstr_t pVal );
    VARIANT_BOOL GetsettingsVisible ( );
    void PutsettingsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetplaylistVisible ( );
    void PutplaylistVisible (
        VARIANT_BOOL pVal );
    HRESULT gotoSkinMode ( );
    HRESULT adjustLeft (
        long nDistance );
    VARIANT_BOOL GettaskbarVisible ( );
    void PuttaskbarVisible (
        VARIANT_BOOL pVal );
    long GetDPI ( );
    VARIANT_BOOL GetpreviousEnabled ( );
    HRESULT previous ( );
    VARIANT_BOOL GettitlebarCurrentlyVisible ( );
    VARIANT_BOOL GetbgPluginRunning ( );
    HRESULT configurePlugins (
        long nType );
    _bstr_t getTimeString (
        double dTime );
    VARIANT_BOOL GetisXPOrBetter ( );
    VARIANT_BOOL Getmaximized ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_titlebarVisible (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_titlebarVisible (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_titlebarAutoHide (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_titlebarAutoHide (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_currentTask (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_currentTask (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_settingsVisible (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_settingsVisible (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_playlistVisible (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_playlistVisible (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall raw_gotoSkinMode ( ) = 0;
    virtual HRESULT __stdcall raw_adjustLeft (
        long nDistance ) = 0;
    virtual HRESULT __stdcall get_taskbarVisible (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_taskbarVisible (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_DPI (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_previousEnabled (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall raw_previous ( ) = 0;
    virtual HRESULT __stdcall get_titlebarCurrentlyVisible (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall get_bgPluginRunning (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall raw_configurePlugins (
        long nType ) = 0;
    virtual HRESULT __stdcall raw_getTimeString (
        double dTime,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_isXPOrBetter (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall get_maximized (
        VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("ef870383-83ab-4ea9-be48-56fa4251af10"))
IWMPSafeBrowser : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetURL,put=PutURL))
    _bstr_t URL;
    __declspec(property(get=Getstatus))
    long status;
    __declspec(property(get=GetpendingDownloads))
    long pendingDownloads;
    __declspec(property(get=GetbaseURL))
    _bstr_t baseURL;
    __declspec(property(get=GetsecureLock))
    long secureLock;
    __declspec(property(get=Getbusy))
    VARIANT_BOOL busy;
    __declspec(property(get=GetfullURL))
    _bstr_t fullURL;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetURL ( );
    void PutURL (
        _bstr_t pVal );
    long Getstatus ( );
    long GetpendingDownloads ( );
    HRESULT showSAMIText (
        _bstr_t samiText );
    HRESULT showLyrics (
        _bstr_t lyrics );
    HRESULT loadSpecialPage (
        _bstr_t pageName );
    HRESULT goBack ( );
    HRESULT goForward ( );
    HRESULT stop ( );
    HRESULT refresh ( );
    _bstr_t GetbaseURL ( );
    _bstr_t GetfullURL ( );
    long GetsecureLock ( );
    VARIANT_BOOL Getbusy ( );
    HRESULT showCert ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_URL (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_URL (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_status (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_pendingDownloads (
        long * pVal ) = 0;
    virtual HRESULT __stdcall raw_showSAMIText (
        BSTR samiText ) = 0;
    virtual HRESULT __stdcall raw_showLyrics (
        BSTR lyrics ) = 0;
    virtual HRESULT __stdcall raw_loadSpecialPage (
        BSTR pageName ) = 0;
    virtual HRESULT __stdcall raw_goBack ( ) = 0;
    virtual HRESULT __stdcall raw_goForward ( ) = 0;
    virtual HRESULT __stdcall raw_stop ( ) = 0;
    virtual HRESULT __stdcall raw_refresh ( ) = 0;
    virtual HRESULT __stdcall get_baseURL (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_fullURL (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_secureLock (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_busy (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall raw_showCert ( ) = 0;
};

struct __declspec(uuid("8b5050ff-e0a4-4808-b3a8-893a9e1ed894"))
IWMPSyncServices : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetdeviceCount))
    long deviceCount;

    //
    // Wrapper methods for error-handling
    //

    long GetdeviceCount ( );
    IWMPSyncDevicePtr getDevice (
        long lIndex );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_deviceCount (
        long * plCount ) = 0;
    virtual HRESULT __stdcall raw_getDevice (
        long lIndex,
        struct IWMPSyncDevice * * ppDevice ) = 0;
};

struct __declspec(uuid("21d077c1-4baa-11d3-bd45-00c04f6ea5ae"))
IWMPObjectExtendedProps : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetalphaBlend,put=PutalphaBlend))
    long alphaBlend;
    __declspec(property(get=GetaccName,put=PutaccName))
    _bstr_t accName;
    __declspec(property(get=GetaccDescription,put=PutaccDescription))
    _bstr_t accDescription;
    __declspec(property(get=GetaccKeyboardShortcut,put=PutaccKeyboardShortcut))
    _bstr_t accKeyboardShortcut;
    __declspec(property(get=Getid))
    _bstr_t id;
    __declspec(property(get=GetelementType))
    _bstr_t elementType;
    __declspec(property(get=Getleft,put=Putleft))
    long left;
    __declspec(property(get=Gettop,put=Puttop))
    long top;
    __declspec(property(get=Getwidth,put=Putwidth))
    long width;
    __declspec(property(get=Getheight,put=Putheight))
    long height;
    __declspec(property(get=GetzIndex,put=PutzIndex))
    long zIndex;
    __declspec(property(get=GetclippingImage,put=PutclippingImage))
    _bstr_t clippingImage;
    __declspec(property(get=GetclippingColor,put=PutclippingColor))
    _bstr_t clippingColor;
    __declspec(property(get=Getvisible,put=Putvisible))
    VARIANT_BOOL visible;
    __declspec(property(get=Getenabled,put=Putenabled))
    VARIANT_BOOL enabled;
    __declspec(property(get=GettabStop,put=PuttabStop))
    VARIANT_BOOL tabStop;
    __declspec(property(get=GetpassThrough,put=PutpassThrough))
    VARIANT_BOOL passThrough;
    __declspec(property(get=GethorizontalAlignment,put=PuthorizontalAlignment))
    _bstr_t horizontalAlignment;
    __declspec(property(get=GetverticalAlignment,put=PutverticalAlignment))
    _bstr_t verticalAlignment;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getid ( );
    _bstr_t GetelementType ( );
    long Getleft ( );
    void Putleft (
        long pVal );
    long Gettop ( );
    void Puttop (
        long pVal );
    long Getwidth ( );
    void Putwidth (
        long pVal );
    long Getheight ( );
    void Putheight (
        long pVal );
    long GetzIndex ( );
    void PutzIndex (
        long pVal );
    _bstr_t GetclippingImage ( );
    void PutclippingImage (
        _bstr_t pVal );
    _bstr_t GetclippingColor ( );
    void PutclippingColor (
        _bstr_t pVal );
    VARIANT_BOOL Getvisible ( );
    void Putvisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Getenabled ( );
    void Putenabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GettabStop ( );
    void PuttabStop (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetpassThrough ( );
    void PutpassThrough (
        VARIANT_BOOL pVal );
    _bstr_t GethorizontalAlignment ( );
    void PuthorizontalAlignment (
        _bstr_t pVal );
    _bstr_t GetverticalAlignment ( );
    void PutverticalAlignment (
        _bstr_t pVal );
    HRESULT moveTo (
        long newX,
        long newY,
        long moveTime );
    long GetalphaBlend ( );
    void PutalphaBlend (
        long pVal );
    HRESULT alphaBlendTo (
        long newVal,
        long alphaTime );
    _bstr_t GetaccName ( );
    void PutaccName (
        _bstr_t pszName );
    _bstr_t GetaccDescription ( );
    void PutaccDescription (
        _bstr_t pszDesc );
    _bstr_t GetaccKeyboardShortcut ( );
    void PutaccKeyboardShortcut (
        _bstr_t pszShortcut );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_id (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_elementType (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_left (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_left (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_top (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_top (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_width (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_width (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_height (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_height (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_zIndex (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_zIndex (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_clippingImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_clippingImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_clippingColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_clippingColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_visible (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_visible (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_enabled (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_enabled (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_tabStop (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_tabStop (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_passThrough (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_passThrough (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_horizontalAlignment (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_horizontalAlignment (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_verticalAlignment (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_verticalAlignment (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall raw_moveTo (
        long newX,
        long newY,
        long moveTime ) = 0;
    virtual HRESULT __stdcall get_alphaBlend (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_alphaBlend (
        long pVal ) = 0;
    virtual HRESULT __stdcall raw_alphaBlendTo (
        long newVal,
        long alphaTime ) = 0;
    virtual HRESULT __stdcall get_accName (
        BSTR * pszName ) = 0;
    virtual HRESULT __stdcall put_accName (
        BSTR pszName ) = 0;
    virtual HRESULT __stdcall get_accDescription (
        BSTR * pszDesc ) = 0;
    virtual HRESULT __stdcall put_accDescription (
        BSTR pszDesc ) = 0;
    virtual HRESULT __stdcall get_accKeyboardShortcut (
        BSTR * pszShortcut ) = 0;
    virtual HRESULT __stdcall put_accKeyboardShortcut (
        BSTR pszShortcut ) = 0;
};

struct __declspec(uuid("72f486b1-0d43-11d3-bd3f-00c04f6ea5ae"))
IWMPLayoutSubView : IWMPObjectExtendedProps
{
    //
    // Property data
    //

    __declspec(property(get=GetbackgroundImageHueShift,put=PutbackgroundImageHueShift))
    float backgroundImageHueShift;
    __declspec(property(get=GetbackgroundImageSaturation,put=PutbackgroundImageSaturation))
    float backgroundImageSaturation;
    __declspec(property(get=GetresizeBackgroundImage,put=PutresizeBackgroundImage))
    VARIANT_BOOL resizeBackgroundImage;
    __declspec(property(get=GettransparencyColor,put=PuttransparencyColor))
    _bstr_t transparencyColor;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetbackgroundImage,put=PutbackgroundImage))
    _bstr_t backgroundImage;
    __declspec(property(get=GetbackgroundTiled,put=PutbackgroundTiled))
    VARIANT_BOOL backgroundTiled;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GettransparencyColor ( );
    void PuttransparencyColor (
        _bstr_t pVal );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    _bstr_t GetbackgroundImage ( );
    void PutbackgroundImage (
        _bstr_t pVal );
    VARIANT_BOOL GetbackgroundTiled ( );
    void PutbackgroundTiled (
        VARIANT_BOOL pVal );
    float GetbackgroundImageHueShift ( );
    void PutbackgroundImageHueShift (
        float pVal );
    float GetbackgroundImageSaturation ( );
    void PutbackgroundImageSaturation (
        float pVal );
    VARIANT_BOOL GetresizeBackgroundImage ( );
    void PutresizeBackgroundImage (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_transparencyColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_transparencyColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_backgroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_backgroundImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_backgroundTiled (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundTiled (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_backgroundImageHueShift (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundImageHueShift (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_backgroundImageSaturation (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundImageSaturation (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_resizeBackgroundImage (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_resizeBackgroundImage (
        VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("172e905d-80d9-4c2f-b7ce-2ccb771787a2"))
IWMPLayoutView : IWMPLayoutSubView
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getcategory,put=Putcategory))
    _bstr_t category;
    __declspec(property(get=GetfocusObjectID,put=PutfocusObjectID))
    _bstr_t focusObjectID;
    __declspec(property(get=GettitleBar))
    VARIANT_BOOL titleBar;
    __declspec(property(get=Getresizable))
    VARIANT_BOOL resizable;
    __declspec(property(get=GettimerInterval,put=PuttimerInterval))
    long timerInterval;
    __declspec(property(get=GetminWidth,put=PutminWidth))
    long minWidth;
    __declspec(property(get=GetmaxWidth,put=PutmaxWidth))
    long maxWidth;
    __declspec(property(get=GetminHeight,put=PutminHeight))
    long minHeight;
    __declspec(property(get=GetmaxHeight,put=PutmaxHeight))
    long maxHeight;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Gettitle ( );
    void Puttitle (
        _bstr_t pVal );
    _bstr_t Getcategory ( );
    void Putcategory (
        _bstr_t pVal );
    _bstr_t GetfocusObjectID ( );
    void PutfocusObjectID (
        _bstr_t pVal );
    VARIANT_BOOL GettitleBar ( );
    VARIANT_BOOL Getresizable ( );
    long GettimerInterval ( );
    void PuttimerInterval (
        long pVal );
    long GetminWidth ( );
    void PutminWidth (
        long pVal );
    long GetmaxWidth ( );
    void PutmaxWidth (
        long pVal );
    long GetminHeight ( );
    void PutminHeight (
        long pVal );
    long GetmaxHeight ( );
    void PutmaxHeight (
        long pVal );
    HRESULT close ( );
    HRESULT minimize ( );
    HRESULT maximize ( );
    HRESULT restore ( );
    HRESULT size (
        _bstr_t bstrDirection );
    HRESULT returnToMediaCenter ( );
    HRESULT updateWindow ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_title (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_title (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_category (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_category (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_focusObjectID (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_focusObjectID (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_titleBar (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall get_resizable (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall get_timerInterval (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_timerInterval (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_minWidth (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_minWidth (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_maxWidth (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_maxWidth (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_minHeight (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_minHeight (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_maxHeight (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_maxHeight (
        long pVal ) = 0;
    virtual HRESULT __stdcall raw_close ( ) = 0;
    virtual HRESULT __stdcall raw_minimize ( ) = 0;
    virtual HRESULT __stdcall raw_maximize ( ) = 0;
    virtual HRESULT __stdcall raw_restore ( ) = 0;
    virtual HRESULT __stdcall raw_size (
        BSTR bstrDirection ) = 0;
    virtual HRESULT __stdcall raw_returnToMediaCenter ( ) = 0;
    virtual HRESULT __stdcall raw_updateWindow ( ) = 0;
};

struct __declspec(uuid("5af0bec1-46aa-11d3-bd45-00c04f6ea5ae"))
IWMPEventObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx))
    long x;
    __declspec(property(get=Gety))
    long y;
    __declspec(property(get=GetclientX))
    long clientX;
    __declspec(property(get=GetclientY))
    long clientY;
    __declspec(property(get=GetoffsetX))
    long offsetX;
    __declspec(property(get=GetoffsetY))
    long offsetY;
    __declspec(property(get=GetscreenX))
    long screenX;
    __declspec(property(get=GetscreenY))
    long screenY;
    __declspec(property(get=GetscreenWidth))
    long screenWidth;
    __declspec(property(get=GetscreenHeight))
    long screenHeight;
    __declspec(property(get=GetsrcElement))
    IDispatchPtr srcElement;
    __declspec(property(get=GetaltKey))
    VARIANT_BOOL altKey;
    __declspec(property(get=GetctrlKey))
    VARIANT_BOOL ctrlKey;
    __declspec(property(get=GetshiftKey))
    VARIANT_BOOL shiftKey;
    __declspec(property(get=GetfromElement))
    IDispatchPtr fromElement;
    __declspec(property(get=GettoElement))
    IDispatchPtr toElement;
    __declspec(property(get=GetkeyCode,put=PutkeyCode))
    long keyCode;
    __declspec(property(get=Getbutton))
    long button;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetsrcElement ( );
    VARIANT_BOOL GetaltKey ( );
    VARIANT_BOOL GetctrlKey ( );
    VARIANT_BOOL GetshiftKey ( );
    IDispatchPtr GetfromElement ( );
    IDispatchPtr GettoElement ( );
    void PutkeyCode (
        long p );
    long GetkeyCode ( );
    long Getbutton ( );
    long Getx ( );
    long Gety ( );
    long GetclientX ( );
    long GetclientY ( );
    long GetoffsetX ( );
    long GetoffsetY ( );
    long GetscreenX ( );
    long GetscreenY ( );
    long GetscreenWidth ( );
    long GetscreenHeight ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_srcElement (
        IDispatch * * p ) = 0;
    virtual HRESULT __stdcall get_altKey (
        VARIANT_BOOL * p ) = 0;
    virtual HRESULT __stdcall get_ctrlKey (
        VARIANT_BOOL * p ) = 0;
    virtual HRESULT __stdcall get_shiftKey (
        VARIANT_BOOL * p ) = 0;
    virtual HRESULT __stdcall get_fromElement (
        IDispatch * * p ) = 0;
    virtual HRESULT __stdcall get_toElement (
        IDispatch * * p ) = 0;
    virtual HRESULT __stdcall put_keyCode (
        long p ) = 0;
    virtual HRESULT __stdcall get_keyCode (
        long * p ) = 0;
    virtual HRESULT __stdcall get_button (
        long * p ) = 0;
    virtual HRESULT __stdcall get_x (
        long * p ) = 0;
    virtual HRESULT __stdcall get_y (
        long * p ) = 0;
    virtual HRESULT __stdcall get_clientX (
        long * p ) = 0;
    virtual HRESULT __stdcall get_clientY (
        long * p ) = 0;
    virtual HRESULT __stdcall get_offsetX (
        long * p ) = 0;
    virtual HRESULT __stdcall get_offsetY (
        long * p ) = 0;
    virtual HRESULT __stdcall get_screenX (
        long * p ) = 0;
    virtual HRESULT __stdcall get_screenY (
        long * p ) = 0;
    virtual HRESULT __stdcall get_screenWidth (
        long * p ) = 0;
    virtual HRESULT __stdcall get_screenHeight (
        long * p ) = 0;
};

struct __declspec(uuid("6fcae13d-e492-4584-9c21-d2c052a2a33a"))
IWMPTheme : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle))
    _bstr_t title;
    __declspec(property(get=Getversion))
    float version;
    __declspec(property(get=GetauthorVersion))
    _bstr_t authorVersion;
    __declspec(property(get=Getauthor))
    _bstr_t author;
    __declspec(property(get=Getcopyright))
    _bstr_t copyright;
    __declspec(property(get=GetcurrentViewID,put=PutcurrentViewID))
    _bstr_t currentViewID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Gettitle ( );
    float Getversion ( );
    _bstr_t GetauthorVersion ( );
    _bstr_t Getauthor ( );
    _bstr_t Getcopyright ( );
    _bstr_t GetcurrentViewID ( );
    void PutcurrentViewID (
        _bstr_t pVal );
    HRESULT showErrorDialog ( );
    HRESULT logString (
        _bstr_t stringVal );
    HRESULT openView (
        _bstr_t viewID );
    HRESULT openViewRelative (
        _bstr_t viewID,
        long x,
        long y );
    HRESULT closeView (
        _bstr_t viewID );
    _bstr_t openDialog (
        _bstr_t dialogType,
        _bstr_t parameters );
    _bstr_t loadString (
        _bstr_t bstrString );
    _bstr_t loadPreference (
        _bstr_t bstrName );
    HRESULT savePreference (
        _bstr_t bstrName,
        _bstr_t bstrValue );
    HRESULT playSound (
        _bstr_t bstrFilename );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_title (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_version (
        float * pfVersion ) = 0;
    virtual HRESULT __stdcall get_authorVersion (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_author (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_copyright (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_currentViewID (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_currentViewID (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall raw_showErrorDialog ( ) = 0;
    virtual HRESULT __stdcall raw_logString (
        BSTR stringVal ) = 0;
    virtual HRESULT __stdcall raw_openView (
        BSTR viewID ) = 0;
    virtual HRESULT __stdcall raw_openViewRelative (
        BSTR viewID,
        long x,
        long y ) = 0;
    virtual HRESULT __stdcall raw_closeView (
        BSTR viewID ) = 0;
    virtual HRESULT __stdcall raw_openDialog (
        BSTR dialogType,
        BSTR parameters,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall raw_loadString (
        BSTR bstrString,
        BSTR * pbstrReturn ) = 0;
    virtual HRESULT __stdcall raw_loadPreference (
        BSTR bstrName,
        BSTR * pbstrValue ) = 0;
    virtual HRESULT __stdcall raw_savePreference (
        BSTR bstrName,
        BSTR bstrValue ) = 0;
    virtual HRESULT __stdcall raw_playSound (
        BSTR bstrFilename ) = 0;
};

struct __declspec(uuid("b2c2d18e-97af-4b6a-a56b-2ffff470fb81"))
IWMPLayoutSettingsDispatch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetcontrastMode))
    _bstr_t contrastMode;
    __declspec(property(get=GetdisplayView,put=PutdisplayView))
    _bstr_t displayView;
    __declspec(property(get=GetmetadataView,put=PutmetadataView))
    _bstr_t metadataView;
    __declspec(property(get=GetshowSettings,put=PutshowSettings))
    VARIANT_BOOL showSettings;
    __declspec(property(get=GetshowResizeBars,put=PutshowResizeBars))
    VARIANT_BOOL showResizeBars;
    __declspec(property(get=GetshowPlaylist,put=PutshowPlaylist))
    VARIANT_BOOL showPlaylist;
    __declspec(property(get=GetshowMetadata,put=PutshowMetadata))
    VARIANT_BOOL showMetadata;
    __declspec(property(get=GetsettingsWidth,put=PutsettingsWidth))
    long settingsWidth;
    __declspec(property(get=GetsettingsHeight,put=PutsettingsHeight))
    long settingsHeight;
    __declspec(property(get=GetplaylistWidth,put=PutplaylistWidth))
    long playlistWidth;
    __declspec(property(get=GetplaylistHeight,put=PutplaylistHeight))
    long playlistHeight;
    __declspec(property(get=GetmetadataWidth,put=PutmetadataWidth))
    long metadataWidth;
    __declspec(property(get=GetmetadataHeight,put=PutmetadataHeight))
    long metadataHeight;
    __declspec(property(get=GetfullScreenAvailable,put=PutfullScreenAvailable))
    VARIANT_BOOL fullScreenAvailable;
    __declspec(property(get=GetfullScreenRequest,put=PutfullScreenRequest))
    VARIANT_BOOL fullScreenRequest;
    __declspec(property(get=GetquickHide,put=PutquickHide))
    VARIANT_BOOL quickHide;
    __declspec(property(get=GetdisplayPreset,put=PutdisplayPreset))
    long displayPreset;
    __declspec(property(get=GetsettingsPreset,put=PutsettingsPreset))
    long settingsPreset;
    __declspec(property(get=GetmetadataPreset,put=PutmetadataPreset))
    long metadataPreset;
    __declspec(property(get=GetuserDisplayView))
    _bstr_t userDisplayView;
    __declspec(property(get=GetuserWMPDisplayView))
    _bstr_t userWMPDisplayView;
    __declspec(property(get=GetuserDisplayPreset))
    long userDisplayPreset;
    __declspec(property(get=GetuserWMPDisplayPreset))
    long userWMPDisplayPreset;
    __declspec(property(get=GetdynamicRangeControl,put=PutdynamicRangeControl))
    long dynamicRangeControl;
    __declspec(property(get=GetslowRate,put=PutslowRate))
    float slowRate;
    __declspec(property(get=GetfastRate,put=PutfastRate))
    float fastRate;
    __declspec(property(get=GetbuttonHueShift,put=PutbuttonHueShift))
    float buttonHueShift;
    __declspec(property(get=GetbuttonSaturation,put=PutbuttonSaturation))
    float buttonSaturation;
    __declspec(property(get=GetbackHueShift,put=PutbackHueShift))
    float backHueShift;
    __declspec(property(get=GetbackSaturation,put=PutbackSaturation))
    float backSaturation;
    __declspec(property(get=GetvizRequest,put=PutvizRequest))
    long vizRequest;
    __declspec(property(get=GetappColorLight))
    _bstr_t appColorLight;
    __declspec(property(get=GetappColorMedium))
    _bstr_t appColorMedium;
    __declspec(property(get=GetappColorDark))
    _bstr_t appColorDark;
    __declspec(property(get=GetitemPlayingColor))
    _bstr_t itemPlayingColor;
    __declspec(property(get=GetitemPlayingBackgroundColor))
    _bstr_t itemPlayingBackgroundColor;
    __declspec(property(get=GetitemErrorColor))
    _bstr_t itemErrorColor;
    __declspec(property(get=GetappColorLimited))
    VARIANT_BOOL appColorLimited;
    __declspec(property(get=GetappColorBlackBackground,put=PutappColorBlackBackground))
    VARIANT_BOOL appColorBlackBackground;
    __declspec(property(get=GetappColorVideoBorder,put=PutappColorVideoBorder))
    _bstr_t appColorVideoBorder;
    __declspec(property(get=GettoolbarButtonHighlight))
    _bstr_t toolbarButtonHighlight;
    __declspec(property(get=GettoolbarButtonShadow))
    _bstr_t toolbarButtonShadow;
    __declspec(property(get=GettoolbarButtonFace))
    _bstr_t toolbarButtonFace;
    __declspec(property(get=GetuserWMPSettingsView))
    _bstr_t userWMPSettingsView;
    __declspec(property(get=GetuserWMPSettingsPreset))
    long userWMPSettingsPreset;
    __declspec(property(get=GetuserWMPShowSettings))
    VARIANT_BOOL userWMPShowSettings;
    __declspec(property(get=GetuserWMPMetadataView))
    _bstr_t userWMPMetadataView;
    __declspec(property(get=GetuserWMPMetadataPreset))
    long userWMPMetadataPreset;
    __declspec(property(get=GetuserWMPShowMetadata))
    VARIANT_BOOL userWMPShowMetadata;
    __declspec(property(get=GetcaptionsHeight,put=PutcaptionsHeight))
    long captionsHeight;
    __declspec(property(get=GetsnapToVideo,put=PutsnapToVideo))
    VARIANT_BOOL snapToVideo;
    __declspec(property(get=GetpinFullScreenControls,put=PutpinFullScreenControls))
    VARIANT_BOOL pinFullScreenControls;
    __declspec(property(get=GetuserVideoStretchToFit,put=PutuserVideoStretchToFit))
    VARIANT_BOOL userVideoStretchToFit;
    __declspec(property(get=GetappColorAux1))
    _bstr_t appColorAux1;
    __declspec(property(get=GetappColorAux2))
    _bstr_t appColorAux2;
    __declspec(property(get=GetappColorAux3))
    _bstr_t appColorAux3;
    __declspec(property(get=GetappColorAux4))
    _bstr_t appColorAux4;
    __declspec(property(get=GetappColorAux5))
    _bstr_t appColorAux5;
    __declspec(property(get=GetappColorAux6))
    _bstr_t appColorAux6;
    __declspec(property(get=GetappColorAux7))
    _bstr_t appColorAux7;
    __declspec(property(get=GetappColorAux8))
    _bstr_t appColorAux8;
    __declspec(property(get=GetappColorAux9))
    _bstr_t appColorAux9;
    __declspec(property(get=GetappColorAux10))
    _bstr_t appColorAux10;
    __declspec(property(get=GetappColorAux11))
    _bstr_t appColorAux11;
    __declspec(property(get=GetappColorAux12))
    _bstr_t appColorAux12;
    __declspec(property(get=GetappColorAux13))
    _bstr_t appColorAux13;
    __declspec(property(get=GetappColorAux14))
    _bstr_t appColorAux14;
    __declspec(property(get=GetappColorAux15))
    _bstr_t appColorAux15;
    __declspec(property(get=Getstatus,put=Putstatus))
    _bstr_t status;
    __declspec(property(get=GeteffectType,put=PuteffectType))
    _bstr_t effectType;
    __declspec(property(get=GeteffectPreset,put=PuteffectPreset))
    long effectPreset;
    __declspec(property(get=GetsettingsView,put=PutsettingsView))
    _bstr_t settingsView;
    __declspec(property(get=GetvideoZoom,put=PutvideoZoom))
    long videoZoom;
    __declspec(property(get=GetvideoShrinkToFit,put=PutvideoShrinkToFit))
    VARIANT_BOOL videoShrinkToFit;
    __declspec(property(get=GetvideoStretchToFit,put=PutvideoStretchToFit))
    VARIANT_BOOL videoStretchToFit;
    __declspec(property(get=GetshowCaptions,put=PutshowCaptions))
    VARIANT_BOOL showCaptions;
    __declspec(property(get=GetshowTitles,put=PutshowTitles))
    VARIANT_BOOL showTitles;
    __declspec(property(get=GetshowEffects,put=PutshowEffects))
    VARIANT_BOOL showEffects;
    __declspec(property(get=GetshowFullScreenPlaylist,put=PutshowFullScreenPlaylist))
    VARIANT_BOOL showFullScreenPlaylist;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GeteffectType ( );
    void PuteffectType (
        _bstr_t pVal );
    long GeteffectPreset ( );
    void PuteffectPreset (
        long pVal );
    _bstr_t GetsettingsView ( );
    void PutsettingsView (
        _bstr_t pVal );
    long GetvideoZoom ( );
    void PutvideoZoom (
        long pVal );
    VARIANT_BOOL GetvideoShrinkToFit ( );
    void PutvideoShrinkToFit (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetvideoStretchToFit ( );
    void PutvideoStretchToFit (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetuserVideoStretchToFit ( );
    void PutuserVideoStretchToFit (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetshowCaptions ( );
    void PutshowCaptions (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetshowTitles ( );
    void PutshowTitles (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetshowEffects ( );
    void PutshowEffects (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetshowFullScreenPlaylist ( );
    void PutshowFullScreenPlaylist (
        VARIANT_BOOL pVal );
    _bstr_t GetcontrastMode ( );
    _bstr_t getNamedString (
        _bstr_t bstrName );
    _bstr_t getDurationStringFromSeconds (
        long lDurationVal );
    _bstr_t GetdisplayView ( );
    void PutdisplayView (
        _bstr_t pVal );
    _bstr_t GetmetadataView ( );
    void PutmetadataView (
        _bstr_t pVal );
    VARIANT_BOOL GetshowSettings ( );
    void PutshowSettings (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetshowResizeBars ( );
    void PutshowResizeBars (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetshowPlaylist ( );
    void PutshowPlaylist (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetshowMetadata ( );
    void PutshowMetadata (
        VARIANT_BOOL pVal );
    long GetsettingsWidth ( );
    void PutsettingsWidth (
        long pVal );
    long GetsettingsHeight ( );
    void PutsettingsHeight (
        long pVal );
    long GetplaylistWidth ( );
    void PutplaylistWidth (
        long pVal );
    long GetplaylistHeight ( );
    void PutplaylistHeight (
        long pVal );
    long GetmetadataWidth ( );
    void PutmetadataWidth (
        long pVal );
    long GetmetadataHeight ( );
    void PutmetadataHeight (
        long pVal );
    VARIANT_BOOL GetfullScreenAvailable ( );
    void PutfullScreenAvailable (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetfullScreenRequest ( );
    void PutfullScreenRequest (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetquickHide ( );
    void PutquickHide (
        VARIANT_BOOL pVal );
    long GetdisplayPreset ( );
    void PutdisplayPreset (
        long pVal );
    long GetsettingsPreset ( );
    void PutsettingsPreset (
        long pVal );
    long GetmetadataPreset ( );
    void PutmetadataPreset (
        long pVal );
    _bstr_t GetuserDisplayView ( );
    _bstr_t GetuserWMPDisplayView ( );
    long GetuserDisplayPreset ( );
    long GetuserWMPDisplayPreset ( );
    long GetdynamicRangeControl ( );
    void PutdynamicRangeControl (
        long pVal );
    float GetslowRate ( );
    void PutslowRate (
        float pVal );
    float GetfastRate ( );
    void PutfastRate (
        float pVal );
    float GetbuttonHueShift ( );
    void PutbuttonHueShift (
        float pVal );
    float GetbuttonSaturation ( );
    void PutbuttonSaturation (
        float pVal );
    float GetbackHueShift ( );
    void PutbackHueShift (
        float pVal );
    float GetbackSaturation ( );
    void PutbackSaturation (
        float pVal );
    long GetvizRequest ( );
    void PutvizRequest (
        long pVal );
    _bstr_t GetappColorLight ( );
    _bstr_t GetappColorMedium ( );
    _bstr_t GetappColorDark ( );
    _bstr_t GettoolbarButtonHighlight ( );
    _bstr_t GettoolbarButtonShadow ( );
    _bstr_t GettoolbarButtonFace ( );
    _bstr_t GetitemPlayingColor ( );
    _bstr_t GetitemPlayingBackgroundColor ( );
    _bstr_t GetitemErrorColor ( );
    VARIANT_BOOL GetappColorLimited ( );
    VARIANT_BOOL GetappColorBlackBackground ( );
    void PutappColorBlackBackground (
        VARIANT_BOOL pVal );
    _bstr_t GetappColorVideoBorder ( );
    void PutappColorVideoBorder (
        _bstr_t pVal );
    _bstr_t GetappColorAux1 ( );
    _bstr_t GetappColorAux2 ( );
    _bstr_t GetappColorAux3 ( );
    _bstr_t GetappColorAux4 ( );
    _bstr_t GetappColorAux5 ( );
    _bstr_t GetappColorAux6 ( );
    _bstr_t GetappColorAux7 ( );
    _bstr_t GetappColorAux8 ( );
    _bstr_t GetappColorAux9 ( );
    _bstr_t GetappColorAux10 ( );
    _bstr_t GetappColorAux11 ( );
    _bstr_t GetappColorAux12 ( );
    _bstr_t GetappColorAux13 ( );
    _bstr_t GetappColorAux14 ( );
    _bstr_t GetappColorAux15 ( );
    _bstr_t Getstatus ( );
    void Putstatus (
        _bstr_t pVal );
    _bstr_t GetuserWMPSettingsView ( );
    long GetuserWMPSettingsPreset ( );
    VARIANT_BOOL GetuserWMPShowSettings ( );
    _bstr_t GetuserWMPMetadataView ( );
    long GetuserWMPMetadataPreset ( );
    VARIANT_BOOL GetuserWMPShowMetadata ( );
    long GetcaptionsHeight ( );
    void PutcaptionsHeight (
        long pVal );
    VARIANT_BOOL GetsnapToVideo ( );
    void PutsnapToVideo (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetpinFullScreenControls ( );
    void PutpinFullScreenControls (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_effectType (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_effectType (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_effectPreset (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_effectPreset (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_settingsView (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_settingsView (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_videoZoom (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_videoZoom (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_videoShrinkToFit (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_videoShrinkToFit (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_videoStretchToFit (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_videoStretchToFit (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_userVideoStretchToFit (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_userVideoStretchToFit (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_showCaptions (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_showCaptions (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_showTitles (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_showTitles (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_showEffects (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_showEffects (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_showFullScreenPlaylist (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_showFullScreenPlaylist (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_contrastMode (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall raw_getNamedString (
        BSTR bstrName,
        BSTR * pbstrVal ) = 0;
    virtual HRESULT __stdcall raw_getDurationStringFromSeconds (
        long lDurationVal,
        BSTR * pbstrVal ) = 0;
    virtual HRESULT __stdcall get_displayView (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_displayView (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_metadataView (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_metadataView (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_showSettings (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_showSettings (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_showResizeBars (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_showResizeBars (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_showPlaylist (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_showPlaylist (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_showMetadata (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_showMetadata (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_settingsWidth (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_settingsWidth (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_settingsHeight (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_settingsHeight (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_playlistWidth (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_playlistWidth (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_playlistHeight (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_playlistHeight (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_metadataWidth (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_metadataWidth (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_metadataHeight (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_metadataHeight (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_fullScreenAvailable (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_fullScreenAvailable (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_fullScreenRequest (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_fullScreenRequest (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_quickHide (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_quickHide (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_displayPreset (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_displayPreset (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_settingsPreset (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_settingsPreset (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_metadataPreset (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_metadataPreset (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_userDisplayView (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_userWMPDisplayView (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_userDisplayPreset (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_userWMPDisplayPreset (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_dynamicRangeControl (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_dynamicRangeControl (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_slowRate (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_slowRate (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_fastRate (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_fastRate (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_buttonHueShift (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_buttonHueShift (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_buttonSaturation (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_buttonSaturation (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_backHueShift (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_backHueShift (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_backSaturation (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_backSaturation (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_vizRequest (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_vizRequest (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_appColorLight (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorMedium (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorDark (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_toolbarButtonHighlight (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_toolbarButtonShadow (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_toolbarButtonFace (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_itemPlayingColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_itemPlayingBackgroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_itemErrorColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorLimited (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorBlackBackground (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_appColorBlackBackground (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_appColorVideoBorder (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_appColorVideoBorder (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux1 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux2 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux3 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux4 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux5 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux6 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux7 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux8 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux9 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux10 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux11 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux12 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux13 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux14 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_appColorAux15 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_status (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_status (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_userWMPSettingsView (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_userWMPSettingsPreset (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_userWMPShowSettings (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall get_userWMPMetadataView (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_userWMPMetadataPreset (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_userWMPShowMetadata (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall get_captionsHeight (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_captionsHeight (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_snapToVideo (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_snapToVideo (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_pinFullScreenControls (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_pinFullScreenControls (
        VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("98bb02d4-ed74-43cc-ad6a-45888f2e0dcc"))
IWMPBrandDispatch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetfriendlyName))
    _bstr_t friendlyName;
    __declspec(property(get=GetguideButtonText))
    _bstr_t guideButtonText;
    __declspec(property(get=GetguideButtonTip))
    _bstr_t guideButtonTip;
    __declspec(property(get=GetguideMenuText))
    _bstr_t guideMenuText;
    __declspec(property(get=GetguideAccText))
    _bstr_t guideAccText;
    __declspec(property(get=Gettask1ButtonText))
    _bstr_t task1ButtonText;
    __declspec(property(get=Gettask1ButtonTip))
    _bstr_t task1ButtonTip;
    __declspec(property(get=Gettask1MenuText))
    _bstr_t task1MenuText;
    __declspec(property(get=Gettask1AccText))
    _bstr_t task1AccText;
    __declspec(property(get=Gettask2ButtonText))
    _bstr_t task2ButtonText;
    __declspec(property(get=Gettask2ButtonTip))
    _bstr_t task2ButtonTip;
    __declspec(property(get=Gettask2MenuText))
    _bstr_t task2MenuText;
    __declspec(property(get=Gettask2AccText))
    _bstr_t task2AccText;
    __declspec(property(get=Gettask3ButtonText))
    _bstr_t task3ButtonText;
    __declspec(property(get=Gettask3ButtonTip))
    _bstr_t task3ButtonTip;
    __declspec(property(get=Gettask3MenuText))
    _bstr_t task3MenuText;
    __declspec(property(get=Gettask3AccText))
    _bstr_t task3AccText;
    __declspec(property(get=GetguideUrl))
    _bstr_t guideUrl;
    __declspec(property(get=Gettask1Url))
    _bstr_t task1Url;
    __declspec(property(get=Gettask2Url))
    _bstr_t task2Url;
    __declspec(property(get=Gettask3Url))
    _bstr_t task3Url;
    __declspec(property(get=GetimageLargeUrl))
    _bstr_t imageLargeUrl;
    __declspec(property(get=GetimageSmallUrl))
    _bstr_t imageSmallUrl;
    __declspec(property(get=GetimageMenuUrl))
    _bstr_t imageMenuUrl;
    __declspec(property(get=GetinfoCenterUrl))
    _bstr_t infoCenterUrl;
    __declspec(property(get=GetalbumInfoUrl))
    _bstr_t albumInfoUrl;
    __declspec(property(get=GetbuyCDUrl))
    _bstr_t buyCDUrl;
    __declspec(property(get=GethtmlViewUrl))
    _bstr_t htmlViewUrl;
    __declspec(property(get=GetnavigateUrl))
    _bstr_t navigateUrl;
    __declspec(property(get=GetcookieUrl))
    _bstr_t cookieUrl;
    __declspec(property(get=GetdownloadStatusUrl))
    _bstr_t downloadStatusUrl;
    __declspec(property(get=GetcolorPlayer))
    _bstr_t colorPlayer;
    __declspec(property(get=GetcolorPlayerText))
    _bstr_t colorPlayerText;
    __declspec(property(get=GetnavigateDispid))
    long navigateDispid;
    __declspec(property(get=GetnavigateParams))
    _bstr_t navigateParams;
    __declspec(property(get=GetnavigatePane))
    _bstr_t navigatePane;
    __declspec(property(get=GetselectedPane,put=PutselectedPane))
    _bstr_t selectedPane;
    __declspec(property(put=PutselectedTask))
    long selectedTask;
    __declspec(property(get=GetfullServiceName))
    _bstr_t fullServiceName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetfullServiceName ( );
    _bstr_t GetfriendlyName ( );
    _bstr_t GetguideButtonText ( );
    _bstr_t GetguideButtonTip ( );
    _bstr_t GetguideMenuText ( );
    _bstr_t GetguideAccText ( );
    _bstr_t Gettask1ButtonText ( );
    _bstr_t Gettask1ButtonTip ( );
    _bstr_t Gettask1MenuText ( );
    _bstr_t Gettask1AccText ( );
    _bstr_t Gettask2ButtonText ( );
    _bstr_t Gettask2ButtonTip ( );
    _bstr_t Gettask2MenuText ( );
    _bstr_t Gettask2AccText ( );
    _bstr_t Gettask3ButtonText ( );
    _bstr_t Gettask3ButtonTip ( );
    _bstr_t Gettask3MenuText ( );
    _bstr_t Gettask3AccText ( );
    _bstr_t GetguideUrl ( );
    _bstr_t Gettask1Url ( );
    _bstr_t Gettask2Url ( );
    _bstr_t Gettask3Url ( );
    _bstr_t GetimageLargeUrl ( );
    _bstr_t GetimageSmallUrl ( );
    _bstr_t GetimageMenuUrl ( );
    _bstr_t GetinfoCenterUrl ( );
    _bstr_t GetalbumInfoUrl ( );
    _bstr_t GetbuyCDUrl ( );
    _bstr_t GethtmlViewUrl ( );
    _bstr_t GetnavigateUrl ( );
    _bstr_t GetcookieUrl ( );
    _bstr_t GetdownloadStatusUrl ( );
    _bstr_t GetcolorPlayer ( );
    _bstr_t GetcolorPlayerText ( );
    long GetnavigateDispid ( );
    _bstr_t GetnavigateParams ( );
    _bstr_t GetnavigatePane ( );
    _bstr_t GetselectedPane ( );
    void PutselectedPane (
        _bstr_t pVal );
    HRESULT setNavigateProps (
        _bstr_t bstrPane,
        long lDispid,
        _bstr_t bstrParams );
    _bstr_t getMediaParams (
        IUnknown * pObject,
        _bstr_t bstrURL );
    void PutselectedTask (
        long _arg1 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_fullServiceName (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_friendlyName (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_guideButtonText (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_guideButtonTip (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_guideMenuText (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_guideAccText (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task1ButtonText (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task1ButtonTip (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task1MenuText (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task1AccText (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task2ButtonText (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task2ButtonTip (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task2MenuText (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task2AccText (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task3ButtonText (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task3ButtonTip (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task3MenuText (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task3AccText (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_guideUrl (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task1Url (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task2Url (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_task3Url (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_imageLargeUrl (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_imageSmallUrl (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_imageMenuUrl (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_infoCenterUrl (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_albumInfoUrl (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_buyCDUrl (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_htmlViewUrl (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_navigateUrl (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_cookieUrl (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_downloadStatusUrl (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_colorPlayer (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_colorPlayerText (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_navigateDispid (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_navigateParams (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_navigatePane (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_selectedPane (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_selectedPane (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall raw_setNavigateProps (
        BSTR bstrPane,
        long lDispid,
        BSTR bstrParams ) = 0;
    virtual HRESULT __stdcall raw_getMediaParams (
        IUnknown * pObject,
        BSTR bstrURL,
        BSTR * pbstrResult ) = 0;
    virtual HRESULT __stdcall put_selectedTask (
        long _arg1 ) = 0;
};

struct __declspec(uuid("504f112e-77cc-4e3c-a073-5371b31d9b36"))
IWMPNowPlayingHelperDispatch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetcaptionsAvailable))
    VARIANT_BOOL captionsAvailable;
    __declspec(property(get=GetlinkAvailable))
    long linkAvailable;
    __declspec(property(get=GetlinkRequest,put=PutlinkRequest))
    long linkRequest;
    __declspec(property(get=GetlinkRequestParams,put=PutlinkRequestParams))
    _bstr_t linkRequestParams;
    __declspec(property(get=GetisXPOrBetter))
    VARIANT_BOOL isXPOrBetter;
    __declspec(property(get=GetcanSendLink))
    VARIANT_BOOL canSendLink;
    __declspec(property(get=GeteditObj,put=PuteditObj))
    IUnknownPtr editObj;
    __declspec(property(get=GetnotificationString))
    _bstr_t notificationString;
    __declspec(property(get=GethtmlViewSecureLock,put=PuthtmlViewSecureLock))
    long htmlViewSecureLock;
    __declspec(property(get=GethtmlViewBaseURL,put=PuthtmlViewBaseURL))
    _bstr_t htmlViewBaseURL;
    __declspec(property(get=GethtmlViewBusy,put=PuthtmlViewBusy))
    VARIANT_BOOL htmlViewBusy;
    __declspec(property(get=GethtmlViewShowCert,put=PuthtmlViewShowCert))
    VARIANT_BOOL htmlViewShowCert;
    __declspec(property(get=GetviewFriendlyName))
    _bstr_t viewFriendlyName[];
    __declspec(property(get=GetviewPresetCount))
    long viewPresetCount[];
    __declspec(property(get=GetviewPresetName))
    _bstr_t viewPresetName[][];
    __declspec(property(get=GeteffectFriendlyName))
    _bstr_t effectFriendlyName[];
    __declspec(property(get=GeteffectPresetName))
    _bstr_t effectPresetName[][];
    __declspec(property(get=GethtmlViewFullURL,put=PuthtmlViewFullURL))
    _bstr_t htmlViewFullURL;
    __declspec(property(get=GetpreviousEnabled,put=PutpreviousEnabled))
    VARIANT_BOOL previousEnabled;
    __declspec(property(get=GetdoPreviousNow,put=PutdoPreviousNow))
    VARIANT_BOOL doPreviousNow;
    __declspec(property(get=GetDPI))
    long DPI;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetviewFriendlyName (
        _bstr_t bstrView );
    long GetviewPresetCount (
        _bstr_t bstrView );
    _bstr_t GetviewPresetName (
        _bstr_t bstrView,
        long nPresetIndex );
    _bstr_t GeteffectFriendlyName (
        _bstr_t bstrEffect );
    _bstr_t GeteffectPresetName (
        _bstr_t bstrEffect,
        long nPresetIndex );
    _bstr_t resolveDisplayView (
        VARIANT_BOOL fSafe );
    VARIANT_BOOL isValidDisplayView (
        _bstr_t bstrView );
    _bstr_t getSkinFile ( );
    VARIANT_BOOL GetcaptionsAvailable ( );
    long GetlinkAvailable ( );
    long GetlinkRequest ( );
    void PutlinkRequest (
        long pVal );
    _bstr_t GetlinkRequestParams ( );
    void PutlinkRequestParams (
        _bstr_t pVal );
    VARIANT_BOOL GetisXPOrBetter ( );
    long getCurrentArtID (
        VARIANT_BOOL fLargeArt );
    _bstr_t getTimeString (
        double dTime );
    _bstr_t getCurrentScriptCommand (
        _bstr_t bstrType );
    HRESULT calcLayout (
        long lWidth,
        long lHeight,
        VARIANT_BOOL vbCaptions,
        VARIANT_BOOL vbBanner );
    long getLayoutSize (
        long nProp );
    IDispatchPtr getRootPlaylist (
        IDispatch * pPlaylist );
    _bstr_t getHTMLViewURL ( );
    VARIANT_BOOL GetcanSendLink ( );
    HRESULT sendLink (
        double dblStartTime,
        double dblEndTime );
    IUnknownPtr GeteditObj ( );
    void PuteditObj (
        IUnknown * ppVal );
    _bstr_t getStatusString (
        _bstr_t bstrCategory );
    _bstr_t GetnotificationString ( );
    _bstr_t GethtmlViewBaseURL ( );
    void PuthtmlViewBaseURL (
        _bstr_t pVal );
    _bstr_t GethtmlViewFullURL ( );
    void PuthtmlViewFullURL (
        _bstr_t pVal );
    long GethtmlViewSecureLock ( );
    void PuthtmlViewSecureLock (
        long pVal );
    VARIANT_BOOL GethtmlViewBusy ( );
    void PuthtmlViewBusy (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GethtmlViewShowCert ( );
    void PuthtmlViewShowCert (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetpreviousEnabled ( );
    void PutpreviousEnabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetdoPreviousNow ( );
    void PutdoPreviousNow (
        VARIANT_BOOL pVal );
    long GetDPI ( );
    HRESULT clearColors ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_viewFriendlyName (
        BSTR bstrView,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_viewPresetCount (
        BSTR bstrView,
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_viewPresetName (
        BSTR bstrView,
        long nPresetIndex,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_effectFriendlyName (
        BSTR bstrEffect,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_effectPresetName (
        BSTR bstrEffect,
        long nPresetIndex,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall raw_resolveDisplayView (
        VARIANT_BOOL fSafe,
        BSTR * pbstrVal ) = 0;
    virtual HRESULT __stdcall raw_isValidDisplayView (
        BSTR bstrView,
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall raw_getSkinFile (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_captionsAvailable (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall get_linkAvailable (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_linkRequest (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_linkRequest (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_linkRequestParams (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_linkRequestParams (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_isXPOrBetter (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall raw_getCurrentArtID (
        VARIANT_BOOL fLargeArt,
        long * pVal ) = 0;
    virtual HRESULT __stdcall raw_getTimeString (
        double dTime,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall raw_getCurrentScriptCommand (
        BSTR bstrType,
        BSTR * pbstrCommand ) = 0;
    virtual HRESULT __stdcall raw_calcLayout (
        long lWidth,
        long lHeight,
        VARIANT_BOOL vbCaptions,
        VARIANT_BOOL vbBanner ) = 0;
    virtual HRESULT __stdcall raw_getLayoutSize (
        long nProp,
        long * plValue ) = 0;
    virtual HRESULT __stdcall raw_getRootPlaylist (
        IDispatch * pPlaylist,
        IDispatch * * ppRootPlaylist ) = 0;
    virtual HRESULT __stdcall raw_getHTMLViewURL (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_canSendLink (
        VARIANT_BOOL * pCanSendLink ) = 0;
    virtual HRESULT __stdcall raw_sendLink (
        double dblStartTime,
        double dblEndTime ) = 0;
    virtual HRESULT __stdcall get_editObj (
        IUnknown * * ppVal ) = 0;
    virtual HRESULT __stdcall put_editObj (
        IUnknown * ppVal ) = 0;
    virtual HRESULT __stdcall raw_getStatusString (
        BSTR bstrCategory,
        BSTR * pbstrStatus ) = 0;
    virtual HRESULT __stdcall get_notificationString (
        BSTR * pbstrNotificationString ) = 0;
    virtual HRESULT __stdcall get_htmlViewBaseURL (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_htmlViewBaseURL (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_htmlViewFullURL (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_htmlViewFullURL (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_htmlViewSecureLock (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_htmlViewSecureLock (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_htmlViewBusy (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_htmlViewBusy (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_htmlViewShowCert (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_htmlViewShowCert (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_previousEnabled (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_previousEnabled (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_doPreviousNow (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_doPreviousNow (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_DPI (
        long * pVal ) = 0;
    virtual HRESULT __stdcall raw_clearColors ( ) = 0;
};

struct __declspec(uuid("bb17fff7-1692-4555-918a-6af7bfacedd2"))
IWMPButtonCtrlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT onclick ( );
};

struct __declspec(uuid("87291b51-0c8e-11d3-bb2a-00a0c93ca73a"))
WMPButtonCtrl;
    // [ default ] interface IWMPButtonCtrl
    // [ default, source ] dispinterface IWMPButtonCtrlEvents

struct __declspec(uuid("87291b50-0c8e-11d3-bb2a-00a0c93ca73a"))
IWMPButtonCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getimage,put=Putimage))
    _bstr_t image;
    __declspec(property(get=GethoverImage,put=PuthoverImage))
    _bstr_t hoverImage;
    __declspec(property(get=GetdownImage,put=PutdownImage))
    _bstr_t downImage;
    __declspec(property(get=GetdisabledImage,put=PutdisabledImage))
    _bstr_t disabledImage;
    __declspec(property(get=GethoverDownImage,put=PuthoverDownImage))
    _bstr_t hoverDownImage;
    __declspec(property(get=Gettiled,put=Puttiled))
    VARIANT_BOOL tiled;
    __declspec(property(get=GettransparencyColor,put=PuttransparencyColor))
    _bstr_t transparencyColor;
    __declspec(property(get=Getdown,put=Putdown))
    VARIANT_BOOL down;
    __declspec(property(get=Getsticky,put=Putsticky))
    VARIANT_BOOL sticky;
    __declspec(property(get=GetupToolTip,put=PutupToolTip))
    _bstr_t upToolTip;
    __declspec(property(get=GetdownToolTip,put=PutdownToolTip))
    _bstr_t downToolTip;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getimage ( );
    void Putimage (
        _bstr_t pVal );
    _bstr_t GethoverImage ( );
    void PuthoverImage (
        _bstr_t pVal );
    _bstr_t GetdownImage ( );
    void PutdownImage (
        _bstr_t pVal );
    _bstr_t GetdisabledImage ( );
    void PutdisabledImage (
        _bstr_t pVal );
    _bstr_t GethoverDownImage ( );
    void PuthoverDownImage (
        _bstr_t pVal );
    VARIANT_BOOL Gettiled ( );
    void Puttiled (
        VARIANT_BOOL pVal );
    _bstr_t GettransparencyColor ( );
    void PuttransparencyColor (
        _bstr_t pVal );
    VARIANT_BOOL Getdown ( );
    void Putdown (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Getsticky ( );
    void Putsticky (
        VARIANT_BOOL pVal );
    _bstr_t GetupToolTip ( );
    void PutupToolTip (
        _bstr_t pVal );
    _bstr_t GetdownToolTip ( );
    void PutdownToolTip (
        _bstr_t pVal );
    _bstr_t Getcursor ( );
    void Putcursor (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_image (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_image (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_hoverImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_hoverImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_downImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_downImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_disabledImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_disabledImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_hoverDownImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_hoverDownImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_tiled (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_tiled (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_transparencyColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_transparencyColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_down (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_down (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_sticky (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_sticky (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_upToolTip (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_upToolTip (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_downToolTip (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_downToolTip (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_cursor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_cursor (
        BSTR pVal ) = 0;
};

struct __declspec(uuid("fc1880cf-83b9-43a7-a066-c44ce8c82583"))
WMPListBoxCtrl;
    // [ default ] interface IWMPListBoxCtrl

struct __declspec(uuid("fc1880ce-83b9-43a7-a066-c44ce8c82583"))
IWMPListBoxCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutpopUp))
    VARIANT_BOOL popUp;
    __declspec(property(get=GetfocusItem,put=PutfocusItem))
    long focusItem;
    __declspec(property(get=Getborder,put=Putborder))
    VARIANT_BOOL border;
    __declspec(property(get=Getsorted,put=Putsorted))
    VARIANT_BOOL sorted;
    __declspec(property(get=Getmultiselect,put=Putmultiselect))
    VARIANT_BOOL multiselect;
    __declspec(property(get=GetreadOnly,put=PutreadOnly))
    VARIANT_BOOL readOnly;
    __declspec(property(get=GetforegroundColor,put=PutforegroundColor))
    _bstr_t foregroundColor;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetfontSize,put=PutfontSize))
    long fontSize;
    __declspec(property(get=GetfontStyle,put=PutfontStyle))
    _bstr_t fontStyle;
    __declspec(property(get=GetfontFace,put=PutfontFace))
    _bstr_t fontFace;
    __declspec(property(get=GetselectedItem,put=PutselectedItem))
    long selectedItem;
    __declspec(property(get=GetitemCount))
    long itemCount;
    __declspec(property(get=GetfirstVisibleItem,put=PutfirstVisibleItem))
    long firstVisibleItem;

    //
    // Wrapper methods for error-handling
    //

    long GetselectedItem ( );
    void PutselectedItem (
        long pnPos );
    VARIANT_BOOL Getsorted ( );
    void Putsorted (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Getmultiselect ( );
    void Putmultiselect (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetreadOnly ( );
    void PutreadOnly (
        VARIANT_BOOL pVal );
    _bstr_t GetforegroundColor ( );
    void PutforegroundColor (
        _bstr_t pVal );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    long GetfontSize ( );
    void PutfontSize (
        long pVal );
    _bstr_t GetfontStyle ( );
    void PutfontStyle (
        _bstr_t pVal );
    _bstr_t GetfontFace ( );
    void PutfontFace (
        _bstr_t pVal );
    long GetitemCount ( );
    long GetfirstVisibleItem ( );
    void PutfirstVisibleItem (
        long pVal );
    void PutpopUp (
        VARIANT_BOOL _arg1 );
    long GetfocusItem ( );
    void PutfocusItem (
        long pVal );
    VARIANT_BOOL Getborder ( );
    void Putborder (
        VARIANT_BOOL pVal );
    _bstr_t getItem (
        long nPos );
    HRESULT insertItem (
        long nPos,
        _bstr_t newVal );
    HRESULT appendItem (
        _bstr_t newVal );
    HRESULT replaceItem (
        long nPos,
        _bstr_t newVal );
    HRESULT deleteItem (
        long nPos );
    HRESULT deleteAll ( );
    long findItem (
        long nStartIndex,
        _bstr_t newVal );
    long getNextSelectedItem (
        long nStartIndex );
    HRESULT setSelectedState (
        long nPos,
        VARIANT_BOOL vbSelected );
    HRESULT show ( );
    HRESULT dismiss ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_selectedItem (
        long * pnPos ) = 0;
    virtual HRESULT __stdcall put_selectedItem (
        long pnPos ) = 0;
    virtual HRESULT __stdcall get_sorted (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_sorted (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_multiselect (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_multiselect (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_readOnly (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_readOnly (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_foregroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_foregroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_backgroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fontSize (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_fontSize (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_fontStyle (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_fontStyle (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fontFace (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_fontFace (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_itemCount (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_firstVisibleItem (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_firstVisibleItem (
        long pVal ) = 0;
    virtual HRESULT __stdcall put_popUp (
        VARIANT_BOOL _arg1 ) = 0;
    virtual HRESULT __stdcall get_focusItem (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_focusItem (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_border (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_border (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall raw_getItem (
        long nPos,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall raw_insertItem (
        long nPos,
        BSTR newVal ) = 0;
    virtual HRESULT __stdcall raw_appendItem (
        BSTR newVal ) = 0;
    virtual HRESULT __stdcall raw_replaceItem (
        long nPos,
        BSTR newVal ) = 0;
    virtual HRESULT __stdcall raw_deleteItem (
        long nPos ) = 0;
    virtual HRESULT __stdcall raw_deleteAll ( ) = 0;
    virtual HRESULT __stdcall raw_findItem (
        long nStartIndex,
        BSTR newVal,
        long * pnPos ) = 0;
    virtual HRESULT __stdcall raw_getNextSelectedItem (
        long nStartIndex,
        long * pnSelected ) = 0;
    virtual HRESULT __stdcall raw_setSelectedState (
        long nPos,
        VARIANT_BOOL vbSelected ) = 0;
    virtual HRESULT __stdcall raw_show ( ) = 0;
    virtual HRESULT __stdcall raw_dismiss ( ) = 0;
};

struct __declspec(uuid("d255dfb8-c22a-42cf-b8b7-f15d7bcf65d6"))
IWMPListBoxItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=Putvalue))
    _bstr_t value;

    //
    // Wrapper methods for error-handling
    //

    void Putvalue (
        _bstr_t _arg1 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_value (
        BSTR _arg1 ) = 0;
};

struct __declspec(uuid("63d9d30f-ae4c-4678-8ca8-5720f4fe4419"))
IWMPPlaylistCtrlColumn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetcolumnName,put=PutcolumnName))
    _bstr_t columnName;
    __declspec(property(get=GetcolumnID,put=PutcolumnID))
    _bstr_t columnID;
    __declspec(property(get=GetcolumnResizeMode,put=PutcolumnResizeMode))
    _bstr_t columnResizeMode;
    __declspec(property(get=GetcolumnWidth,put=PutcolumnWidth))
    long columnWidth;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetcolumnName ( );
    void PutcolumnName (
        _bstr_t pVal );
    _bstr_t GetcolumnID ( );
    void PutcolumnID (
        _bstr_t pVal );
    _bstr_t GetcolumnResizeMode ( );
    void PutcolumnResizeMode (
        _bstr_t pVal );
    long GetcolumnWidth ( );
    void PutcolumnWidth (
        long pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_columnName (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_columnName (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_columnID (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_columnID (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_columnResizeMode (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_columnResizeMode (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_columnWidth (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_columnWidth (
        long pVal ) = 0;
};

struct __declspec(uuid("cdac14d2-8be4-11d3-bb48-00a0c93ca73a"))
IWMPSliderCtrlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT ondragbegin ( );
    HRESULT ondragend ( );
    HRESULT onpositionchange ( );
};

struct __declspec(uuid("f2bf2c90-405f-11d3-bb39-00a0c93ca73a"))
WMPSliderCtrl;
    // [ default ] interface IWMPSliderCtrl
    // [ default, source ] dispinterface IWMPSliderCtrlEvents

struct __declspec(uuid("f2bf2c8f-405f-11d3-bb39-00a0c93ca73a"))
IWMPSliderCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetbackgroundHoverImage,put=PutbackgroundHoverImage))
    _bstr_t backgroundHoverImage;
    __declspec(property(get=GetdisabledImage,put=PutdisabledImage))
    _bstr_t disabledImage;
    __declspec(property(get=GetthumbImage,put=PutthumbImage))
    _bstr_t thumbImage;
    __declspec(property(get=GetthumbHoverImage,put=PutthumbHoverImage))
    _bstr_t thumbHoverImage;
    __declspec(property(get=GetthumbDownImage,put=PutthumbDownImage))
    _bstr_t thumbDownImage;
    __declspec(property(get=GetthumbDisabledImage,put=PutthumbDisabledImage))
    _bstr_t thumbDisabledImage;
    __declspec(property(get=Getmin,put=Putmin))
    float min;
    __declspec(property(get=Getmax,put=Putmax))
    float max;
    __declspec(property(get=Getvalue,put=Putvalue))
    float value;
    __declspec(property(get=GettoolTip,put=PuttoolTip))
    _bstr_t toolTip;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;
    __declspec(property(get=GetborderSize,put=PutborderSize))
    int borderSize;
    __declspec(property(get=GetforegroundHoverImage,put=PutforegroundHoverImage))
    _bstr_t foregroundHoverImage;
    __declspec(property(get=GetforegroundProgress,put=PutforegroundProgress))
    float foregroundProgress;
    __declspec(property(get=GetuseForegroundProgress,put=PutuseForegroundProgress))
    VARIANT_BOOL useForegroundProgress;
    __declspec(property(get=Getdirection,put=Putdirection))
    _bstr_t direction;
    __declspec(property(get=Getslide,put=Putslide))
    VARIANT_BOOL slide;
    __declspec(property(get=Gettiled,put=Puttiled))
    VARIANT_BOOL tiled;
    __declspec(property(get=GetforegroundColor,put=PutforegroundColor))
    _bstr_t foregroundColor;
    __declspec(property(get=GetforegroundEndColor,put=PutforegroundEndColor))
    _bstr_t foregroundEndColor;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetbackgroundEndColor,put=PutbackgroundEndColor))
    _bstr_t backgroundEndColor;
    __declspec(property(get=GetdisabledColor,put=PutdisabledColor))
    _bstr_t disabledColor;
    __declspec(property(get=GettransparencyColor,put=PuttransparencyColor))
    _bstr_t transparencyColor;
    __declspec(property(get=GetforegroundImage,put=PutforegroundImage))
    _bstr_t foregroundImage;
    __declspec(property(get=GetbackgroundImage,put=PutbackgroundImage))
    _bstr_t backgroundImage;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getdirection ( );
    void Putdirection (
        _bstr_t pVal );
    VARIANT_BOOL Getslide ( );
    void Putslide (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Gettiled ( );
    void Puttiled (
        VARIANT_BOOL pVal );
    _bstr_t GetforegroundColor ( );
    void PutforegroundColor (
        _bstr_t pVal );
    _bstr_t GetforegroundEndColor ( );
    void PutforegroundEndColor (
        _bstr_t pVal );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    _bstr_t GetbackgroundEndColor ( );
    void PutbackgroundEndColor (
        _bstr_t pVal );
    _bstr_t GetdisabledColor ( );
    void PutdisabledColor (
        _bstr_t pVal );
    _bstr_t GettransparencyColor ( );
    void PuttransparencyColor (
        _bstr_t pVal );
    _bstr_t GetforegroundImage ( );
    void PutforegroundImage (
        _bstr_t pVal );
    _bstr_t GetbackgroundImage ( );
    void PutbackgroundImage (
        _bstr_t pVal );
    _bstr_t GetbackgroundHoverImage ( );
    void PutbackgroundHoverImage (
        _bstr_t pVal );
    _bstr_t GetdisabledImage ( );
    void PutdisabledImage (
        _bstr_t pVal );
    _bstr_t GetthumbImage ( );
    void PutthumbImage (
        _bstr_t pVal );
    _bstr_t GetthumbHoverImage ( );
    void PutthumbHoverImage (
        _bstr_t pVal );
    _bstr_t GetthumbDownImage ( );
    void PutthumbDownImage (
        _bstr_t pVal );
    _bstr_t GetthumbDisabledImage ( );
    void PutthumbDisabledImage (
        _bstr_t pVal );
    float Getmin ( );
    void Putmin (
        float pVal );
    float Getmax ( );
    void Putmax (
        float pVal );
    float Getvalue ( );
    void Putvalue (
        float pVal );
    _bstr_t GettoolTip ( );
    void PuttoolTip (
        _bstr_t pVal );
    _bstr_t Getcursor ( );
    void Putcursor (
        _bstr_t pVal );
    int GetborderSize ( );
    void PutborderSize (
        int pVal );
    _bstr_t GetforegroundHoverImage ( );
    void PutforegroundHoverImage (
        _bstr_t pVal );
    float GetforegroundProgress ( );
    void PutforegroundProgress (
        float pVal );
    VARIANT_BOOL GetuseForegroundProgress ( );
    void PutuseForegroundProgress (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_direction (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_direction (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_slide (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_slide (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_tiled (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_tiled (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_foregroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_foregroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_foregroundEndColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_foregroundEndColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_backgroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_backgroundEndColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundEndColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_disabledColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_disabledColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_transparencyColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_transparencyColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_foregroundImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_foregroundImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_backgroundImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_backgroundHoverImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundHoverImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_disabledImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_disabledImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_thumbImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_thumbImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_thumbHoverImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_thumbHoverImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_thumbDownImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_thumbDownImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_thumbDisabledImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_thumbDisabledImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_min (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_min (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_max (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_max (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_value (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_value (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_toolTip (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_toolTip (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_cursor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_cursor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_borderSize (
        int * pVal ) = 0;
    virtual HRESULT __stdcall put_borderSize (
        int pVal ) = 0;
    virtual HRESULT __stdcall get_foregroundHoverImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_foregroundHoverImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_foregroundProgress (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_foregroundProgress (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_useForegroundProgress (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_useForegroundProgress (
        VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("a85c0477-714c-4a06-b9f6-7c8ca38b45dc"))
IWMPVideoCtrlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT onvideostart ( );
    HRESULT onvideoend ( );
};

struct __declspec(uuid("61cecf11-fc3a-11d2-a1cd-005004602752"))
WMPVideoCtrl;
    // [ default ] interface IWMPVideoCtrl
    // [ default, source ] dispinterface IWMPVideoCtrlEvents

struct __declspec(uuid("61cecf10-fc3a-11d2-a1cd-005004602752"))
IWMPVideoCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getwindowless,put=Putwindowless))
    VARIANT_BOOL windowless;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetshrinkToFit,put=PutshrinkToFit))
    VARIANT_BOOL shrinkToFit;
    __declspec(property(get=GetmaintainAspectRatio,put=PutmaintainAspectRatio))
    VARIANT_BOOL maintainAspectRatio;
    __declspec(property(get=GettoolTip,put=PuttoolTip))
    _bstr_t toolTip;
    __declspec(property(get=GetfullScreen,put=PutfullScreen))
    VARIANT_BOOL fullScreen;
    __declspec(property(get=GetstretchToFit,put=PutstretchToFit))
    VARIANT_BOOL stretchToFit;
    __declspec(property(get=Getzoom,put=Putzoom))
    long zoom;

    //
    // Wrapper methods for error-handling
    //

    void Putwindowless (
        VARIANT_BOOL pbClipped );
    VARIANT_BOOL Getwindowless ( );
    void Putcursor (
        _bstr_t pbstrCursor );
    _bstr_t Getcursor ( );
    void PutbackgroundColor (
        _bstr_t pbstrColor );
    _bstr_t GetbackgroundColor ( );
    void PutmaintainAspectRatio (
        VARIANT_BOOL pbMaintainAspectRatio );
    VARIANT_BOOL GetmaintainAspectRatio ( );
    void PuttoolTip (
        _bstr_t bstrToolTip );
    _bstr_t GettoolTip ( );
    VARIANT_BOOL GetfullScreen ( );
    void PutfullScreen (
        VARIANT_BOOL pbFullScreen );
    void PutshrinkToFit (
        VARIANT_BOOL pbShrinkToFit );
    VARIANT_BOOL GetshrinkToFit ( );
    void PutstretchToFit (
        VARIANT_BOOL pbStretchToFit );
    VARIANT_BOOL GetstretchToFit ( );
    void Putzoom (
        long pzoom );
    long Getzoom ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_windowless (
        VARIANT_BOOL pbClipped ) = 0;
    virtual HRESULT __stdcall get_windowless (
        VARIANT_BOOL * pbClipped ) = 0;
    virtual HRESULT __stdcall put_cursor (
        BSTR pbstrCursor ) = 0;
    virtual HRESULT __stdcall get_cursor (
        BSTR * pbstrCursor ) = 0;
    virtual HRESULT __stdcall put_backgroundColor (
        BSTR pbstrColor ) = 0;
    virtual HRESULT __stdcall get_backgroundColor (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall put_maintainAspectRatio (
        VARIANT_BOOL pbMaintainAspectRatio ) = 0;
    virtual HRESULT __stdcall get_maintainAspectRatio (
        VARIANT_BOOL * pbMaintainAspectRatio ) = 0;
    virtual HRESULT __stdcall put_toolTip (
        BSTR bstrToolTip ) = 0;
    virtual HRESULT __stdcall get_toolTip (
        BSTR * bstrToolTip ) = 0;
    virtual HRESULT __stdcall get_fullScreen (
        VARIANT_BOOL * pbFullScreen ) = 0;
    virtual HRESULT __stdcall put_fullScreen (
        VARIANT_BOOL pbFullScreen ) = 0;
    virtual HRESULT __stdcall put_shrinkToFit (
        VARIANT_BOOL pbShrinkToFit ) = 0;
    virtual HRESULT __stdcall get_shrinkToFit (
        VARIANT_BOOL * pbShrinkToFit ) = 0;
    virtual HRESULT __stdcall put_stretchToFit (
        VARIANT_BOOL pbStretchToFit ) = 0;
    virtual HRESULT __stdcall get_stretchToFit (
        VARIANT_BOOL * pbStretchToFit ) = 0;
    virtual HRESULT __stdcall put_zoom (
        long pzoom ) = 0;
    virtual HRESULT __stdcall get_zoom (
        long * pzoom ) = 0;
};

struct __declspec(uuid("47dea830-d619-4154-b8d8-6b74845d6a2d"))
WMPEffects;
    // [ default ] interface IWMPEffectsCtrl

struct __declspec(uuid("a9efab80-0a60-4c3f-bbd1-4558dd2a9769"))
IWMPEffectsCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetcurrentEffect,put=PutcurrentEffect))
    IDispatchPtr currentEffect;
    __declspec(property(get=GetcurrentEffectTitle))
    _bstr_t currentEffectTitle;
    __declspec(property(get=GetcurrentEffectType,put=PutcurrentEffectType))
    _bstr_t currentEffectType;
    __declspec(property(get=GetcurrentPreset,put=PutcurrentPreset))
    long currentPreset;
    __declspec(property(get=GetcurrentPresetTitle))
    _bstr_t currentPresetTitle;
    __declspec(property(get=GetcurrentEffectPresetCount))
    long currentEffectPresetCount;
    __declspec(property(get=GetfullScreen,put=PutfullScreen))
    VARIANT_BOOL fullScreen;
    __declspec(property(get=GeteffectCanGoFullScreen))
    VARIANT_BOOL effectCanGoFullScreen;
    __declspec(property(get=GeteffectHasPropertyPage))
    VARIANT_BOOL effectHasPropertyPage;
    __declspec(property(get=GeteffectCount))
    long effectCount;
    __declspec(property(get=GeteffectTitle))
    _bstr_t effectTitle[];
    __declspec(property(get=GeteffectType))
    _bstr_t effectType[];
    __declspec(property(get=Getwindowed,put=Putwindowed))
    VARIANT_BOOL windowed;
    __declspec(property(get=GetallowAll,put=PutallowAll))
    VARIANT_BOOL allowAll;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Getwindowed ( );
    void Putwindowed (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetallowAll ( );
    void PutallowAll (
        VARIANT_BOOL pVal );
    void PutcurrentEffectType (
        _bstr_t pVal );
    _bstr_t GetcurrentEffectType ( );
    _bstr_t GetcurrentEffectTitle ( );
    HRESULT next ( );
    HRESULT previous ( );
    HRESULT settings ( );
    IDispatchPtr GetcurrentEffect ( );
    void PutcurrentEffect (
        IDispatch * p );
    HRESULT nextEffect ( );
    HRESULT previousEffect ( );
    HRESULT nextPreset ( );
    HRESULT previousPreset ( );
    long GetcurrentPreset ( );
    void PutcurrentPreset (
        long pVal );
    _bstr_t GetcurrentPresetTitle ( );
    long GetcurrentEffectPresetCount ( );
    VARIANT_BOOL GetfullScreen ( );
    void PutfullScreen (
        VARIANT_BOOL pbFullScreen );
    VARIANT_BOOL GeteffectCanGoFullScreen ( );
    VARIANT_BOOL GeteffectHasPropertyPage ( );
    long GeteffectCount ( );
    _bstr_t GeteffectTitle (
        long index );
    _bstr_t GeteffectType (
        long index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_windowed (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_windowed (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_allowAll (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_allowAll (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall put_currentEffectType (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_currentEffectType (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_currentEffectTitle (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall raw_next ( ) = 0;
    virtual HRESULT __stdcall raw_previous ( ) = 0;
    virtual HRESULT __stdcall raw_settings ( ) = 0;
    virtual HRESULT __stdcall get_currentEffect (
        IDispatch * * p ) = 0;
    virtual HRESULT __stdcall put_currentEffect (
        IDispatch * p ) = 0;
    virtual HRESULT __stdcall raw_nextEffect ( ) = 0;
    virtual HRESULT __stdcall raw_previousEffect ( ) = 0;
    virtual HRESULT __stdcall raw_nextPreset ( ) = 0;
    virtual HRESULT __stdcall raw_previousPreset ( ) = 0;
    virtual HRESULT __stdcall get_currentPreset (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_currentPreset (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_currentPresetTitle (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_currentEffectPresetCount (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_fullScreen (
        VARIANT_BOOL * pbFullScreen ) = 0;
    virtual HRESULT __stdcall put_fullScreen (
        VARIANT_BOOL pbFullScreen ) = 0;
    virtual HRESULT __stdcall get_effectCanGoFullScreen (
        VARIANT_BOOL * pbFullScreen ) = 0;
    virtual HRESULT __stdcall get_effectHasPropertyPage (
        VARIANT_BOOL * pbPropertyPage ) = 0;
    virtual HRESULT __stdcall get_effectCount (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_effectTitle (
        long index,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_effectType (
        long index,
        BSTR * pVal ) = 0;
};

struct __declspec(uuid("93eb32f5-87b1-45ad-acc6-0f2483db83bb"))
WMPEqualizerSettingsCtrl;
    // [ default ] interface IWMPEqualizerSettingsCtrl

struct __declspec(uuid("2bd3716f-a914-49fb-8655-996d5f495498"))
IWMPEqualizerSettingsCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetgainLevel5,put=PutgainLevel5))
    float gainLevel5;
    __declspec(property(get=GetgainLevel6,put=PutgainLevel6))
    float gainLevel6;
    __declspec(property(get=GetgainLevel7,put=PutgainLevel7))
    float gainLevel7;
    __declspec(property(get=GetgainLevel8,put=PutgainLevel8))
    float gainLevel8;
    __declspec(property(get=GetgainLevel9,put=PutgainLevel9))
    float gainLevel9;
    __declspec(property(get=GetgainLevel10,put=PutgainLevel10))
    float gainLevel10;
    __declspec(property(get=GetgainLevels,put=PutgainLevels))
    float gainLevels[];
    __declspec(property(get=GetcurrentPreset,put=PutcurrentPreset))
    long currentPreset;
    __declspec(property(get=GetcurrentPresetTitle))
    _bstr_t currentPresetTitle;
    __declspec(property(get=GetpresetCount))
    long presetCount;
    __declspec(property(get=GetenhancedAudio,put=PutenhancedAudio))
    VARIANT_BOOL enhancedAudio;
    __declspec(property(get=GetspeakerSize,put=PutspeakerSize))
    long speakerSize;
    __declspec(property(get=GetcurrentSpeakerName))
    _bstr_t currentSpeakerName;
    __declspec(property(get=GettruBassLevel,put=PuttruBassLevel))
    long truBassLevel;
    __declspec(property(get=GetwowLevel,put=PutwowLevel))
    long wowLevel;
    __declspec(property(get=GetenableSplineTension,put=PutenableSplineTension))
    VARIANT_BOOL enableSplineTension;
    __declspec(property(get=GetsplineTension,put=PutsplineTension))
    float splineTension;
    __declspec(property(get=GetpresetTitle))
    _bstr_t presetTitle[];
    __declspec(property(get=Getnormalization,put=Putnormalization))
    VARIANT_BOOL normalization;
    __declspec(property(get=GetnormalizationAverage))
    float normalizationAverage;
    __declspec(property(get=GetnormalizationPeak))
    float normalizationPeak;
    __declspec(property(get=GetcrossFade,put=PutcrossFade))
    VARIANT_BOOL crossFade;
    __declspec(property(get=GetcrossFadeWindow,put=PutcrossFadeWindow))
    long crossFadeWindow;
    __declspec(property(get=Getbypass,put=Putbypass))
    VARIANT_BOOL bypass;
    __declspec(property(get=Getbands))
    long bands;
    __declspec(property(get=GetgainLevel1,put=PutgainLevel1))
    float gainLevel1;
    __declspec(property(get=GetgainLevel2,put=PutgainLevel2))
    float gainLevel2;
    __declspec(property(get=GetgainLevel3,put=PutgainLevel3))
    float gainLevel3;
    __declspec(property(get=GetgainLevel4,put=PutgainLevel4))
    float gainLevel4;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Getbypass ( );
    void Putbypass (
        VARIANT_BOOL pVal );
    float GetgainLevel1 ( );
    void PutgainLevel1 (
        float pflLevel );
    float GetgainLevel2 ( );
    void PutgainLevel2 (
        float pflLevel );
    float GetgainLevel3 ( );
    void PutgainLevel3 (
        float pflLevel );
    float GetgainLevel4 ( );
    void PutgainLevel4 (
        float pflLevel );
    float GetgainLevel5 ( );
    void PutgainLevel5 (
        float pflLevel );
    float GetgainLevel6 ( );
    void PutgainLevel6 (
        float pflLevel );
    float GetgainLevel7 ( );
    void PutgainLevel7 (
        float pflLevel );
    float GetgainLevel8 ( );
    void PutgainLevel8 (
        float pflLevel );
    float GetgainLevel9 ( );
    void PutgainLevel9 (
        float pflLevel );
    float GetgainLevel10 ( );
    void PutgainLevel10 (
        float pflLevel );
    float GetgainLevels (
        long iIndex );
    void PutgainLevels (
        long iIndex,
        float pflLevel );
    HRESULT reset ( );
    long Getbands ( );
    HRESULT nextPreset ( );
    HRESULT previousPreset ( );
    long GetcurrentPreset ( );
    void PutcurrentPreset (
        long pVal );
    _bstr_t GetcurrentPresetTitle ( );
    long GetpresetCount ( );
    VARIANT_BOOL GetenhancedAudio ( );
    void PutenhancedAudio (
        VARIANT_BOOL pfVal );
    long GetspeakerSize ( );
    void PutspeakerSize (
        long plVal );
    _bstr_t GetcurrentSpeakerName ( );
    long GettruBassLevel ( );
    void PuttruBassLevel (
        long plTruBassLevel );
    long GetwowLevel ( );
    void PutwowLevel (
        long plWowLevel );
    float GetsplineTension ( );
    void PutsplineTension (
        float pflSplineTension );
    VARIANT_BOOL GetenableSplineTension ( );
    void PutenableSplineTension (
        VARIANT_BOOL pfEnableSplineTension );
    _bstr_t GetpresetTitle (
        long iIndex );
    VARIANT_BOOL Getnormalization ( );
    void Putnormalization (
        VARIANT_BOOL pfVal );
    float GetnormalizationAverage ( );
    float GetnormalizationPeak ( );
    VARIANT_BOOL GetcrossFade ( );
    void PutcrossFade (
        VARIANT_BOOL pfVal );
    long GetcrossFadeWindow ( );
    void PutcrossFadeWindow (
        long plWindow );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_bypass (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_bypass (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_gainLevel1 (
        float * pflLevel ) = 0;
    virtual HRESULT __stdcall put_gainLevel1 (
        float pflLevel ) = 0;
    virtual HRESULT __stdcall get_gainLevel2 (
        float * pflLevel ) = 0;
    virtual HRESULT __stdcall put_gainLevel2 (
        float pflLevel ) = 0;
    virtual HRESULT __stdcall get_gainLevel3 (
        float * pflLevel ) = 0;
    virtual HRESULT __stdcall put_gainLevel3 (
        float pflLevel ) = 0;
    virtual HRESULT __stdcall get_gainLevel4 (
        float * pflLevel ) = 0;
    virtual HRESULT __stdcall put_gainLevel4 (
        float pflLevel ) = 0;
    virtual HRESULT __stdcall get_gainLevel5 (
        float * pflLevel ) = 0;
    virtual HRESULT __stdcall put_gainLevel5 (
        float pflLevel ) = 0;
    virtual HRESULT __stdcall get_gainLevel6 (
        float * pflLevel ) = 0;
    virtual HRESULT __stdcall put_gainLevel6 (
        float pflLevel ) = 0;
    virtual HRESULT __stdcall get_gainLevel7 (
        float * pflLevel ) = 0;
    virtual HRESULT __stdcall put_gainLevel7 (
        float pflLevel ) = 0;
    virtual HRESULT __stdcall get_gainLevel8 (
        float * pflLevel ) = 0;
    virtual HRESULT __stdcall put_gainLevel8 (
        float pflLevel ) = 0;
    virtual HRESULT __stdcall get_gainLevel9 (
        float * pflLevel ) = 0;
    virtual HRESULT __stdcall put_gainLevel9 (
        float pflLevel ) = 0;
    virtual HRESULT __stdcall get_gainLevel10 (
        float * pflLevel ) = 0;
    virtual HRESULT __stdcall put_gainLevel10 (
        float pflLevel ) = 0;
    virtual HRESULT __stdcall get_gainLevels (
        long iIndex,
        float * pflLevel ) = 0;
    virtual HRESULT __stdcall put_gainLevels (
        long iIndex,
        float pflLevel ) = 0;
    virtual HRESULT __stdcall raw_reset ( ) = 0;
    virtual HRESULT __stdcall get_bands (
        long * pbands ) = 0;
    virtual HRESULT __stdcall raw_nextPreset ( ) = 0;
    virtual HRESULT __stdcall raw_previousPreset ( ) = 0;
    virtual HRESULT __stdcall get_currentPreset (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_currentPreset (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_currentPresetTitle (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_presetCount (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_enhancedAudio (
        VARIANT_BOOL * pfVal ) = 0;
    virtual HRESULT __stdcall put_enhancedAudio (
        VARIANT_BOOL pfVal ) = 0;
    virtual HRESULT __stdcall get_speakerSize (
        long * plVal ) = 0;
    virtual HRESULT __stdcall put_speakerSize (
        long plVal ) = 0;
    virtual HRESULT __stdcall get_currentSpeakerName (
        BSTR * pbstrName ) = 0;
    virtual HRESULT __stdcall get_truBassLevel (
        long * plTruBassLevel ) = 0;
    virtual HRESULT __stdcall put_truBassLevel (
        long plTruBassLevel ) = 0;
    virtual HRESULT __stdcall get_wowLevel (
        long * plWowLevel ) = 0;
    virtual HRESULT __stdcall put_wowLevel (
        long plWowLevel ) = 0;
    virtual HRESULT __stdcall get_splineTension (
        float * pflSplineTension ) = 0;
    virtual HRESULT __stdcall put_splineTension (
        float pflSplineTension ) = 0;
    virtual HRESULT __stdcall get_enableSplineTension (
        VARIANT_BOOL * pfEnableSplineTension ) = 0;
    virtual HRESULT __stdcall put_enableSplineTension (
        VARIANT_BOOL pfEnableSplineTension ) = 0;
    virtual HRESULT __stdcall get_presetTitle (
        long iIndex,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall get_normalization (
        VARIANT_BOOL * pfVal ) = 0;
    virtual HRESULT __stdcall put_normalization (
        VARIANT_BOOL pfVal ) = 0;
    virtual HRESULT __stdcall get_normalizationAverage (
        float * pflAverage ) = 0;
    virtual HRESULT __stdcall get_normalizationPeak (
        float * pflPeak ) = 0;
    virtual HRESULT __stdcall get_crossFade (
        VARIANT_BOOL * pfVal ) = 0;
    virtual HRESULT __stdcall put_crossFade (
        VARIANT_BOOL pfVal ) = 0;
    virtual HRESULT __stdcall get_crossFadeWindow (
        long * plWindow ) = 0;
    virtual HRESULT __stdcall put_crossFadeWindow (
        long plWindow ) = 0;
};

struct __declspec(uuid("ae7bfafe-dcc8-4a73-92c8-cc300ca88859"))
WMPVideoSettingsCtrl;
    // [ default ] interface IWMPVideoSettingsCtrl

struct __declspec(uuid("07ec23da-ef73-4bde-a40f-f269e0b7afd6"))
IWMPVideoSettingsCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getbrightness,put=Putbrightness))
    long brightness;
    __declspec(property(get=Getcontrast,put=Putcontrast))
    long contrast;
    __declspec(property(get=Gethue,put=Puthue))
    long hue;
    __declspec(property(get=Getsaturation,put=Putsaturation))
    long saturation;

    //
    // Wrapper methods for error-handling
    //

    long Getbrightness ( );
    void Putbrightness (
        long pVal );
    long Getcontrast ( );
    void Putcontrast (
        long pVal );
    long Gethue ( );
    void Puthue (
        long pVal );
    long Getsaturation ( );
    void Putsaturation (
        long pVal );
    HRESULT reset ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_brightness (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_brightness (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_contrast (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_contrast (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_hue (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_hue (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_saturation (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_saturation (
        long pVal ) = 0;
    virtual HRESULT __stdcall raw_reset ( ) = 0;
};

struct __declspec(uuid("d9de732a-aee9-4503-9d11-5605589977a8"))
WMPLibraryTreeCtrl;
    // [ default ] interface IWMPLibraryTreeCtrl

struct __declspec(uuid("b738fcae-f089-45df-aed6-034b9e7db632"))
IWMPLibraryTreeCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdropDownVisible,put=PutdropDownVisible))
    VARIANT_BOOL dropDownVisible;
    __declspec(property(get=GetforegroundColor,put=PutforegroundColor))
    _bstr_t foregroundColor;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetfontSize,put=PutfontSize))
    long fontSize;
    __declspec(property(get=GetfontStyle,put=PutfontStyle))
    _bstr_t fontStyle;
    __declspec(property(get=GetfontFace,put=PutfontFace))
    _bstr_t fontFace;
    __declspec(property(get=Getfilter,put=Putfilter))
    _bstr_t filter;
    __declspec(property(get=GetexpandState,put=PutexpandState))
    _bstr_t expandState;
    __declspec(property(get=GetPlaylist,put=PutPlaylist))
    IWMPPlaylistPtr Playlist;
    __declspec(property(get=GetselectedPlaylist))
    IWMPPlaylistPtr selectedPlaylist;
    __declspec(property(get=GetselectedMedia))
    IWMPMediaPtr selectedMedia;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetdropDownVisible ( );
    void PutdropDownVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetforegroundColor ( );
    void PutforegroundColor (
        _bstr_t pVal );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    long GetfontSize ( );
    void PutfontSize (
        long pVal );
    _bstr_t GetfontStyle ( );
    void PutfontStyle (
        _bstr_t pVal );
    _bstr_t GetfontFace ( );
    void PutfontFace (
        _bstr_t pVal );
    _bstr_t Getfilter ( );
    void Putfilter (
        _bstr_t pVal );
    _bstr_t GetexpandState ( );
    void PutexpandState (
        _bstr_t pVal );
    IWMPPlaylistPtr GetPlaylist ( );
    void PutPlaylist (
        struct IWMPPlaylist * ppPlaylist );
    IWMPPlaylistPtr GetselectedPlaylist ( );
    IWMPMediaPtr GetselectedMedia ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_dropDownVisible (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_dropDownVisible (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_foregroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_foregroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_backgroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fontSize (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_fontSize (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_fontStyle (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_fontStyle (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fontFace (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_fontFace (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_filter (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_filter (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_expandState (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_expandState (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_Playlist (
        struct IWMPPlaylist * * ppPlaylist ) = 0;
    virtual HRESULT __stdcall put_Playlist (
        struct IWMPPlaylist * ppPlaylist ) = 0;
    virtual HRESULT __stdcall get_selectedPlaylist (
        struct IWMPPlaylist * * ppPlaylist ) = 0;
    virtual HRESULT __stdcall get_selectedMedia (
        struct IWMPMedia * * ppMedia ) = 0;
};

struct __declspec(uuid("6342fced-25ea-4033-bddb-d049a14382d3"))
WMPEditCtrl;
    // [ default ] interface IWMPEditCtrl

struct __declspec(uuid("70e1217c-c617-4cfd-bd8a-69ca2043e70b"))
IWMPEditCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getvalue,put=Putvalue))
    _bstr_t value;
    __declspec(property(get=Getborder,put=Putborder))
    VARIANT_BOOL border;
    __declspec(property(get=Getjustification,put=Putjustification))
    _bstr_t justification;
    __declspec(property(get=GeteditStyle,put=PuteditStyle))
    _bstr_t editStyle;
    __declspec(property(get=GetwordWrap,put=PutwordWrap))
    VARIANT_BOOL wordWrap;
    __declspec(property(get=GetreadOnly,put=PutreadOnly))
    VARIANT_BOOL readOnly;
    __declspec(property(get=GetforegroundColor,put=PutforegroundColor))
    _bstr_t foregroundColor;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetfontSize,put=PutfontSize))
    long fontSize;
    __declspec(property(get=GetfontStyle,put=PutfontStyle))
    _bstr_t fontStyle;
    __declspec(property(get=GetfontFace,put=PutfontFace))
    _bstr_t fontFace;
    __declspec(property(get=GettextLimit,put=PuttextLimit))
    long textLimit;
    __declspec(property(get=GetlineCount))
    long lineCount;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getvalue ( );
    void Putvalue (
        _bstr_t pVal );
    VARIANT_BOOL Getborder ( );
    void Putborder (
        VARIANT_BOOL pVal );
    _bstr_t Getjustification ( );
    void Putjustification (
        _bstr_t pVal );
    _bstr_t GeteditStyle ( );
    void PuteditStyle (
        _bstr_t pVal );
    VARIANT_BOOL GetwordWrap ( );
    void PutwordWrap (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetreadOnly ( );
    void PutreadOnly (
        VARIANT_BOOL pVal );
    _bstr_t GetforegroundColor ( );
    void PutforegroundColor (
        _bstr_t pVal );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    long GetfontSize ( );
    void PutfontSize (
        long pVal );
    _bstr_t GetfontStyle ( );
    void PutfontStyle (
        _bstr_t pVal );
    _bstr_t GetfontFace ( );
    void PutfontFace (
        _bstr_t pVal );
    long GettextLimit ( );
    void PuttextLimit (
        long pVal );
    long GetlineCount ( );
    _bstr_t getLine (
        long nIndex );
    long getSelectionStart ( );
    long getSelectionEnd ( );
    HRESULT setSelection (
        long nStart,
        long nEnd );
    HRESULT replaceSelection (
        _bstr_t newVal );
    long getLineIndex (
        long nIndex );
    long getLineFromChar (
        long nPosition );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_value (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_value (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_border (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_border (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_justification (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_justification (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_editStyle (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_editStyle (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_wordWrap (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_wordWrap (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_readOnly (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_readOnly (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_foregroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_foregroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_backgroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fontSize (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_fontSize (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_fontStyle (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_fontStyle (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fontFace (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_fontFace (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_textLimit (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_textLimit (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_lineCount (
        long * pVal ) = 0;
    virtual HRESULT __stdcall raw_getLine (
        long nIndex,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall raw_getSelectionStart (
        long * pnStart ) = 0;
    virtual HRESULT __stdcall raw_getSelectionEnd (
        long * pnEnd ) = 0;
    virtual HRESULT __stdcall raw_setSelection (
        long nStart,
        long nEnd ) = 0;
    virtual HRESULT __stdcall raw_replaceSelection (
        BSTR newVal ) = 0;
    virtual HRESULT __stdcall raw_getLineIndex (
        long nIndex,
        long * pnPosition ) = 0;
    virtual HRESULT __stdcall raw_getLineFromChar (
        long nPosition,
        long * pnLine ) = 0;
};

struct __declspec(uuid("5d0ad945-289e-45c5-a9c6-f301f0152108"))
IWMPPluginUIHost : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetobjectID,put=PutobjectID))
    _bstr_t objectID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    _bstr_t GetobjectID ( );
    void PutobjectID (
        _bstr_t pVal );
    _variant_t getProperty (
        _bstr_t bstrName );
    HRESULT setProperty (
        _bstr_t bstrName,
        const _variant_t & newVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_backgroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_objectID (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_objectID (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall raw_getProperty (
        BSTR bstrName,
        VARIANT * pVal ) = 0;
    virtual HRESULT __stdcall raw_setProperty (
        BSTR bstrName,
        VARIANT newVal ) = 0;
};

struct __declspec(uuid("bab3768b-8883-4aec-9f9b-e14c947913ef"))
WMPMenuCtrl;
    // [ default ] interface IWMPMenuCtrl

struct __declspec(uuid("158a7adc-33da-4039-a553-bddbbe389f5c"))
IWMPMenuCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetshowFlags,put=PutshowFlags))
    long showFlags;

    //
    // Wrapper methods for error-handling
    //

    HRESULT deleteAllItems ( );
    HRESULT appendItem (
        long nID,
        _bstr_t bstrItem );
    HRESULT appendSeparator ( );
    HRESULT enableItem (
        long nID,
        VARIANT_BOOL newVal );
    HRESULT checkItem (
        long nID,
        VARIANT_BOOL newVal );
    HRESULT checkRadioItem (
        long nID,
        VARIANT_BOOL newVal );
    long GetshowFlags ( );
    void PutshowFlags (
        long pVal );
    long show ( );
    HRESULT showEx (
        long nID );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_deleteAllItems ( ) = 0;
    virtual HRESULT __stdcall raw_appendItem (
        long nID,
        BSTR bstrItem ) = 0;
    virtual HRESULT __stdcall raw_appendSeparator ( ) = 0;
    virtual HRESULT __stdcall raw_enableItem (
        long nID,
        VARIANT_BOOL newVal ) = 0;
    virtual HRESULT __stdcall raw_checkItem (
        long nID,
        VARIANT_BOOL newVal ) = 0;
    virtual HRESULT __stdcall raw_checkRadioItem (
        long nID,
        VARIANT_BOOL newVal ) = 0;
    virtual HRESULT __stdcall get_showFlags (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_showFlags (
        long pVal ) = 0;
    virtual HRESULT __stdcall raw_show (
        long * pnID ) = 0;
    virtual HRESULT __stdcall raw_showEx (
        long nID ) = 0;
};

struct __declspec(uuid("6b28f900-8d64-4b80-9963-cc52ddd1fbb4"))
WMPAutoMenuCtrl;
    // [ default ] interface IWMPAutoMenuCtrl

struct __declspec(uuid("1ad13e0b-4f3a-41df-9be2-f9e6fe0a7875"))
IWMPAutoMenuCtrl : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT show (
        _bstr_t newVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_show (
        BSTR newVal ) = 0;
};

struct __declspec(uuid("ae3b6831-25a9-11d3-bd41-00c04f6ea5ae"))
WMPRegionalButtonCtrl;
    // [ default ] interface IWMPRegionalButtonCtrl

struct __declspec(uuid("58d507b1-2354-11d3-bd41-00c04f6ea5ae"))
IWMPRegionalButtonCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GethueShift,put=PuthueShift))
    float hueShift;
    __declspec(property(get=Getsaturation,put=Putsaturation))
    float saturation;
    __declspec(property(get=Getimage,put=Putimage))
    _bstr_t image;
    __declspec(property(get=GethoverImage,put=PuthoverImage))
    _bstr_t hoverImage;
    __declspec(property(get=GetdownImage,put=PutdownImage))
    _bstr_t downImage;
    __declspec(property(get=GethoverDownImage,put=PuthoverDownImage))
    _bstr_t hoverDownImage;
    __declspec(property(get=GetdisabledImage,put=PutdisabledImage))
    _bstr_t disabledImage;
    __declspec(property(get=GetmappingImage,put=PutmappingImage))
    _bstr_t mappingImage;
    __declspec(property(get=GettransparencyColor,put=PuttransparencyColor))
    _bstr_t transparencyColor;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;
    __declspec(property(get=GetshowBackground,put=PutshowBackground))
    VARIANT_BOOL showBackground;
    __declspec(property(get=Getradio,put=Putradio))
    VARIANT_BOOL radio;
    __declspec(property(get=GetbuttonCount))
    long buttonCount;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getimage ( );
    void Putimage (
        _bstr_t pVal );
    _bstr_t GethoverImage ( );
    void PuthoverImage (
        _bstr_t pVal );
    _bstr_t GetdownImage ( );
    void PutdownImage (
        _bstr_t pVal );
    _bstr_t GethoverDownImage ( );
    void PuthoverDownImage (
        _bstr_t pVal );
    _bstr_t GetdisabledImage ( );
    void PutdisabledImage (
        _bstr_t pVal );
    _bstr_t GetmappingImage ( );
    void PutmappingImage (
        _bstr_t pVal );
    _bstr_t GettransparencyColor ( );
    void PuttransparencyColor (
        _bstr_t pVal );
    _bstr_t Getcursor ( );
    void Putcursor (
        _bstr_t pVal );
    VARIANT_BOOL GetshowBackground ( );
    void PutshowBackground (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Getradio ( );
    void Putradio (
        VARIANT_BOOL pVal );
    long GetbuttonCount ( );
    IDispatchPtr createButton ( );
    IDispatchPtr getButton (
        long nButton );
    HRESULT Click (
        long nButton );
    float GethueShift ( );
    void PuthueShift (
        float pVal );
    float Getsaturation ( );
    void Putsaturation (
        float pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_image (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_image (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_hoverImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_hoverImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_downImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_downImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_hoverDownImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_hoverDownImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_disabledImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_disabledImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_mappingImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_mappingImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_transparencyColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_transparencyColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_cursor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_cursor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_showBackground (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_showBackground (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_radio (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_radio (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_buttonCount (
        long * nButtons ) = 0;
    virtual HRESULT __stdcall raw_createButton (
        IDispatch * * pButton ) = 0;
    virtual HRESULT __stdcall raw_getButton (
        long nButton,
        IDispatch * * pButton ) = 0;
    virtual HRESULT __stdcall raw_Click (
        long nButton ) = 0;
    virtual HRESULT __stdcall get_hueShift (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_hueShift (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_saturation (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_saturation (
        float pVal ) = 0;
};

struct __declspec(uuid("50fc8d31-67ac-11d3-bd4c-00c04f6ea5ae"))
IWMPRegionalButtonEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT onblur ( );
    HRESULT onfocus ( );
    HRESULT onclick ( );
    HRESULT ondblclick ( );
    HRESULT onmousedown ( );
    HRESULT onmouseup ( );
    HRESULT onmousemove ( );
    HRESULT onmouseover ( );
    HRESULT onmouseout ( );
    HRESULT onkeypress ( );
    HRESULT onkeydown ( );
    HRESULT onkeyup ( );
};

struct __declspec(uuid("09aeff11-69ef-11d3-bd4d-00c04f6ea5ae"))
WMPRegionalButton;
    // [ default ] interface IWMPRegionalButton
    // [ default, source ] dispinterface IWMPRegionalButtonEvents

struct __declspec(uuid("58d507b2-2354-11d3-bd41-00c04f6ea5ae"))
IWMPRegionalButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetaccName,put=PutaccName))
    _bstr_t accName;
    __declspec(property(get=GetaccDescription,put=PutaccDescription))
    _bstr_t accDescription;
    __declspec(property(get=GetaccKeyboardShortcut,put=PutaccKeyboardShortcut))
    _bstr_t accKeyboardShortcut;
    __declspec(property(get=GetupToolTip,put=PutupToolTip))
    _bstr_t upToolTip;
    __declspec(property(get=GetdownToolTip,put=PutdownToolTip))
    _bstr_t downToolTip;
    __declspec(property(get=GetmappingColor,put=PutmappingColor))
    _bstr_t mappingColor;
    __declspec(property(get=Getenabled,put=Putenabled))
    VARIANT_BOOL enabled;
    __declspec(property(get=Getsticky,put=Putsticky))
    VARIANT_BOOL sticky;
    __declspec(property(get=Getdown,put=Putdown))
    VARIANT_BOOL down;
    __declspec(property(get=Getindex))
    long index;
    __declspec(property(get=GettabStop,put=PuttabStop))
    VARIANT_BOOL tabStop;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetupToolTip ( );
    void PutupToolTip (
        _bstr_t pVal );
    _bstr_t GetdownToolTip ( );
    void PutdownToolTip (
        _bstr_t pVal );
    _bstr_t GetmappingColor ( );
    void PutmappingColor (
        _bstr_t pVal );
    VARIANT_BOOL Getenabled ( );
    void Putenabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Getsticky ( );
    void Putsticky (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Getdown ( );
    void Putdown (
        VARIANT_BOOL pVal );
    long Getindex ( );
    VARIANT_BOOL GettabStop ( );
    void PuttabStop (
        VARIANT_BOOL pVal );
    _bstr_t Getcursor ( );
    void Putcursor (
        _bstr_t pVal );
    HRESULT Click ( );
    _bstr_t GetaccName ( );
    void PutaccName (
        _bstr_t pszName );
    _bstr_t GetaccDescription ( );
    void PutaccDescription (
        _bstr_t pszDescription );
    _bstr_t GetaccKeyboardShortcut ( );
    void PutaccKeyboardShortcut (
        _bstr_t pszShortcut );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_upToolTip (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_upToolTip (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_downToolTip (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_downToolTip (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_mappingColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_mappingColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_enabled (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_enabled (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_sticky (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_sticky (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_down (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_down (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_index (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_tabStop (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_tabStop (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_cursor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_cursor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall raw_Click ( ) = 0;
    virtual HRESULT __stdcall get_accName (
        BSTR * pszName ) = 0;
    virtual HRESULT __stdcall put_accName (
        BSTR pszName ) = 0;
    virtual HRESULT __stdcall get_accDescription (
        BSTR * pszDescription ) = 0;
    virtual HRESULT __stdcall put_accDescription (
        BSTR pszDescription ) = 0;
    virtual HRESULT __stdcall get_accKeyboardShortcut (
        BSTR * pszShortcut ) = 0;
    virtual HRESULT __stdcall put_accKeyboardShortcut (
        BSTR pszShortcut ) = 0;
};

struct __declspec(uuid("95f45aa4-ed0a-11d2-ba67-0000f80855e6"))
IWMPCustomSliderCtrlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT ondragbegin ( );
    HRESULT ondragend ( );
    HRESULT onpositionchange ( );
};

struct __declspec(uuid("95f45aa3-ed0a-11d2-ba67-0000f80855e6"))
WMPCustomSliderCtrl;
    // [ default ] interface IWMPCustomSlider
    // [ default, source ] dispinterface IWMPCustomSliderCtrlEvents

struct __declspec(uuid("95f45aa2-ed0a-11d2-ba67-0000f80855e6"))
IWMPCustomSlider : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getimage,put=Putimage))
    _bstr_t image;
    __declspec(property(get=GetpositionImage,put=PutpositionImage))
    _bstr_t positionImage;
    __declspec(property(get=GethoverImage,put=PuthoverImage))
    _bstr_t hoverImage;
    __declspec(property(get=GetdisabledImage,put=PutdisabledImage))
    _bstr_t disabledImage;
    __declspec(property(get=Getmin,put=Putmin))
    float min;
    __declspec(property(get=Getmax,put=Putmax))
    float max;
    __declspec(property(get=GettransparencyColor,put=PuttransparencyColor))
    _bstr_t transparencyColor;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;
    __declspec(property(get=Getvalue,put=Putvalue))
    float value;
    __declspec(property(get=GettoolTip,put=PuttoolTip))
    _bstr_t toolTip;
    __declspec(property(get=GetdownImage,put=PutdownImage))
    _bstr_t downImage;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getcursor ( );
    void Putcursor (
        _bstr_t pVal );
    float Getmin ( );
    void Putmin (
        float pVal );
    float Getmax ( );
    void Putmax (
        float pVal );
    float Getvalue ( );
    void Putvalue (
        float pVal );
    _bstr_t GettoolTip ( );
    void PuttoolTip (
        _bstr_t pVal );
    _bstr_t GetpositionImage ( );
    void PutpositionImage (
        _bstr_t pVal );
    _bstr_t Getimage ( );
    void Putimage (
        _bstr_t pVal );
    _bstr_t GethoverImage ( );
    void PuthoverImage (
        _bstr_t pVal );
    _bstr_t GetdisabledImage ( );
    void PutdisabledImage (
        _bstr_t pVal );
    _bstr_t GetdownImage ( );
    void PutdownImage (
        _bstr_t pVal );
    _bstr_t GettransparencyColor ( );
    void PuttransparencyColor (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_cursor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_cursor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_min (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_min (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_max (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_max (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_value (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_value (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_toolTip (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_toolTip (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_positionImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_positionImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_image (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_image (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_hoverImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_hoverImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_disabledImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_disabledImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_downImage (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_downImage (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_transparencyColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_transparencyColor (
        BSTR pVal ) = 0;
};

struct __declspec(uuid("ddda102e-0e17-11d3-a2e2-00c04f79f88e"))
WMPTextCtrl;
    // [ default ] interface IWMPTextCtrl

struct __declspec(uuid("237dac8e-0e32-11d3-a2e2-00c04f79f88e"))
IWMPTextCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetfontFace,put=PutfontFace))
    _bstr_t fontFace;
    __declspec(property(get=GetfontStyle,put=PutfontStyle))
    _bstr_t fontStyle;
    __declspec(property(get=GetfontSize,put=PutfontSize))
    long fontSize;
    __declspec(property(get=GetforegroundColor,put=PutforegroundColor))
    _bstr_t foregroundColor;
    __declspec(property(get=GethoverBackgroundColor,put=PuthoverBackgroundColor))
    _bstr_t hoverBackgroundColor;
    __declspec(property(get=GethoverForegroundColor,put=PuthoverForegroundColor))
    _bstr_t hoverForegroundColor;
    __declspec(property(get=GethoverFontStyle,put=PuthoverFontStyle))
    _bstr_t hoverFontStyle;
    __declspec(property(get=Getvalue,put=Putvalue))
    _bstr_t value;
    __declspec(property(get=GettoolTip,put=PuttoolTip))
    _bstr_t toolTip;
    __declspec(property(get=GetdisabledFontStyle,put=PutdisabledFontStyle))
    _bstr_t disabledFontStyle;
    __declspec(property(get=GetdisabledForegroundColor,put=PutdisabledForegroundColor))
    _bstr_t disabledForegroundColor;
    __declspec(property(get=GetdisabledBackgroundColor,put=PutdisabledBackgroundColor))
    _bstr_t disabledBackgroundColor;
    __declspec(property(get=GetfontSmoothing,put=PutfontSmoothing))
    VARIANT_BOOL fontSmoothing;
    __declspec(property(get=Getjustification,put=Putjustification))
    _bstr_t justification;
    __declspec(property(get=GetwordWrap,put=PutwordWrap))
    VARIANT_BOOL wordWrap;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;
    __declspec(property(get=Getscrolling,put=Putscrolling))
    VARIANT_BOOL scrolling;
    __declspec(property(get=GetscrollingDirection,put=PutscrollingDirection))
    _bstr_t scrollingDirection;
    __declspec(property(get=GetscrollingDelay,put=PutscrollingDelay))
    int scrollingDelay;
    __declspec(property(get=GetscrollingAmount,put=PutscrollingAmount))
    int scrollingAmount;
    __declspec(property(get=GettextWidth))
    int textWidth;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    _bstr_t GetfontFace ( );
    void PutfontFace (
        _bstr_t pVal );
    _bstr_t GetfontStyle ( );
    void PutfontStyle (
        _bstr_t pVal );
    long GetfontSize ( );
    void PutfontSize (
        long pVal );
    _bstr_t GetforegroundColor ( );
    void PutforegroundColor (
        _bstr_t pVal );
    _bstr_t GethoverBackgroundColor ( );
    void PuthoverBackgroundColor (
        _bstr_t pVal );
    _bstr_t GethoverForegroundColor ( );
    void PuthoverForegroundColor (
        _bstr_t pVal );
    _bstr_t GethoverFontStyle ( );
    void PuthoverFontStyle (
        _bstr_t pVal );
    _bstr_t Getvalue ( );
    void Putvalue (
        _bstr_t pVal );
    _bstr_t GettoolTip ( );
    void PuttoolTip (
        _bstr_t pVal );
    _bstr_t GetdisabledFontStyle ( );
    void PutdisabledFontStyle (
        _bstr_t pVal );
    _bstr_t GetdisabledForegroundColor ( );
    void PutdisabledForegroundColor (
        _bstr_t pVal );
    _bstr_t GetdisabledBackgroundColor ( );
    void PutdisabledBackgroundColor (
        _bstr_t pVal );
    VARIANT_BOOL GetfontSmoothing ( );
    void PutfontSmoothing (
        VARIANT_BOOL pVal );
    _bstr_t Getjustification ( );
    void Putjustification (
        _bstr_t pVal );
    VARIANT_BOOL GetwordWrap ( );
    void PutwordWrap (
        VARIANT_BOOL pVal );
    _bstr_t Getcursor ( );
    void Putcursor (
        _bstr_t pVal );
    VARIANT_BOOL Getscrolling ( );
    void Putscrolling (
        VARIANT_BOOL pVal );
    _bstr_t GetscrollingDirection ( );
    void PutscrollingDirection (
        _bstr_t pVal );
    int GetscrollingDelay ( );
    void PutscrollingDelay (
        int pVal );
    int GetscrollingAmount ( );
    void PutscrollingAmount (
        int pVal );
    int GettextWidth ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_backgroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fontFace (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_fontFace (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fontStyle (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_fontStyle (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fontSize (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_fontSize (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_foregroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_foregroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_hoverBackgroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_hoverBackgroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_hoverForegroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_hoverForegroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_hoverFontStyle (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_hoverFontStyle (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_value (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_value (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_toolTip (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_toolTip (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_disabledFontStyle (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_disabledFontStyle (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_disabledForegroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_disabledForegroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_disabledBackgroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_disabledBackgroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fontSmoothing (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_fontSmoothing (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_justification (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_justification (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_wordWrap (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_wordWrap (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_cursor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_cursor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_scrolling (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_scrolling (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_scrollingDirection (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_scrollingDirection (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_scrollingDelay (
        int * pVal ) = 0;
    virtual HRESULT __stdcall put_scrollingDelay (
        int pVal ) = 0;
    virtual HRESULT __stdcall get_scrollingAmount (
        int * pVal ) = 0;
    virtual HRESULT __stdcall put_scrollingAmount (
        int pVal ) = 0;
    virtual HRESULT __stdcall get_textWidth (
        int * pVal ) = 0;
};

struct __declspec(uuid("5f9cfd93-8cad-11d3-9a7e-00c04f8efb70"))
WMPPlaylistCtrl;
    // [ default ] interface IWMPPlaylistCtrl

struct __declspec(uuid("891eadb1-1c45-48b0-b704-49a888da98c4"))
ITaskCntrCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrentContainer,put=PutCurrentContainer))
    IUnknownPtr CurrentContainer;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr GetCurrentContainer ( );
    void PutCurrentContainer (
        IUnknown * ppUnk );
    HRESULT Activate ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_CurrentContainer (
        IUnknown * * ppUnk ) = 0;
    virtual HRESULT __stdcall put_CurrentContainer (
        IUnknown * ppUnk ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
};

struct __declspec(uuid("d84cca96-cce2-11d2-9ecc-0000f8085981"))
_WMPCoreEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OpenStateChange (
        long NewState );
    HRESULT PlayStateChange (
        long NewState );
    HRESULT AudioLanguageChange (
        long LangID );
    HRESULT StatusChange ( );
    HRESULT ScriptCommand (
        _bstr_t scType,
        _bstr_t Param );
    HRESULT NewStream ( );
    HRESULT Disconnect (
        long Result );
    HRESULT Buffering (
        VARIANT_BOOL Start );
    HRESULT Error ( );
    HRESULT Warning (
        long WarningType,
        long Param,
        _bstr_t Description );
    HRESULT EndOfStream (
        long Result );
    HRESULT PositionChange (
        double oldPosition,
        double newPosition );
    HRESULT MarkerHit (
        long MarkerNum );
    HRESULT DurationUnitChange (
        long NewDurationUnit );
    HRESULT CdromMediaChange (
        long CdromNum );
    HRESULT PlaylistChange (
        IDispatch * Playlist,
        enum WMPPlaylistChangeEventType change );
    HRESULT CurrentPlaylistChange (
        enum WMPPlaylistChangeEventType change );
    HRESULT CurrentPlaylistItemAvailable (
        _bstr_t bstrItemName );
    HRESULT MediaChange (
        IDispatch * Item );
    HRESULT CurrentMediaItemAvailable (
        _bstr_t bstrItemName );
    HRESULT CurrentItemChange (
        IDispatch * pdispMedia );
    HRESULT MediaCollectionChange ( );
    HRESULT MediaCollectionAttributeStringAdded (
        _bstr_t bstrAttribName,
        _bstr_t bstrAttribVal );
    HRESULT MediaCollectionAttributeStringRemoved (
        _bstr_t bstrAttribName,
        _bstr_t bstrAttribVal );
    HRESULT MediaCollectionAttributeStringChanged (
        _bstr_t bstrAttribName,
        _bstr_t bstrOldAttribVal,
        _bstr_t bstrNewAttribVal );
    HRESULT PlaylistCollectionChange ( );
    HRESULT PlaylistCollectionPlaylistAdded (
        _bstr_t bstrPlaylistName );
    HRESULT PlaylistCollectionPlaylistRemoved (
        _bstr_t bstrPlaylistName );
    HRESULT PlaylistCollectionPlaylistSetAsDeleted (
        _bstr_t bstrPlaylistName,
        VARIANT_BOOL varfIsDeleted );
    HRESULT ModeChange (
        _bstr_t ModeName,
        VARIANT_BOOL NewValue );
    HRESULT MediaError (
        IDispatch * pMediaObject );
    HRESULT OpenPlaylistSwitch (
        IDispatch * pItem );
    HRESULT DomainChange (
        _bstr_t strDomain );
};

struct __declspec(uuid("09428d37-e0b9-11d2-b147-00c04f79faa6"))
WMPCore;
    // [ default ] interface IWMPCore3
    // interface IWMPCore2
    // interface IWMPCore
    // interface IWMPControls
    // interface IWMPPlaylist
    // interface IWMPSettings
    // interface IWMPMedia
    // interface IWMPStringCollection
    // interface IWMPMediaCollection
    // interface IWMPPlaylistCollection
    // interface IWMPCdromCollection
    // interface IWMPCdrom
    // interface IWMPErrorItem
    // interface IWMPClosedCaption
    // interface IWMPError
    // interface IWMPDVD
    // interface IWMPControls2
    // interface IWMPMedia2
    // interface IWMPMedia3
    // interface IWMPMetadataPicture
    // interface IWMPMetadataText
    // interface IWMPSettings2
    // interface IWMPControls3
    // interface IWMPClosedCaption2
    // [ default, source ] dispinterface _WMPCoreEvents

struct __declspec(uuid("6b550945-018f-11d3-b14a-00c04f79faa6"))
IWMPGraphEventHandler : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT NotifyGraphStateChange (
        ULONG_PTR punkGraph,
        long lGraphState );
    HRESULT AsyncNotifyGraphStateChange (
        ULONG_PTR punkGraph,
        long lGraphState );
    HRESULT NotifyRateChange (
        ULONG_PTR punkGraph,
        double dRate );
    HRESULT NotifyPlaybackEnd (
        ULONG_PTR punkGraph,
        _bstr_t bstrQueuedUrl,
        unsigned long dwCurrentContext );
    HRESULT NotifyStreamEnd (
        ULONG_PTR punkGraph );
    HRESULT NotifyScriptCommand (
        ULONG_PTR punkGraph,
        _bstr_t bstrCommand,
        _bstr_t bstrParam );
    HRESULT NotifyEarlyScriptCommand (
        ULONG_PTR punkGraph,
        _bstr_t bstrCommand,
        _bstr_t bstrParam,
        double dTime );
    HRESULT NotifyMarkerHit (
        ULONG_PTR punkGraph,
        long lMarker );
    HRESULT NotifyGraphError (
        ULONG_PTR punkGraph,
        long lErrMajor,
        long lErrMinor,
        long lCondition,
        _bstr_t bstrInfo );
    HRESULT NotifyAcquireCredentials (
        ULONG_PTR punkGraph,
        _bstr_t bstrRealm,
        _bstr_t bstrSite,
        _bstr_t bstrUser,
        _bstr_t bstrPassword,
        unsigned long * pdwFlags,
        VARIANT_BOOL * pfCancel );
    HRESULT NotifyUntrustedLicense (
        ULONG_PTR punkGraph,
        _bstr_t bstrURL,
        VARIANT_BOOL * pfCancel );
    HRESULT NotifyLicenseDialog (
        ULONG_PTR punkGraph,
        _bstr_t bstrURL,
        unsigned char * pPostData,
        unsigned long dwPostDataSize,
        long lResult );
    HRESULT NotifyNeedsIndividualization (
        ULONG_PTR punkGraph,
        VARIANT_BOOL * pfResult );
    HRESULT NotifyNewMetadata (
        ULONG_PTR punkGraph );
    HRESULT NotifyNewMediaCaps (
        ULONG_PTR punkGraph );
    HRESULT NotifyDisconnect (
        ULONG_PTR punkGraph,
        long lResult );
    HRESULT NotifySave (
        ULONG_PTR punkGraph,
        long fStarted,
        long lResult );
    HRESULT NotifyDelayClose (
        ULONG_PTR punkGraph,
        VARIANT_BOOL fDelay );
    HRESULT NotifyDVD (
        ULONG_PTR punkGraph,
        long lEventCode,
        long lParam1,
        long lParam2 );
    HRESULT NotifyRequestAppThreadAction (
        ULONG_PTR punkGraph,
        unsigned long dwAction );
    HRESULT NotifyPrerollReady (
        ULONG_PTR punkGraph );
    HRESULT NotifyNewIcons (
        ULONG_PTR punkGraph );
    HRESULT NotifyStepComplete (
        ULONG_PTR punkGraph );
    HRESULT NotifyNewBitrate (
        ULONG_PTR punkGraph,
        unsigned long dwBitrate );
    HRESULT NotifyGraphCreationPreRender (
        ULONG_PTR punkGraph,
        ULONG_PTR punkFilterGraph,
        ULONG_PTR punkCardeaEncConfig,
        ULONG_PTR phrContinue,
        ULONG_PTR hEventToSet );
    HRESULT NotifyGraphCreationPostRender (
        ULONG_PTR punkGraph,
        ULONG_PTR punkFilterGraph,
        ULONG_PTR phrContinue,
        ULONG_PTR hEventToSet );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_NotifyGraphStateChange (
        ULONG_PTR punkGraph,
        long lGraphState ) = 0;
    virtual HRESULT __stdcall raw_AsyncNotifyGraphStateChange (
        ULONG_PTR punkGraph,
        long lGraphState ) = 0;
    virtual HRESULT __stdcall raw_NotifyRateChange (
        ULONG_PTR punkGraph,
        double dRate ) = 0;
    virtual HRESULT __stdcall raw_NotifyPlaybackEnd (
        ULONG_PTR punkGraph,
        BSTR bstrQueuedUrl,
        unsigned long dwCurrentContext ) = 0;
    virtual HRESULT __stdcall raw_NotifyStreamEnd (
        ULONG_PTR punkGraph ) = 0;
    virtual HRESULT __stdcall raw_NotifyScriptCommand (
        ULONG_PTR punkGraph,
        BSTR bstrCommand,
        BSTR bstrParam ) = 0;
    virtual HRESULT __stdcall raw_NotifyEarlyScriptCommand (
        ULONG_PTR punkGraph,
        BSTR bstrCommand,
        BSTR bstrParam,
        double dTime ) = 0;
    virtual HRESULT __stdcall raw_NotifyMarkerHit (
        ULONG_PTR punkGraph,
        long lMarker ) = 0;
    virtual HRESULT __stdcall raw_NotifyGraphError (
        ULONG_PTR punkGraph,
        long lErrMajor,
        long lErrMinor,
        long lCondition,
        BSTR bstrInfo ) = 0;
    virtual HRESULT __stdcall raw_NotifyAcquireCredentials (
        ULONG_PTR punkGraph,
        BSTR bstrRealm,
        BSTR bstrSite,
        BSTR bstrUser,
        BSTR bstrPassword,
        unsigned long * pdwFlags,
        VARIANT_BOOL * pfCancel ) = 0;
    virtual HRESULT __stdcall raw_NotifyUntrustedLicense (
        ULONG_PTR punkGraph,
        BSTR bstrURL,
        VARIANT_BOOL * pfCancel ) = 0;
    virtual HRESULT __stdcall raw_NotifyLicenseDialog (
        ULONG_PTR punkGraph,
        BSTR bstrURL,
        unsigned char * pPostData,
        unsigned long dwPostDataSize,
        long lResult ) = 0;
    virtual HRESULT __stdcall raw_NotifyNeedsIndividualization (
        ULONG_PTR punkGraph,
        VARIANT_BOOL * pfResult ) = 0;
    virtual HRESULT __stdcall raw_NotifyNewMetadata (
        ULONG_PTR punkGraph ) = 0;
    virtual HRESULT __stdcall raw_NotifyNewMediaCaps (
        ULONG_PTR punkGraph ) = 0;
    virtual HRESULT __stdcall raw_NotifyDisconnect (
        ULONG_PTR punkGraph,
        long lResult ) = 0;
    virtual HRESULT __stdcall raw_NotifySave (
        ULONG_PTR punkGraph,
        long fStarted,
        long lResult ) = 0;
    virtual HRESULT __stdcall raw_NotifyDelayClose (
        ULONG_PTR punkGraph,
        VARIANT_BOOL fDelay ) = 0;
    virtual HRESULT __stdcall raw_NotifyDVD (
        ULONG_PTR punkGraph,
        long lEventCode,
        long lParam1,
        long lParam2 ) = 0;
    virtual HRESULT __stdcall raw_NotifyRequestAppThreadAction (
        ULONG_PTR punkGraph,
        unsigned long dwAction ) = 0;
    virtual HRESULT __stdcall raw_NotifyPrerollReady (
        ULONG_PTR punkGraph ) = 0;
    virtual HRESULT __stdcall raw_NotifyNewIcons (
        ULONG_PTR punkGraph ) = 0;
    virtual HRESULT __stdcall raw_NotifyStepComplete (
        ULONG_PTR punkGraph ) = 0;
    virtual HRESULT __stdcall raw_NotifyNewBitrate (
        ULONG_PTR punkGraph,
        unsigned long dwBitrate ) = 0;
    virtual HRESULT __stdcall raw_NotifyGraphCreationPreRender (
        ULONG_PTR punkGraph,
        ULONG_PTR punkFilterGraph,
        ULONG_PTR punkCardeaEncConfig,
        ULONG_PTR phrContinue,
        ULONG_PTR hEventToSet ) = 0;
    virtual HRESULT __stdcall raw_NotifyGraphCreationPostRender (
        ULONG_PTR punkGraph,
        ULONG_PTR punkFilterGraph,
        ULONG_PTR phrContinue,
        ULONG_PTR hEventToSet ) = 0;
};

struct __declspec(uuid("28682b8e-9055-47a9-a179-8e0bab1164d1"))
IAssaultVis : IDispatch
{};

struct __declspec(uuid("f8578bfa-cd8f-4ce1-a684-5b7e85fca7dc"))
IBattery : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetpresetCount))
    long presetCount;
    __declspec(property(get=Getpreset))
    IDispatchPtr preset[];

    //
    // Wrapper methods for error-handling
    //

    long GetpresetCount ( );
    IDispatchPtr Getpreset (
        long nIndex );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_presetCount (
        long * pVal ) = 0;
    virtual HRESULT __stdcall get_preset (
        long nIndex,
        IDispatch * * ppDispatch ) = 0;
};

struct __declspec(uuid("40c6bde7-9c90-49d4-ad20-bef81a6c5f22"))
IBatteryPreset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Gettitle ( );
    void Puttitle (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_title (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_title (
        BSTR pVal ) = 0;
};

struct __declspec(uuid("f85e2d65-207d-48db-84b1-915e1735db17"))
IBatteryRandomPreset : IBatteryPreset
{};

struct __declspec(uuid("876e7208-0172-4ebb-b08b-2e1d30dfe44c"))
IBatterySavedPreset : IBatteryPreset
{};

struct __declspec(uuid("33e9291a-f6a9-11d2-9435-00a0c92a2f2d"))
IBarsEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdisplayMode,put=PutdisplayMode))
    long displayMode;
    __declspec(property(get=GetshowPeaks,put=PutshowPeaks))
    VARIANT_BOOL showPeaks;
    __declspec(property(get=GetpeakHangTime,put=PutpeakHangTime))
    long peakHangTime;
    __declspec(property(get=GetpeakFallbackAcceleration,put=PutpeakFallbackAcceleration))
    float peakFallbackAcceleration;
    __declspec(property(get=GetpeakFallbackSpeed,put=PutpeakFallbackSpeed))
    float peakFallbackSpeed;
    __declspec(property(get=GetlevelFallbackAcceleration,put=PutlevelFallbackAcceleration))
    float levelFallbackAcceleration;
    __declspec(property(get=GetlevelFallbackSpeed,put=PutlevelFallbackSpeed))
    float levelFallbackSpeed;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetlevelColor,put=PutlevelColor))
    _bstr_t levelColor;
    __declspec(property(get=GetpeakColor,put=PutpeakColor))
    _bstr_t peakColor;
    __declspec(property(get=GethorizontalSpacing,put=PuthorizontalSpacing))
    long horizontalSpacing;
    __declspec(property(get=GetlevelWidth,put=PutlevelWidth))
    long levelWidth;
    __declspec(property(get=GetlevelScale,put=PutlevelScale))
    float levelScale;
    __declspec(property(get=GetfadeRate,put=PutfadeRate))
    long fadeRate;
    __declspec(property(get=GetfadeMode,put=PutfadeMode))
    long fadeMode;
    __declspec(property(get=Gettransparent,put=Puttransparent))
    VARIANT_BOOL transparent;

    //
    // Wrapper methods for error-handling
    //

    long GetdisplayMode ( );
    void PutdisplayMode (
        long pVal );
    VARIANT_BOOL GetshowPeaks ( );
    void PutshowPeaks (
        VARIANT_BOOL pVal );
    long GetpeakHangTime ( );
    void PutpeakHangTime (
        long pVal );
    float GetpeakFallbackAcceleration ( );
    void PutpeakFallbackAcceleration (
        float pVal );
    float GetpeakFallbackSpeed ( );
    void PutpeakFallbackSpeed (
        float pVal );
    float GetlevelFallbackAcceleration ( );
    void PutlevelFallbackAcceleration (
        float pVal );
    float GetlevelFallbackSpeed ( );
    void PutlevelFallbackSpeed (
        float pVal );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    _bstr_t GetlevelColor ( );
    void PutlevelColor (
        _bstr_t pVal );
    _bstr_t GetpeakColor ( );
    void PutpeakColor (
        _bstr_t pVal );
    long GethorizontalSpacing ( );
    void PuthorizontalSpacing (
        long pVal );
    long GetlevelWidth ( );
    void PutlevelWidth (
        long pVal );
    float GetlevelScale ( );
    void PutlevelScale (
        float pVal );
    long GetfadeRate ( );
    void PutfadeRate (
        long pVal );
    long GetfadeMode ( );
    void PutfadeMode (
        long pVal );
    VARIANT_BOOL Gettransparent ( );
    void Puttransparent (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_displayMode (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_displayMode (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_showPeaks (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_showPeaks (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_peakHangTime (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_peakHangTime (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_peakFallbackAcceleration (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_peakFallbackAcceleration (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_peakFallbackSpeed (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_peakFallbackSpeed (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_levelFallbackAcceleration (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_levelFallbackAcceleration (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_levelFallbackSpeed (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_levelFallbackSpeed (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_backgroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_levelColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_levelColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_peakColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_peakColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_horizontalSpacing (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_horizontalSpacing (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_levelWidth (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_levelWidth (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_levelScale (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_levelScale (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_fadeRate (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_fadeRate (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_fadeMode (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_fadeMode (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_transparent (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_transparent (
        VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("3984e7eb-08ef-11d3-9447-00a0c92a2f2d"))
ISpikesEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetforegroundColor,put=PutforegroundColor))
    _bstr_t foregroundColor;
    __declspec(property(get=GetdisplayMode,put=PutdisplayMode))
    long displayMode;
    __declspec(property(get=GetfallbackSpeed,put=PutfallbackSpeed))
    float fallbackSpeed;
    __declspec(property(get=Gettransparent,put=Puttransparent))
    VARIANT_BOOL transparent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    _bstr_t GetforegroundColor ( );
    void PutforegroundColor (
        _bstr_t pVal );
    long GetdisplayMode ( );
    void PutdisplayMode (
        long pVal );
    float GetfallbackSpeed ( );
    void PutfallbackSpeed (
        float pVal );
    VARIANT_BOOL Gettransparent ( );
    void Puttransparent (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_backgroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_foregroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_foregroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_displayMode (
        long * pVal ) = 0;
    virtual HRESULT __stdcall put_displayMode (
        long pVal ) = 0;
    virtual HRESULT __stdcall get_fallbackSpeed (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_fallbackSpeed (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_transparent (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_transparent (
        VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("37327700-ef20-11d2-9431-00a0c92a2f2d"))
IDotPlaneEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetcameraDistance,put=PutcameraDistance))
    float cameraDistance;
    __declspec(property(get=GetfallbackAcceleration,put=PutfallbackAcceleration))
    float fallbackAcceleration;
    __declspec(property(get=GetfallbackSpeed,put=PutfallbackSpeed))
    float fallbackSpeed;
    __declspec(property(get=GetspinZ,put=PutspinZ))
    VARIANT_BOOL spinZ;
    __declspec(property(get=GetspinX,put=PutspinX))
    VARIANT_BOOL spinX;
    __declspec(property(get=GetspinY,put=PutspinY))
    VARIANT_BOOL spinY;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetfadeColor1,put=PutfadeColor1))
    _bstr_t fadeColor1;
    __declspec(property(get=GetfadeColor2,put=PutfadeColor2))
    _bstr_t fadeColor2;
    __declspec(property(get=GetfadeColor3,put=PutfadeColor3))
    _bstr_t fadeColor3;
    __declspec(property(get=GetfadeColor4,put=PutfadeColor4))
    _bstr_t fadeColor4;
    __declspec(property(get=GetfadeColor5,put=PutfadeColor5))
    _bstr_t fadeColor5;
    __declspec(property(get=Gettransparent,put=Puttransparent))
    VARIANT_BOOL transparent;

    //
    // Wrapper methods for error-handling
    //

    float GetcameraDistance ( );
    void PutcameraDistance (
        float pVal );
    float GetfallbackAcceleration ( );
    void PutfallbackAcceleration (
        float pVal );
    float GetfallbackSpeed ( );
    void PutfallbackSpeed (
        float pVal );
    VARIANT_BOOL GetspinZ ( );
    void PutspinZ (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetspinX ( );
    void PutspinX (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetspinY ( );
    void PutspinY (
        VARIANT_BOOL pVal );
    HRESULT reset ( );
    HRESULT stopSpin ( );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    _bstr_t GetfadeColor1 ( );
    void PutfadeColor1 (
        _bstr_t pVal );
    _bstr_t GetfadeColor2 ( );
    void PutfadeColor2 (
        _bstr_t pVal );
    _bstr_t GetfadeColor3 ( );
    void PutfadeColor3 (
        _bstr_t pVal );
    _bstr_t GetfadeColor4 ( );
    void PutfadeColor4 (
        _bstr_t pVal );
    _bstr_t GetfadeColor5 ( );
    void PutfadeColor5 (
        _bstr_t pVal );
    VARIANT_BOOL Gettransparent ( );
    void Puttransparent (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_cameraDistance (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_cameraDistance (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_fallbackAcceleration (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_fallbackAcceleration (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_fallbackSpeed (
        float * pVal ) = 0;
    virtual HRESULT __stdcall put_fallbackSpeed (
        float pVal ) = 0;
    virtual HRESULT __stdcall get_spinZ (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_spinZ (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_spinX (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_spinX (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall get_spinY (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_spinY (
        VARIANT_BOOL pVal ) = 0;
    virtual HRESULT __stdcall raw_reset ( ) = 0;
    virtual HRESULT __stdcall raw_stopSpin ( ) = 0;
    virtual HRESULT __stdcall get_backgroundColor (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_backgroundColor (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fadeColor1 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_fadeColor1 (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fadeColor2 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_fadeColor2 (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fadeColor3 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_fadeColor3 (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fadeColor4 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_fadeColor4 (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_fadeColor5 (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_fadeColor5 (
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_transparent (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall put_transparent (
        VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("e31e7583-32d5-491c-b611-825d032b02cf"))
IPlenoptic : IDispatch
{};

struct __declspec(uuid("e2cc638c-fd2c-409b-a1ea-5ddb72dc8e84"))
IWMPExternal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutOnColorChange))
    IDispatchPtr OnColorChange;
    __declspec(property(get=Getversion))
    _bstr_t version;
    __declspec(property(get=GetappColorLight))
    _bstr_t appColorLight;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getversion ( );
    _bstr_t GetappColorLight ( );
    void PutOnColorChange (
        IDispatch * _arg1 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_version (
        BSTR * pBSTR ) = 0;
    virtual HRESULT __stdcall get_appColorLight (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall put_OnColorChange (
        IDispatch * _arg1 ) = 0;
};

struct __declspec(uuid("d10ccdff-472d-498c-b5fe-3630e5405e0a"))
IWMPExternalColors : IWMPExternal
{
    //
    // Property data
    //

    __declspec(property(get=GetappColorButtonShadow))
    _bstr_t appColorButtonShadow;
    __declspec(property(get=GetappColorButtonHoverFace))
    _bstr_t appColorButtonHoverFace;
    __declspec(property(get=GetappColorMedium))
    _bstr_t appColorMedium;
    __declspec(property(get=GetappColorDark))
    _bstr_t appColorDark;
    __declspec(property(get=GetappColorButtonHighlight))
    _bstr_t appColorButtonHighlight;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetappColorMedium ( );
    _bstr_t GetappColorDark ( );
    _bstr_t GetappColorButtonHighlight ( );
    _bstr_t GetappColorButtonShadow ( );
    _bstr_t GetappColorButtonHoverFace ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_appColorMedium (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall get_appColorDark (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall get_appColorButtonHighlight (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall get_appColorButtonShadow (
        BSTR * pbstrColor ) = 0;
    virtual HRESULT __stdcall get_appColorButtonHoverFace (
        BSTR * pbstrColor ) = 0;
};

struct __declspec(uuid("54df358e-cf38-4010-99f1-f44b0e9000e5"))
IWMPSubscriptionServiceLimited : IWMPExternalColors
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedTaskPane,put=PutSelectedTaskPane))
    _bstr_t SelectedTaskPane;

    //
    // Wrapper methods for error-handling
    //

    HRESULT NavigateTaskPaneURL (
        _bstr_t bstrKeyName,
        _bstr_t bstrTaskPane,
        _bstr_t bstrParams );
    void PutSelectedTaskPane (
        _bstr_t bstrTaskPane );
    _bstr_t GetSelectedTaskPane ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_NavigateTaskPaneURL (
        BSTR bstrKeyName,
        BSTR bstrTaskPane,
        BSTR bstrParams ) = 0;
    virtual HRESULT __stdcall put_SelectedTaskPane (
        BSTR bstrTaskPane ) = 0;
    virtual HRESULT __stdcall get_SelectedTaskPane (
        BSTR * bstrTaskPane ) = 0;
};

struct __declspec(uuid("2e922378-ee70-4ceb-bbab-ce7ce4a04816"))
IWMPSubscriptionServiceExternal : IWMPSubscriptionServiceLimited
{
    //
    // Property data
    //

    __declspec(property(get=GetDownloadManager))
    IWMPDownloadManagerPtr DownloadManager;

    //
    // Wrapper methods for error-handling
    //

    IWMPDownloadManagerPtr GetDownloadManager ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_DownloadManager (
        struct IWMPDownloadManager * * ppDownloadMgr ) = 0;
};

struct __declspec(uuid("e15e9ad1-8f20-4cc4-9ec7-1a328ca86a0d"))
IWMPDownloadManager : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IWMPDownloadCollectionPtr getDownloadCollection (
        long lCollectionId );
    IWMPDownloadCollectionPtr createDownloadCollection ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_getDownloadCollection (
        long lCollectionId,
        struct IWMPDownloadCollection * * ppCollection ) = 0;
    virtual HRESULT __stdcall raw_createDownloadCollection (
        struct IWMPDownloadCollection * * ppCollection ) = 0;
};

struct __declspec(uuid("0a319c7f-85f9-436c-b88e-82fd88000e1c"))
IWMPDownloadCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getid))
    long id;
    __declspec(property(get=Getcount))
    long count;

    //
    // Wrapper methods for error-handling
    //

    long Getid ( );
    long Getcount ( );
    IWMPDownloadItem2Ptr Item (
        long lItem );
    IWMPDownloadItem2Ptr startDownload (
        _bstr_t bstrSourceURL,
        _bstr_t bstrType );
    HRESULT removeItem (
        long lItem );
    HRESULT clear ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_id (
        long * plId ) = 0;
    virtual HRESULT __stdcall get_count (
        long * plCount ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long lItem,
        struct IWMPDownloadItem2 * * ppDownload ) = 0;
    virtual HRESULT __stdcall raw_startDownload (
        BSTR bstrSourceURL,
        BSTR bstrType,
        struct IWMPDownloadItem2 * * ppDownload ) = 0;
    virtual HRESULT __stdcall raw_removeItem (
        long lItem ) = 0;
    virtual HRESULT __stdcall raw_clear ( ) = 0;
};

struct __declspec(uuid("c9470e8e-3f6b-46a9-a0a9-452815c34297"))
IWMPDownloadItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetsourceURL))
    _bstr_t sourceURL;
    __declspec(property(get=Getsize))
    long size;
    __declspec(property(get=Gettype))
    _bstr_t type;
    __declspec(property(get=Getprogress))
    long progress;
    __declspec(property(get=GetdownloadState))
    enum WMPSubscriptionDownloadState downloadState;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetsourceURL ( );
    long Getsize ( );
    _bstr_t Gettype ( );
    long Getprogress ( );
    enum WMPSubscriptionDownloadState GetdownloadState ( );
    HRESULT pause ( );
    HRESULT resume ( );
    HRESULT cancel ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_sourceURL (
        BSTR * pbstrURL ) = 0;
    virtual HRESULT __stdcall get_size (
        long * plSize ) = 0;
    virtual HRESULT __stdcall get_type (
        BSTR * pbstrType ) = 0;
    virtual HRESULT __stdcall get_progress (
        long * plProgress ) = 0;
    virtual HRESULT __stdcall get_downloadState (
        enum WMPSubscriptionDownloadState * pwmpsdls ) = 0;
    virtual HRESULT __stdcall raw_pause ( ) = 0;
    virtual HRESULT __stdcall raw_resume ( ) = 0;
    virtual HRESULT __stdcall raw_cancel ( ) = 0;
};

struct __declspec(uuid("9fbb3336-6da3-479d-b8ff-67d46e20a987"))
IWMPDownloadItem2 : IWMPDownloadItem
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getItemInfo (
        _bstr_t bstrItemName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_getItemInfo (
        BSTR bstrItemName,
        BSTR * pbstrVal ) = 0;
};

enum WMPSubscriptionDownloadState
{
    wmpsdlsDownloading = 0,
    wmpsdlsPaused = 1,
    wmpsdlsProcessing = 2,
    wmpsdlsCompleted = 3,
    wmpsdlsCancelled = 4
};

struct __declspec(uuid("5f0248c1-62b3-42d7-b927-029119e6ad14"))
IWMPSubscriptionServicePlayMedia : IWMPSubscriptionServiceLimited
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT playMedia (
        _bstr_t bstrURL );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_playMedia (
        BSTR bstrURL ) = 0;
};

struct __declspec(uuid("2d7ef888-1d3c-484a-a906-9f49d99bb344"))
IWMPCDDVDWizardExternal : IWMPExternalColors
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT WriteNames (
        _bstr_t bstrTOC,
        _bstr_t bstrMetadata );
    HRESULT ReturnToMainTask ( );
    HRESULT WriteNamesEx (
        enum WMP_WRITENAMESEX_TYPE type,
        _bstr_t bstrTypeId,
        _bstr_t bstrMetadata,
        VARIANT_BOOL fRenameRegroupFiles );
    _bstr_t GetMDQByRequestID (
        _bstr_t bstrRequestID );
    HRESULT EditMetadata ( );
    VARIANT_BOOL IsMetadataAvailableForEdit ( );
    HRESULT BuyCD (
        _bstr_t bstrTitle,
        _bstr_t bstrArtist,
        _bstr_t bstrAlbum,
        _bstr_t bstrUFID,
        _bstr_t bstrWMID );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_WriteNames (
        BSTR bstrTOC,
        BSTR bstrMetadata ) = 0;
    virtual HRESULT __stdcall raw_ReturnToMainTask ( ) = 0;
    virtual HRESULT __stdcall raw_WriteNamesEx (
        enum WMP_WRITENAMESEX_TYPE type,
        BSTR bstrTypeId,
        BSTR bstrMetadata,
        VARIANT_BOOL fRenameRegroupFiles ) = 0;
    virtual HRESULT __stdcall raw_GetMDQByRequestID (
        BSTR bstrRequestID,
        BSTR * pbstrMDQ ) = 0;
    virtual HRESULT __stdcall raw_EditMetadata ( ) = 0;
    virtual HRESULT __stdcall raw_IsMetadataAvailableForEdit (
        VARIANT_BOOL * pbIsAvailable ) = 0;
    virtual HRESULT __stdcall raw_BuyCD (
        BSTR bstrTitle,
        BSTR bstrArtist,
        BSTR bstrAlbum,
        BSTR bstrUFID,
        BSTR bstrWMID ) = 0;
};

enum WMP_WRITENAMESEX_TYPE
{
    WMP_WRITENAMES_TYPE_CD_BY_TOC = 0,
    WMP_WRITENAMES_TYPE_CD_BY_CONTENT_ID = 1,
    WMP_WRITENAMES_TYPE_CD_BY_MDQCD = 2,
    WMP_WRITENAMES_TYPE_DVD_BY_DVDID = 3
};

struct __declspec(uuid("f81b2a59-02bc-4003-8b2f-c124af66fc66"))
IWMPBaseExternal : IWMPExternal
{};

struct __declspec(uuid("3148e685-b243-423d-8341-8480d6eff674"))
IWMPOfflineExternal : IWMPExternal
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT forceOnline ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_forceOnline ( ) = 0;
};

//
// Function implementation mapping
//

//#pragma start_map_region("e:\popwin\popwin\tmp\wmp.tli")
#pragma start_map_region("wmp.tli")
__declspec(implementation_key(1)) _bstr_t IWMPSyncDevice::GetfriendlyName ( );
__declspec(implementation_key(2)) void IWMPSyncDevice::PutfriendlyName ( _bstr_t pbstrName );
__declspec(implementation_key(3)) _bstr_t IWMPSyncDevice::GetdeviceName ( );
__declspec(implementation_key(4)) _bstr_t IWMPSyncDevice::GetdeviceId ( );
__declspec(implementation_key(5)) long IWMPSyncDevice::GetpartnershipIndex ( );
__declspec(implementation_key(6)) VARIANT_BOOL IWMPSyncDevice::Getconnected ( );
__declspec(implementation_key(7)) enum WMPDeviceStatus IWMPSyncDevice::Getstatus ( );
__declspec(implementation_key(8)) enum WMPSyncState IWMPSyncDevice::GetsyncState ( );
__declspec(implementation_key(9)) long IWMPSyncDevice::Getprogress ( );
__declspec(implementation_key(10)) _bstr_t IWMPSyncDevice::getItemInfo ( _bstr_t bstrItemName );
__declspec(implementation_key(11)) HRESULT IWMPSyncDevice::createPartnership ( VARIANT_BOOL vbShowUI );
__declspec(implementation_key(12)) HRESULT IWMPSyncDevice::deletePartnership ( );
__declspec(implementation_key(13)) HRESULT IWMPSyncDevice::Start ( );
__declspec(implementation_key(14)) HRESULT IWMPSyncDevice::stop ( );
__declspec(implementation_key(15)) HRESULT IWMPSyncDevice::showSettings ( );
__declspec(implementation_key(16)) VARIANT_BOOL IWMPSyncDevice::isIdentical ( struct IWMPSyncDevice * pDevice );
__declspec(implementation_key(17)) HRESULT _WMPOCXEvents::OpenStateChange ( long NewState );
__declspec(implementation_key(18)) HRESULT _WMPOCXEvents::PlayStateChange ( long NewState );
__declspec(implementation_key(19)) HRESULT _WMPOCXEvents::AudioLanguageChange ( long LangID );
__declspec(implementation_key(20)) HRESULT _WMPOCXEvents::StatusChange ( );
__declspec(implementation_key(21)) HRESULT _WMPOCXEvents::ScriptCommand ( _bstr_t scType, _bstr_t Param );
__declspec(implementation_key(22)) HRESULT _WMPOCXEvents::NewStream ( );
__declspec(implementation_key(23)) HRESULT _WMPOCXEvents::Disconnect ( long Result );
__declspec(implementation_key(24)) HRESULT _WMPOCXEvents::Buffering ( VARIANT_BOOL Start );
__declspec(implementation_key(25)) HRESULT _WMPOCXEvents::Error ( );
__declspec(implementation_key(26)) HRESULT _WMPOCXEvents::Warning ( long WarningType, long Param, _bstr_t Description );
__declspec(implementation_key(27)) HRESULT _WMPOCXEvents::EndOfStream ( long Result );
__declspec(implementation_key(28)) HRESULT _WMPOCXEvents::PositionChange ( double oldPosition, double newPosition );
__declspec(implementation_key(29)) HRESULT _WMPOCXEvents::MarkerHit ( long MarkerNum );
__declspec(implementation_key(30)) HRESULT _WMPOCXEvents::DurationUnitChange ( long NewDurationUnit );
__declspec(implementation_key(31)) HRESULT _WMPOCXEvents::CdromMediaChange ( long CdromNum );
__declspec(implementation_key(32)) HRESULT _WMPOCXEvents::PlaylistChange ( IDispatch * Playlist, enum WMPPlaylistChangeEventType change );
__declspec(implementation_key(33)) HRESULT _WMPOCXEvents::CurrentPlaylistChange ( enum WMPPlaylistChangeEventType change );
__declspec(implementation_key(34)) HRESULT _WMPOCXEvents::CurrentPlaylistItemAvailable ( _bstr_t bstrItemName );
__declspec(implementation_key(35)) HRESULT _WMPOCXEvents::MediaChange ( IDispatch * Item );
__declspec(implementation_key(36)) HRESULT _WMPOCXEvents::CurrentMediaItemAvailable ( _bstr_t bstrItemName );
__declspec(implementation_key(37)) HRESULT _WMPOCXEvents::CurrentItemChange ( IDispatch * pdispMedia );
__declspec(implementation_key(38)) HRESULT _WMPOCXEvents::MediaCollectionChange ( );
__declspec(implementation_key(39)) HRESULT _WMPOCXEvents::MediaCollectionAttributeStringAdded ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal );
__declspec(implementation_key(40)) HRESULT _WMPOCXEvents::MediaCollectionAttributeStringRemoved ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal );
__declspec(implementation_key(41)) HRESULT _WMPOCXEvents::MediaCollectionAttributeStringChanged ( _bstr_t bstrAttribName, _bstr_t bstrOldAttribVal, _bstr_t bstrNewAttribVal );
__declspec(implementation_key(42)) HRESULT _WMPOCXEvents::PlaylistCollectionChange ( );
__declspec(implementation_key(43)) HRESULT _WMPOCXEvents::PlaylistCollectionPlaylistAdded ( _bstr_t bstrPlaylistName );
__declspec(implementation_key(44)) HRESULT _WMPOCXEvents::PlaylistCollectionPlaylistRemoved ( _bstr_t bstrPlaylistName );
__declspec(implementation_key(45)) HRESULT _WMPOCXEvents::PlaylistCollectionPlaylistSetAsDeleted ( _bstr_t bstrPlaylistName, VARIANT_BOOL varfIsDeleted );
__declspec(implementation_key(46)) HRESULT _WMPOCXEvents::ModeChange ( _bstr_t ModeName, VARIANT_BOOL NewValue );
__declspec(implementation_key(47)) HRESULT _WMPOCXEvents::MediaError ( IDispatch * pMediaObject );
__declspec(implementation_key(48)) HRESULT _WMPOCXEvents::OpenPlaylistSwitch ( IDispatch * pItem );
__declspec(implementation_key(49)) HRESULT _WMPOCXEvents::DomainChange ( _bstr_t strDomain );
__declspec(implementation_key(50)) HRESULT _WMPOCXEvents::SwitchedToPlayerApplication ( );
__declspec(implementation_key(51)) HRESULT _WMPOCXEvents::SwitchedToControl ( );
__declspec(implementation_key(52)) HRESULT _WMPOCXEvents::PlayerDockedStateChange ( );
__declspec(implementation_key(53)) HRESULT _WMPOCXEvents::PlayerReconnect ( );
__declspec(implementation_key(54)) HRESULT _WMPOCXEvents::Click ( short nButton, short nShiftState, long fX, long fY );
__declspec(implementation_key(55)) HRESULT _WMPOCXEvents::DoubleClick ( short nButton, short nShiftState, long fX, long fY );
__declspec(implementation_key(56)) HRESULT _WMPOCXEvents::KeyDown ( short nKeyCode, short nShiftState );
__declspec(implementation_key(57)) HRESULT _WMPOCXEvents::KeyPress ( short nKeyAscii );
__declspec(implementation_key(58)) HRESULT _WMPOCXEvents::KeyUp ( short nKeyCode, short nShiftState );
__declspec(implementation_key(59)) HRESULT _WMPOCXEvents::MouseDown ( short nButton, short nShiftState, long fX, long fY );
__declspec(implementation_key(60)) HRESULT _WMPOCXEvents::MouseMove ( short nButton, short nShiftState, long fX, long fY );
__declspec(implementation_key(61)) HRESULT _WMPOCXEvents::MouseUp ( short nButton, short nShiftState, long fX, long fY );
__declspec(implementation_key(62)) HRESULT _WMPOCXEvents::DeviceConnect ( struct IWMPSyncDevice * pDevice );
__declspec(implementation_key(63)) HRESULT _WMPOCXEvents::DeviceDisconnect ( struct IWMPSyncDevice * pDevice );
__declspec(implementation_key(64)) HRESULT _WMPOCXEvents::DeviceStatusChange ( struct IWMPSyncDevice * pDevice, enum WMPDeviceStatus NewStatus );
__declspec(implementation_key(65)) HRESULT _WMPOCXEvents::DeviceSyncStateChange ( struct IWMPSyncDevice * pDevice, enum WMPSyncState NewState );
__declspec(implementation_key(66)) HRESULT _WMPOCXEvents::DeviceSyncError ( struct IWMPSyncDevice * pDevice, IDispatch * pMedia );
__declspec(implementation_key(67)) HRESULT _WMPOCXEvents::CreatePartnershipComplete ( struct IWMPSyncDevice * pDevice, HRESULT hrResult );
__declspec(implementation_key(68)) HRESULT IWMPCore::close ( );
__declspec(implementation_key(69)) _bstr_t IWMPCore::GetURL ( );
__declspec(implementation_key(70)) void IWMPCore::PutURL ( _bstr_t pbstrURL );
__declspec(implementation_key(71)) enum WMPOpenState IWMPCore::GetopenState ( );
__declspec(implementation_key(72)) enum WMPPlayState IWMPCore::GetplayState ( );
__declspec(implementation_key(73)) IWMPControlsPtr IWMPCore::Getcontrols ( );
__declspec(implementation_key(74)) IWMPSettingsPtr IWMPCore::Getsettings ( );
__declspec(implementation_key(75)) IWMPMediaPtr IWMPCore::GetcurrentMedia ( );
__declspec(implementation_key(76)) void IWMPCore::PutcurrentMedia ( struct IWMPMedia * ppMedia );
__declspec(implementation_key(77)) IWMPMediaCollectionPtr IWMPCore::GetmediaCollection ( );
__declspec(implementation_key(78)) IWMPPlaylistCollectionPtr IWMPCore::GetplaylistCollection ( );
__declspec(implementation_key(79)) _bstr_t IWMPCore::GetversionInfo ( );
__declspec(implementation_key(80)) HRESULT IWMPCore::launchURL ( _bstr_t bstrURL );
__declspec(implementation_key(81)) IWMPNetworkPtr IWMPCore::Getnetwork ( );
__declspec(implementation_key(82)) IWMPPlaylistPtr IWMPCore::GetcurrentPlaylist ( );
__declspec(implementation_key(83)) void IWMPCore::PutcurrentPlaylist ( struct IWMPPlaylist * ppPL );
__declspec(implementation_key(84)) IWMPCdromCollectionPtr IWMPCore::GetcdromCollection ( );
__declspec(implementation_key(85)) IWMPClosedCaptionPtr IWMPCore::GetclosedCaption ( );
__declspec(implementation_key(86)) VARIANT_BOOL IWMPCore::GetisOnline ( );
__declspec(implementation_key(87)) IWMPErrorPtr IWMPCore::GetError ( );
__declspec(implementation_key(88)) _bstr_t IWMPCore::Getstatus ( );
__declspec(implementation_key(89)) IWMPDVDPtr IWMPCore2::Getdvd ( );
__declspec(implementation_key(90)) IWMPPlaylistPtr IWMPCore3::newPlaylist ( _bstr_t bstrName, _bstr_t bstrURL );
__declspec(implementation_key(91)) IWMPMediaPtr IWMPCore3::newMedia ( _bstr_t bstrURL );
__declspec(implementation_key(92)) VARIANT_BOOL IWMPPlayer4::Getenabled ( );
__declspec(implementation_key(93)) void IWMPPlayer4::Putenabled ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(94)) VARIANT_BOOL IWMPPlayer4::GetfullScreen ( );
__declspec(implementation_key(95)) void IWMPPlayer4::PutfullScreen ( VARIANT_BOOL pbFullScreen );
__declspec(implementation_key(96)) VARIANT_BOOL IWMPPlayer4::GetenableContextMenu ( );
__declspec(implementation_key(97)) void IWMPPlayer4::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu );
__declspec(implementation_key(98)) void IWMPPlayer4::PutuiMode ( _bstr_t pbstrMode );
__declspec(implementation_key(99)) _bstr_t IWMPPlayer4::GetuiMode ( );
__declspec(implementation_key(100)) VARIANT_BOOL IWMPPlayer4::GetstretchToFit ( );
__declspec(implementation_key(101)) void IWMPPlayer4::PutstretchToFit ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(102)) VARIANT_BOOL IWMPPlayer4::GetwindowlessVideo ( );
__declspec(implementation_key(103)) void IWMPPlayer4::PutwindowlessVideo ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(104)) VARIANT_BOOL IWMPPlayer4::GetisRemote ( );
__declspec(implementation_key(105)) IWMPPlayerApplicationPtr IWMPPlayer4::GetplayerApplication ( );
__declspec(implementation_key(106)) HRESULT IWMPPlayer4::openPlayer ( _bstr_t bstrURL );
__declspec(implementation_key(107)) VARIANT_BOOL IWMPControls::GetisAvailable ( _bstr_t bstrItem );
__declspec(implementation_key(108)) HRESULT IWMPControls::play ( );
__declspec(implementation_key(109)) HRESULT IWMPControls::stop ( );
__declspec(implementation_key(110)) HRESULT IWMPControls::pause ( );
__declspec(implementation_key(111)) HRESULT IWMPControls::fastForward ( );
__declspec(implementation_key(112)) HRESULT IWMPControls::fastReverse ( );
__declspec(implementation_key(113)) double IWMPControls::GetcurrentPosition ( );
__declspec(implementation_key(114)) void IWMPControls::PutcurrentPosition ( double pdCurrentPosition );
__declspec(implementation_key(115)) _bstr_t IWMPControls::GetcurrentPositionString ( );
__declspec(implementation_key(116)) HRESULT IWMPControls::next ( );
__declspec(implementation_key(117)) HRESULT IWMPControls::previous ( );
__declspec(implementation_key(118)) IWMPMediaPtr IWMPControls::GetcurrentItem ( );
__declspec(implementation_key(119)) void IWMPControls::PutcurrentItem ( struct IWMPMedia * ppIWMPMedia );
__declspec(implementation_key(120)) long IWMPControls::GetcurrentMarker ( );
__declspec(implementation_key(121)) void IWMPControls::PutcurrentMarker ( long plMarker );
__declspec(implementation_key(122)) HRESULT IWMPControls::playItem ( struct IWMPMedia * pIWMPMedia );
__declspec(implementation_key(123)) VARIANT_BOOL IWMPMedia::GetisIdentical ( struct IWMPMedia * pIWMPMedia );
__declspec(implementation_key(124)) _bstr_t IWMPMedia::GetsourceURL ( );
__declspec(implementation_key(125)) _bstr_t IWMPMedia::Getname ( );
__declspec(implementation_key(126)) void IWMPMedia::Putname ( _bstr_t pbstrName );
__declspec(implementation_key(127)) long IWMPMedia::GetimageSourceWidth ( );
__declspec(implementation_key(128)) long IWMPMedia::GetimageSourceHeight ( );
__declspec(implementation_key(129)) long IWMPMedia::GetmarkerCount ( );
__declspec(implementation_key(130)) double IWMPMedia::getMarkerTime ( long MarkerNum );
__declspec(implementation_key(131)) _bstr_t IWMPMedia::getMarkerName ( long MarkerNum );
__declspec(implementation_key(132)) double IWMPMedia::Getduration ( );
__declspec(implementation_key(133)) _bstr_t IWMPMedia::GetdurationString ( );
__declspec(implementation_key(134)) long IWMPMedia::GetattributeCount ( );
__declspec(implementation_key(135)) _bstr_t IWMPMedia::getAttributeName ( long lIndex );
__declspec(implementation_key(136)) _bstr_t IWMPMedia::getItemInfo ( _bstr_t bstrItemName );
__declspec(implementation_key(137)) HRESULT IWMPMedia::setItemInfo ( _bstr_t bstrItemName, _bstr_t bstrVal );
__declspec(implementation_key(138)) _bstr_t IWMPMedia::getItemInfoByAtom ( long lAtom );
__declspec(implementation_key(139)) VARIANT_BOOL IWMPMedia::isMemberOf ( struct IWMPPlaylist * pPlaylist );
__declspec(implementation_key(140)) VARIANT_BOOL IWMPMedia::isReadOnlyItem ( _bstr_t bstrItemName );
__declspec(implementation_key(141)) long IWMPPlaylist::Getcount ( );
__declspec(implementation_key(142)) _bstr_t IWMPPlaylist::Getname ( );
__declspec(implementation_key(143)) void IWMPPlaylist::Putname ( _bstr_t pbstrName );
__declspec(implementation_key(144)) long IWMPPlaylist::GetattributeCount ( );
__declspec(implementation_key(145)) _bstr_t IWMPPlaylist::GetattributeName ( long lIndex );
__declspec(implementation_key(146)) IWMPMediaPtr IWMPPlaylist::GetItem ( long lIndex );
__declspec(implementation_key(147)) _bstr_t IWMPPlaylist::getItemInfo ( _bstr_t bstrName );
__declspec(implementation_key(148)) HRESULT IWMPPlaylist::setItemInfo ( _bstr_t bstrName, _bstr_t bstrValue );
__declspec(implementation_key(149)) VARIANT_BOOL IWMPPlaylist::GetisIdentical ( struct IWMPPlaylist * pIWMPPlaylist );
__declspec(implementation_key(150)) HRESULT IWMPPlaylist::clear ( );
__declspec(implementation_key(151)) HRESULT IWMPPlaylist::insertItem ( long lIndex, struct IWMPMedia * pIWMPMedia );
__declspec(implementation_key(152)) HRESULT IWMPPlaylist::appendItem ( struct IWMPMedia * pIWMPMedia );
__declspec(implementation_key(153)) HRESULT IWMPPlaylist::removeItem ( struct IWMPMedia * pIWMPMedia );
__declspec(implementation_key(154)) HRESULT IWMPPlaylist::moveItem ( long lIndexOld, long lIndexNew );
__declspec(implementation_key(155)) VARIANT_BOOL IWMPSettings::GetisAvailable ( _bstr_t bstrItem );
__declspec(implementation_key(156)) VARIANT_BOOL IWMPSettings::GetautoStart ( );
__declspec(implementation_key(157)) void IWMPSettings::PutautoStart ( VARIANT_BOOL pfAutoStart );
__declspec(implementation_key(158)) _bstr_t IWMPSettings::GetbaseURL ( );
__declspec(implementation_key(159)) void IWMPSettings::PutbaseURL ( _bstr_t pbstrBaseURL );
__declspec(implementation_key(160)) _bstr_t IWMPSettings::GetdefaultFrame ( );
__declspec(implementation_key(161)) void IWMPSettings::PutdefaultFrame ( _bstr_t pbstrDefaultFrame );
__declspec(implementation_key(162)) VARIANT_BOOL IWMPSettings::GetinvokeURLs ( );
__declspec(implementation_key(163)) void IWMPSettings::PutinvokeURLs ( VARIANT_BOOL pfInvokeURLs );
__declspec(implementation_key(164)) VARIANT_BOOL IWMPSettings::Getmute ( );
__declspec(implementation_key(165)) void IWMPSettings::Putmute ( VARIANT_BOOL pfMute );
__declspec(implementation_key(166)) long IWMPSettings::GetplayCount ( );
__declspec(implementation_key(167)) void IWMPSettings::PutplayCount ( long plCount );
__declspec(implementation_key(168)) double IWMPSettings::Getrate ( );
__declspec(implementation_key(169)) void IWMPSettings::Putrate ( double pdRate );
__declspec(implementation_key(170)) long IWMPSettings::Getbalance ( );
__declspec(implementation_key(171)) void IWMPSettings::Putbalance ( long plBalance );
__declspec(implementation_key(172)) long IWMPSettings::Getvolume ( );
__declspec(implementation_key(173)) void IWMPSettings::Putvolume ( long plVolume );
__declspec(implementation_key(174)) VARIANT_BOOL IWMPSettings::getMode ( _bstr_t bstrMode );
__declspec(implementation_key(175)) HRESULT IWMPSettings::setMode ( _bstr_t bstrMode, VARIANT_BOOL varfMode );
__declspec(implementation_key(176)) VARIANT_BOOL IWMPSettings::GetenableErrorDialogs ( );
__declspec(implementation_key(177)) void IWMPSettings::PutenableErrorDialogs ( VARIANT_BOOL pfEnableErrorDialogs );
__declspec(implementation_key(178)) IWMPMediaPtr IWMPMediaCollection::add ( _bstr_t bstrURL );
__declspec(implementation_key(179)) IWMPPlaylistPtr IWMPMediaCollection::getAll ( );
__declspec(implementation_key(180)) IWMPPlaylistPtr IWMPMediaCollection::getByName ( _bstr_t bstrName );
__declspec(implementation_key(181)) IWMPPlaylistPtr IWMPMediaCollection::getByGenre ( _bstr_t bstrGenre );
__declspec(implementation_key(182)) IWMPPlaylistPtr IWMPMediaCollection::getByAuthor ( _bstr_t bstrAuthor );
__declspec(implementation_key(183)) IWMPPlaylistPtr IWMPMediaCollection::getByAlbum ( _bstr_t bstrAlbum );
__declspec(implementation_key(184)) IWMPPlaylistPtr IWMPMediaCollection::getByAttribute ( _bstr_t bstrAttribute, _bstr_t bstrValue );
__declspec(implementation_key(185)) HRESULT IWMPMediaCollection::remove ( struct IWMPMedia * pItem, VARIANT_BOOL varfDeleteFile );
__declspec(implementation_key(186)) IWMPStringCollectionPtr IWMPMediaCollection::getAttributeStringCollection ( _bstr_t bstrAttribute, _bstr_t bstrMediaType );
__declspec(implementation_key(187)) long IWMPMediaCollection::getMediaAtom ( _bstr_t bstrItemName );
__declspec(implementation_key(188)) HRESULT IWMPMediaCollection::setDeleted ( struct IWMPMedia * pItem, VARIANT_BOOL varfIsDeleted );
__declspec(implementation_key(189)) VARIANT_BOOL IWMPMediaCollection::isDeleted ( struct IWMPMedia * pItem );
__declspec(implementation_key(190)) long IWMPStringCollection::Getcount ( );
__declspec(implementation_key(191)) _bstr_t IWMPStringCollection::Item ( long lIndex );
__declspec(implementation_key(192)) IWMPPlaylistPtr IWMPPlaylistCollection::newPlaylist ( _bstr_t bstrName );
__declspec(implementation_key(193)) IWMPPlaylistArrayPtr IWMPPlaylistCollection::getAll ( );
__declspec(implementation_key(194)) IWMPPlaylistArrayPtr IWMPPlaylistCollection::getByName ( _bstr_t bstrName );
__declspec(implementation_key(195)) HRESULT IWMPPlaylistCollection::remove ( struct IWMPPlaylist * pItem );
__declspec(implementation_key(196)) HRESULT IWMPPlaylistCollection::setDeleted ( struct IWMPPlaylist * pItem, VARIANT_BOOL varfIsDeleted );
__declspec(implementation_key(197)) VARIANT_BOOL IWMPPlaylistCollection::isDeleted ( struct IWMPPlaylist * pItem );
__declspec(implementation_key(198)) IWMPPlaylistPtr IWMPPlaylistCollection::importPlaylist ( struct IWMPPlaylist * pItem );
__declspec(implementation_key(199)) long IWMPPlaylistArray::Getcount ( );
__declspec(implementation_key(200)) IWMPPlaylistPtr IWMPPlaylistArray::Item ( long lIndex );
__declspec(implementation_key(201)) long IWMPNetwork::GetbandWidth ( );
__declspec(implementation_key(202)) long IWMPNetwork::GetrecoveredPackets ( );
__declspec(implementation_key(203)) _bstr_t IWMPNetwork::GetsourceProtocol ( );
__declspec(implementation_key(204)) long IWMPNetwork::GetreceivedPackets ( );
__declspec(implementation_key(205)) long IWMPNetwork::GetlostPackets ( );
__declspec(implementation_key(206)) long IWMPNetwork::GetreceptionQuality ( );
__declspec(implementation_key(207)) long IWMPNetwork::GetbufferingCount ( );
__declspec(implementation_key(208)) long IWMPNetwork::GetbufferingProgress ( );
__declspec(implementation_key(209)) long IWMPNetwork::GetbufferingTime ( );
__declspec(implementation_key(210)) void IWMPNetwork::PutbufferingTime ( long plBufferingTime );
__declspec(implementation_key(211)) long IWMPNetwork::GetframeRate ( );
__declspec(implementation_key(212)) long IWMPNetwork::GetmaxBitRate ( );
__declspec(implementation_key(213)) long IWMPNetwork::GetbitRate ( );
__declspec(implementation_key(214)) long IWMPNetwork::getProxySettings ( _bstr_t bstrProtocol );
__declspec(implementation_key(215)) HRESULT IWMPNetwork::setProxySettings ( _bstr_t bstrProtocol, long lProxySetting );
__declspec(implementation_key(216)) _bstr_t IWMPNetwork::getProxyName ( _bstr_t bstrProtocol );
__declspec(implementation_key(217)) HRESULT IWMPNetwork::setProxyName ( _bstr_t bstrProtocol, _bstr_t bstrProxyName );
__declspec(implementation_key(218)) long IWMPNetwork::getProxyPort ( _bstr_t bstrProtocol );
__declspec(implementation_key(219)) HRESULT IWMPNetwork::setProxyPort ( _bstr_t bstrProtocol, long lProxyPort );
__declspec(implementation_key(220)) _bstr_t IWMPNetwork::getProxyExceptionList ( _bstr_t bstrProtocol );
__declspec(implementation_key(221)) HRESULT IWMPNetwork::setProxyExceptionList ( _bstr_t bstrProtocol, _bstr_t pbstrExceptionList );
__declspec(implementation_key(222)) VARIANT_BOOL IWMPNetwork::getProxyBypassForLocal ( _bstr_t bstrProtocol );
__declspec(implementation_key(223)) HRESULT IWMPNetwork::setProxyBypassForLocal ( _bstr_t bstrProtocol, VARIANT_BOOL fBypassForLocal );
__declspec(implementation_key(224)) long IWMPNetwork::GetmaxBandwidth ( );
__declspec(implementation_key(225)) void IWMPNetwork::PutmaxBandwidth ( long lMaxBandwidth );
__declspec(implementation_key(226)) long IWMPNetwork::GetdownloadProgress ( );
__declspec(implementation_key(227)) long IWMPNetwork::GetencodedFrameRate ( );
__declspec(implementation_key(228)) long IWMPNetwork::GetframesSkipped ( );
__declspec(implementation_key(229)) long IWMPCdromCollection::Getcount ( );
__declspec(implementation_key(230)) IWMPCdromPtr IWMPCdromCollection::Item ( long lIndex );
__declspec(implementation_key(231)) IWMPCdromPtr IWMPCdromCollection::getByDriveSpecifier ( _bstr_t bstrDriveSpecifier );
__declspec(implementation_key(232)) _bstr_t IWMPCdrom::GetdriveSpecifier ( );
__declspec(implementation_key(233)) IWMPPlaylistPtr IWMPCdrom::GetPlaylist ( );
__declspec(implementation_key(234)) HRESULT IWMPCdrom::eject ( );
__declspec(implementation_key(235)) _bstr_t IWMPClosedCaption::GetSAMIStyle ( );
__declspec(implementation_key(236)) void IWMPClosedCaption::PutSAMIStyle ( _bstr_t pbstrSAMIStyle );
__declspec(implementation_key(237)) _bstr_t IWMPClosedCaption::GetSAMILang ( );
__declspec(implementation_key(238)) void IWMPClosedCaption::PutSAMILang ( _bstr_t pbstrSAMILang );
__declspec(implementation_key(239)) _bstr_t IWMPClosedCaption::GetSAMIFileName ( );
__declspec(implementation_key(240)) void IWMPClosedCaption::PutSAMIFileName ( _bstr_t pbstrSAMIFileName );
__declspec(implementation_key(241)) _bstr_t IWMPClosedCaption::GetcaptioningId ( );
__declspec(implementation_key(242)) void IWMPClosedCaption::PutcaptioningId ( _bstr_t pbstrCaptioningID );
__declspec(implementation_key(243)) HRESULT IWMPError::clearErrorQueue ( );
__declspec(implementation_key(244)) long IWMPError::GeterrorCount ( );
__declspec(implementation_key(245)) IWMPErrorItemPtr IWMPError::GetItem ( long dwIndex );
__declspec(implementation_key(246)) HRESULT IWMPError::webHelp ( );
__declspec(implementation_key(247)) long IWMPErrorItem::GeterrorCode ( );
__declspec(implementation_key(248)) _bstr_t IWMPErrorItem::GeterrorDescription ( );
__declspec(implementation_key(249)) _variant_t IWMPErrorItem::GeterrorContext ( );
__declspec(implementation_key(250)) long IWMPErrorItem::Getremedy ( );
__declspec(implementation_key(251)) _bstr_t IWMPErrorItem::GetcustomUrl ( );
__declspec(implementation_key(252)) VARIANT_BOOL IWMPDVD::GetisAvailable ( _bstr_t bstrItem );
__declspec(implementation_key(253)) _bstr_t IWMPDVD::Getdomain ( );
__declspec(implementation_key(254)) HRESULT IWMPDVD::topMenu ( );
__declspec(implementation_key(255)) HRESULT IWMPDVD::titleMenu ( );
__declspec(implementation_key(256)) HRESULT IWMPDVD::back ( );
__declspec(implementation_key(257)) HRESULT IWMPDVD::resume ( );
__declspec(implementation_key(258)) HRESULT IWMPPlayerApplication::switchToPlayerApplication ( );
__declspec(implementation_key(259)) HRESULT IWMPPlayerApplication::switchToControl ( );
__declspec(implementation_key(260)) VARIANT_BOOL IWMPPlayerApplication::GetplayerDocked ( );
__declspec(implementation_key(261)) VARIANT_BOOL IWMPPlayerApplication::GethasDisplay ( );
__declspec(implementation_key(262)) VARIANT_BOOL IWMPPlayer3::Getenabled ( );
__declspec(implementation_key(263)) void IWMPPlayer3::Putenabled ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(264)) VARIANT_BOOL IWMPPlayer3::GetfullScreen ( );
__declspec(implementation_key(265)) void IWMPPlayer3::PutfullScreen ( VARIANT_BOOL pbFullScreen );
__declspec(implementation_key(266)) VARIANT_BOOL IWMPPlayer3::GetenableContextMenu ( );
__declspec(implementation_key(267)) void IWMPPlayer3::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu );
__declspec(implementation_key(268)) void IWMPPlayer3::PutuiMode ( _bstr_t pbstrMode );
__declspec(implementation_key(269)) _bstr_t IWMPPlayer3::GetuiMode ( );
__declspec(implementation_key(270)) VARIANT_BOOL IWMPPlayer3::GetstretchToFit ( );
__declspec(implementation_key(271)) void IWMPPlayer3::PutstretchToFit ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(272)) VARIANT_BOOL IWMPPlayer3::GetwindowlessVideo ( );
__declspec(implementation_key(273)) void IWMPPlayer3::PutwindowlessVideo ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(274)) VARIANT_BOOL IWMPPlayer2::Getenabled ( );
__declspec(implementation_key(275)) void IWMPPlayer2::Putenabled ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(276)) VARIANT_BOOL IWMPPlayer2::GetfullScreen ( );
__declspec(implementation_key(277)) void IWMPPlayer2::PutfullScreen ( VARIANT_BOOL pbFullScreen );
__declspec(implementation_key(278)) VARIANT_BOOL IWMPPlayer2::GetenableContextMenu ( );
__declspec(implementation_key(279)) void IWMPPlayer2::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu );
__declspec(implementation_key(280)) void IWMPPlayer2::PutuiMode ( _bstr_t pbstrMode );
__declspec(implementation_key(281)) _bstr_t IWMPPlayer2::GetuiMode ( );
__declspec(implementation_key(282)) VARIANT_BOOL IWMPPlayer2::GetstretchToFit ( );
__declspec(implementation_key(283)) void IWMPPlayer2::PutstretchToFit ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(284)) VARIANT_BOOL IWMPPlayer2::GetwindowlessVideo ( );
__declspec(implementation_key(285)) void IWMPPlayer2::PutwindowlessVideo ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(286)) VARIANT_BOOL IWMPPlayer::Getenabled ( );
__declspec(implementation_key(287)) void IWMPPlayer::Putenabled ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(288)) VARIANT_BOOL IWMPPlayer::GetfullScreen ( );
__declspec(implementation_key(289)) void IWMPPlayer::PutfullScreen ( VARIANT_BOOL pbFullScreen );
__declspec(implementation_key(290)) VARIANT_BOOL IWMPPlayer::GetenableContextMenu ( );
__declspec(implementation_key(291)) void IWMPPlayer::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu );
__declspec(implementation_key(292)) void IWMPPlayer::PutuiMode ( _bstr_t pbstrMode );
__declspec(implementation_key(293)) _bstr_t IWMPPlayer::GetuiMode ( );
__declspec(implementation_key(294)) long IWMPErrorItem2::Getcondition ( );
__declspec(implementation_key(295)) HRESULT IWMPControls2::step ( long lStep );
__declspec(implementation_key(296)) IWMPErrorItemPtr IWMPMedia2::GetError ( );
__declspec(implementation_key(297)) long IWMPMedia3::getAttributeCountByType ( _bstr_t bstrType, _bstr_t bstrLanguage );
__declspec(implementation_key(298)) _variant_t IWMPMedia3::getItemInfoByType ( _bstr_t bstrType, _bstr_t bstrLanguage, long lIndex );
__declspec(implementation_key(299)) _bstr_t IWMPMetadataPicture::GetmimeType ( );
__declspec(implementation_key(300)) _bstr_t IWMPMetadataPicture::GetpictureType ( );
__declspec(implementation_key(301)) _bstr_t IWMPMetadataPicture::GetDescription ( );
__declspec(implementation_key(302)) _bstr_t IWMPMetadataPicture::GetURL ( );
__declspec(implementation_key(303)) _bstr_t IWMPMetadataText::GetDescription ( );
__declspec(implementation_key(304)) _bstr_t IWMPMetadataText::Gettext ( );
__declspec(implementation_key(305)) long IWMPSettings2::GetdefaultAudioLanguage ( );
__declspec(implementation_key(306)) _bstr_t IWMPSettings2::GetmediaAccessRights ( );
__declspec(implementation_key(307)) VARIANT_BOOL IWMPSettings2::requestMediaAccessRights ( _bstr_t bstrDesiredAccess );
__declspec(implementation_key(308)) long IWMPControls3::GetaudioLanguageCount ( );
__declspec(implementation_key(309)) long IWMPControls3::getAudioLanguageID ( long lIndex );
__declspec(implementation_key(310)) _bstr_t IWMPControls3::getAudioLanguageDescription ( long lIndex );
__declspec(implementation_key(311)) long IWMPControls3::GetcurrentAudioLanguage ( );
__declspec(implementation_key(312)) void IWMPControls3::PutcurrentAudioLanguage ( long plLangID );
__declspec(implementation_key(313)) long IWMPControls3::GetcurrentAudioLanguageIndex ( );
__declspec(implementation_key(314)) void IWMPControls3::PutcurrentAudioLanguageIndex ( long plIndex );
__declspec(implementation_key(315)) _bstr_t IWMPControls3::getLanguageName ( long lLangID );
__declspec(implementation_key(316)) _bstr_t IWMPControls3::GetcurrentPositionTimecode ( );
__declspec(implementation_key(317)) void IWMPControls3::PutcurrentPositionTimecode ( _bstr_t bstrTimecode );
__declspec(implementation_key(318)) long IWMPClosedCaption2::GetSAMILangCount ( );
__declspec(implementation_key(319)) _bstr_t IWMPClosedCaption2::getSAMILangName ( long nIndex );
__declspec(implementation_key(320)) long IWMPClosedCaption2::getSAMILangID ( long nIndex );
__declspec(implementation_key(321)) long IWMPClosedCaption2::GetSAMIStyleCount ( );
__declspec(implementation_key(322)) _bstr_t IWMPClosedCaption2::getSAMIStyleName ( long nIndex );
__declspec(implementation_key(323)) IWMPPlaylistPtr IWMPPlaylistCtrl::GetPlaylist ( );
__declspec(implementation_key(324)) void IWMPPlaylistCtrl::PutPlaylist ( struct IWMPPlaylist * ppdispPlaylist );
__declspec(implementation_key(325)) _bstr_t IWMPPlaylistCtrl::Getcolumns ( );
__declspec(implementation_key(326)) void IWMPPlaylistCtrl::Putcolumns ( _bstr_t pbstrColumns );
__declspec(implementation_key(327)) long IWMPPlaylistCtrl::GetcolumnCount ( );
__declspec(implementation_key(328)) _bstr_t IWMPPlaylistCtrl::GetcolumnOrder ( );
__declspec(implementation_key(329)) void IWMPPlaylistCtrl::PutcolumnOrder ( _bstr_t pbstrColumnOrder );
__declspec(implementation_key(330)) VARIANT_BOOL IWMPPlaylistCtrl::GetcolumnsVisible ( );
__declspec(implementation_key(331)) void IWMPPlaylistCtrl::PutcolumnsVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(332)) VARIANT_BOOL IWMPPlaylistCtrl::GetdropDownVisible ( );
__declspec(implementation_key(333)) void IWMPPlaylistCtrl::PutdropDownVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(334)) VARIANT_BOOL IWMPPlaylistCtrl::GetplaylistItemsVisible ( );
__declspec(implementation_key(335)) void IWMPPlaylistCtrl::PutplaylistItemsVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(336)) VARIANT_BOOL IWMPPlaylistCtrl::GetcheckboxesVisible ( );
__declspec(implementation_key(337)) void IWMPPlaylistCtrl::PutcheckboxesVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(338)) _bstr_t IWMPPlaylistCtrl::GetbackgroundColor ( );
__declspec(implementation_key(339)) void IWMPPlaylistCtrl::PutbackgroundColor ( _bstr_t pbstrColor );
__declspec(implementation_key(340)) _bstr_t IWMPPlaylistCtrl::GetforegroundColor ( );
__declspec(implementation_key(341)) void IWMPPlaylistCtrl::PutforegroundColor ( _bstr_t pbstrColor );
__declspec(implementation_key(342)) _bstr_t IWMPPlaylistCtrl::GetdisabledItemColor ( );
__declspec(implementation_key(343)) void IWMPPlaylistCtrl::PutdisabledItemColor ( _bstr_t pbstrColor );
__declspec(implementation_key(344)) _bstr_t IWMPPlaylistCtrl::GetitemPlayingColor ( );
__declspec(implementation_key(345)) void IWMPPlaylistCtrl::PutitemPlayingColor ( _bstr_t pbstrColor );
__declspec(implementation_key(346)) _bstr_t IWMPPlaylistCtrl::GetitemPlayingBackgroundColor ( );
__declspec(implementation_key(347)) void IWMPPlaylistCtrl::PutitemPlayingBackgroundColor ( _bstr_t pbstrBackgroundColor );
__declspec(implementation_key(348)) _bstr_t IWMPPlaylistCtrl::GetbackgroundImage ( );
__declspec(implementation_key(349)) void IWMPPlaylistCtrl::PutbackgroundImage ( _bstr_t pbstrImage );
__declspec(implementation_key(350)) VARIANT_BOOL IWMPPlaylistCtrl::GetallowItemEditing ( );
__declspec(implementation_key(351)) void IWMPPlaylistCtrl::PutallowItemEditing ( VARIANT_BOOL pVal );
__declspec(implementation_key(352)) VARIANT_BOOL IWMPPlaylistCtrl::GetallowColumnSorting ( );
__declspec(implementation_key(353)) void IWMPPlaylistCtrl::PutallowColumnSorting ( VARIANT_BOOL pVal );
__declspec(implementation_key(354)) _bstr_t IWMPPlaylistCtrl::GetdropDownList ( );
__declspec(implementation_key(355)) void IWMPPlaylistCtrl::PutdropDownList ( _bstr_t pbstrList );
__declspec(implementation_key(356)) _bstr_t IWMPPlaylistCtrl::GetdropDownToolTip ( );
__declspec(implementation_key(357)) void IWMPPlaylistCtrl::PutdropDownToolTip ( _bstr_t pbstrToolTip );
__declspec(implementation_key(358)) VARIANT_BOOL IWMPPlaylistCtrl::Getcopying ( );
__declspec(implementation_key(359)) HRESULT IWMPPlaylistCtrl::copy ( );
__declspec(implementation_key(360)) HRESULT IWMPPlaylistCtrl::abortCopy ( );
__declspec(implementation_key(361)) HRESULT IWMPPlaylistCtrl::deleteSelected ( );
__declspec(implementation_key(362)) HRESULT IWMPPlaylistCtrl::deleteSelectedFromLibrary ( );
__declspec(implementation_key(363)) HRESULT IWMPPlaylistCtrl::moveSelectedUp ( );
__declspec(implementation_key(364)) HRESULT IWMPPlaylistCtrl::moveSelectedDown ( );
__declspec(implementation_key(365)) HRESULT IWMPPlaylistCtrl::addSelectedToPlaylist ( struct IWMPPlaylist * pdispPlaylist );
__declspec(implementation_key(366)) long IWMPPlaylistCtrl::getNextSelectedItem ( long nStartIndex );
__declspec(implementation_key(367)) long IWMPPlaylistCtrl::getNextCheckedItem ( long nStartIndex );
__declspec(implementation_key(368)) HRESULT IWMPPlaylistCtrl::setSelectedState ( long nIndex, VARIANT_BOOL vbSelected );
__declspec(implementation_key(369)) HRESULT IWMPPlaylistCtrl::setCheckedState ( long nIndex, VARIANT_BOOL vbChecked );
__declspec(implementation_key(370)) HRESULT IWMPPlaylistCtrl::sortColumn ( long nIndex );
__declspec(implementation_key(371)) HRESULT IWMPPlaylistCtrl::setColumnResizeMode ( long nIndex, _bstr_t newMode );
__declspec(implementation_key(372)) HRESULT IWMPPlaylistCtrl::setColumnWidth ( long nIndex, long nWidth );
__declspec(implementation_key(373)) _bstr_t IWMPPlaylistCtrl::GetitemErrorColor ( );
__declspec(implementation_key(374)) void IWMPPlaylistCtrl::PutitemErrorColor ( _bstr_t pbstrColor );
__declspec(implementation_key(375)) long IWMPPlaylistCtrl::GetitemCount ( );
__declspec(implementation_key(376)) IWMPMediaPtr IWMPPlaylistCtrl::GetitemMedia ( long nIndex );
__declspec(implementation_key(377)) IWMPPlaylistPtr IWMPPlaylistCtrl::GetitemPlaylist ( long nIndex );
__declspec(implementation_key(378)) long IWMPPlaylistCtrl::getNextSelectedItem2 ( long nStartIndex );
__declspec(implementation_key(379)) long IWMPPlaylistCtrl::getNextCheckedItem2 ( long nStartIndex );
__declspec(implementation_key(380)) HRESULT IWMPPlaylistCtrl::setSelectedState2 ( long nIndex, VARIANT_BOOL vbSelected );
__declspec(implementation_key(381)) HRESULT IWMPPlaylistCtrl::setCheckedState2 ( long nIndex, VARIANT_BOOL vbChecked );
__declspec(implementation_key(382)) _bstr_t IWMPPlaylistCtrl::GetleftStatus ( );
__declspec(implementation_key(383)) void IWMPPlaylistCtrl::PutleftStatus ( _bstr_t pbstrStatus );
__declspec(implementation_key(384)) _bstr_t IWMPPlaylistCtrl::GetrightStatus ( );
__declspec(implementation_key(385)) void IWMPPlaylistCtrl::PutrightStatus ( _bstr_t pbstrStatus );
__declspec(implementation_key(386)) VARIANT_BOOL IWMPPlaylistCtrl::GeteditButtonVisible ( );
__declspec(implementation_key(387)) void IWMPPlaylistCtrl::PuteditButtonVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(388)) _bstr_t IWMPPlaylistCtrl::GetdropDownImage ( );
__declspec(implementation_key(389)) void IWMPPlaylistCtrl::PutdropDownImage ( _bstr_t pbstrImage );
__declspec(implementation_key(390)) _bstr_t IWMPPlaylistCtrl::GetdropDownBackgroundImage ( );
__declspec(implementation_key(391)) void IWMPPlaylistCtrl::PutdropDownBackgroundImage ( _bstr_t pbstrImage );
__declspec(implementation_key(392)) float IWMPPlaylistCtrl::GethueShift ( );
__declspec(implementation_key(393)) void IWMPPlaylistCtrl::PuthueShift ( float pVal );
__declspec(implementation_key(394)) float IWMPPlaylistCtrl::Getsaturation ( );
__declspec(implementation_key(395)) void IWMPPlaylistCtrl::Putsaturation ( float pVal );
__declspec(implementation_key(396)) _bstr_t IWMPPlaylistCtrl::GetstatusColor ( );
__declspec(implementation_key(397)) void IWMPPlaylistCtrl::PutstatusColor ( _bstr_t pbstrColor );
__declspec(implementation_key(398)) VARIANT_BOOL IWMPPlaylistCtrl::GettoolbarVisible ( );
__declspec(implementation_key(399)) void IWMPPlaylistCtrl::PuttoolbarVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(400)) _bstr_t IWMPPlaylistCtrl::GetitemSelectedColor ( );
__declspec(implementation_key(401)) void IWMPPlaylistCtrl::PutitemSelectedColor ( _bstr_t pbstrColor );
__declspec(implementation_key(402)) _bstr_t IWMPPlaylistCtrl::GetitemSelectedFocusLostColor ( );
__declspec(implementation_key(403)) void IWMPPlaylistCtrl::PutitemSelectedFocusLostColor ( _bstr_t pbstrFocusLostColor );
__declspec(implementation_key(404)) _bstr_t IWMPPlaylistCtrl::GetitemSelectedBackgroundColor ( );
__declspec(implementation_key(405)) void IWMPPlaylistCtrl::PutitemSelectedBackgroundColor ( _bstr_t pbstrColor );
__declspec(implementation_key(406)) _bstr_t IWMPPlaylistCtrl::GetitemSelectedBackgroundFocusLostColor ( );
__declspec(implementation_key(407)) void IWMPPlaylistCtrl::PutitemSelectedBackgroundFocusLostColor ( _bstr_t pbstrFocusLostColor );
__declspec(implementation_key(408)) _bstr_t IWMPPlaylistCtrl::GetbackgroundSplitColor ( );
__declspec(implementation_key(409)) void IWMPPlaylistCtrl::PutbackgroundSplitColor ( _bstr_t pbstrColor );
__declspec(implementation_key(410)) _bstr_t IWMPPlaylistCtrl::GetstatusTextColor ( );
__declspec(implementation_key(411)) void IWMPPlaylistCtrl::PutstatusTextColor ( _bstr_t pbstrColor );
__declspec(implementation_key(412)) VARIANT_BOOL IAppDispatch::GettitlebarVisible ( );
__declspec(implementation_key(413)) void IAppDispatch::PuttitlebarVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(414)) VARIANT_BOOL IAppDispatch::GettitlebarAutoHide ( );
__declspec(implementation_key(415)) void IAppDispatch::PuttitlebarAutoHide ( VARIANT_BOOL pVal );
__declspec(implementation_key(416)) _bstr_t IAppDispatch::GetcurrentTask ( );
__declspec(implementation_key(417)) void IAppDispatch::PutcurrentTask ( _bstr_t pVal );
__declspec(implementation_key(418)) VARIANT_BOOL IAppDispatch::GetsettingsVisible ( );
__declspec(implementation_key(419)) void IAppDispatch::PutsettingsVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(420)) VARIANT_BOOL IAppDispatch::GetplaylistVisible ( );
__declspec(implementation_key(421)) void IAppDispatch::PutplaylistVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(422)) HRESULT IAppDispatch::gotoSkinMode ( );
__declspec(implementation_key(423)) HRESULT IAppDispatch::adjustLeft ( long nDistance );
__declspec(implementation_key(424)) VARIANT_BOOL IAppDispatch::GettaskbarVisible ( );
__declspec(implementation_key(425)) void IAppDispatch::PuttaskbarVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(426)) long IAppDispatch::GetDPI ( );
__declspec(implementation_key(427)) VARIANT_BOOL IAppDispatch::GetpreviousEnabled ( );
__declspec(implementation_key(428)) HRESULT IAppDispatch::previous ( );
__declspec(implementation_key(429)) VARIANT_BOOL IAppDispatch::GettitlebarCurrentlyVisible ( );
__declspec(implementation_key(430)) VARIANT_BOOL IAppDispatch::GetbgPluginRunning ( );
__declspec(implementation_key(431)) HRESULT IAppDispatch::configurePlugins ( long nType );
__declspec(implementation_key(432)) _bstr_t IAppDispatch::getTimeString ( double dTime );
__declspec(implementation_key(433)) VARIANT_BOOL IAppDispatch::GetisXPOrBetter ( );
__declspec(implementation_key(434)) VARIANT_BOOL IAppDispatch::Getmaximized ( );
__declspec(implementation_key(435)) _bstr_t IWMPSafeBrowser::GetURL ( );
__declspec(implementation_key(436)) void IWMPSafeBrowser::PutURL ( _bstr_t pVal );
__declspec(implementation_key(437)) long IWMPSafeBrowser::Getstatus ( );
__declspec(implementation_key(438)) long IWMPSafeBrowser::GetpendingDownloads ( );
__declspec(implementation_key(439)) HRESULT IWMPSafeBrowser::showSAMIText ( _bstr_t samiText );
__declspec(implementation_key(440)) HRESULT IWMPSafeBrowser::showLyrics ( _bstr_t lyrics );
__declspec(implementation_key(441)) HRESULT IWMPSafeBrowser::loadSpecialPage ( _bstr_t pageName );
__declspec(implementation_key(442)) HRESULT IWMPSafeBrowser::goBack ( );
__declspec(implementation_key(443)) HRESULT IWMPSafeBrowser::goForward ( );
__declspec(implementation_key(444)) HRESULT IWMPSafeBrowser::stop ( );
__declspec(implementation_key(445)) HRESULT IWMPSafeBrowser::refresh ( );
__declspec(implementation_key(446)) _bstr_t IWMPSafeBrowser::GetbaseURL ( );
__declspec(implementation_key(447)) _bstr_t IWMPSafeBrowser::GetfullURL ( );
__declspec(implementation_key(448)) long IWMPSafeBrowser::GetsecureLock ( );
__declspec(implementation_key(449)) VARIANT_BOOL IWMPSafeBrowser::Getbusy ( );
__declspec(implementation_key(450)) HRESULT IWMPSafeBrowser::showCert ( );
__declspec(implementation_key(451)) long IWMPSyncServices::GetdeviceCount ( );
__declspec(implementation_key(452)) IWMPSyncDevicePtr IWMPSyncServices::getDevice ( long lIndex );
__declspec(implementation_key(453)) _bstr_t IWMPObjectExtendedProps::Getid ( );
__declspec(implementation_key(454)) _bstr_t IWMPObjectExtendedProps::GetelementType ( );
__declspec(implementation_key(455)) long IWMPObjectExtendedProps::Getleft ( );
__declspec(implementation_key(456)) void IWMPObjectExtendedProps::Putleft ( long pVal );
__declspec(implementation_key(457)) long IWMPObjectExtendedProps::Gettop ( );
__declspec(implementation_key(458)) void IWMPObjectExtendedProps::Puttop ( long pVal );
__declspec(implementation_key(459)) long IWMPObjectExtendedProps::Getwidth ( );
__declspec(implementation_key(460)) void IWMPObjectExtendedProps::Putwidth ( long pVal );
__declspec(implementation_key(461)) long IWMPObjectExtendedProps::Getheight ( );
__declspec(implementation_key(462)) void IWMPObjectExtendedProps::Putheight ( long pVal );
__declspec(implementation_key(463)) long IWMPObjectExtendedProps::GetzIndex ( );
__declspec(implementation_key(464)) void IWMPObjectExtendedProps::PutzIndex ( long pVal );
__declspec(implementation_key(465)) _bstr_t IWMPObjectExtendedProps::GetclippingImage ( );
__declspec(implementation_key(466)) void IWMPObjectExtendedProps::PutclippingImage ( _bstr_t pVal );
__declspec(implementation_key(467)) _bstr_t IWMPObjectExtendedProps::GetclippingColor ( );
__declspec(implementation_key(468)) void IWMPObjectExtendedProps::PutclippingColor ( _bstr_t pVal );
__declspec(implementation_key(469)) VARIANT_BOOL IWMPObjectExtendedProps::Getvisible ( );
__declspec(implementation_key(470)) void IWMPObjectExtendedProps::Putvisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(471)) VARIANT_BOOL IWMPObjectExtendedProps::Getenabled ( );
__declspec(implementation_key(472)) void IWMPObjectExtendedProps::Putenabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(473)) VARIANT_BOOL IWMPObjectExtendedProps::GettabStop ( );
__declspec(implementation_key(474)) void IWMPObjectExtendedProps::PuttabStop ( VARIANT_BOOL pVal );
__declspec(implementation_key(475)) VARIANT_BOOL IWMPObjectExtendedProps::GetpassThrough ( );
__declspec(implementation_key(476)) void IWMPObjectExtendedProps::PutpassThrough ( VARIANT_BOOL pVal );
__declspec(implementation_key(477)) _bstr_t IWMPObjectExtendedProps::GethorizontalAlignment ( );
__declspec(implementation_key(478)) void IWMPObjectExtendedProps::PuthorizontalAlignment ( _bstr_t pVal );
__declspec(implementation_key(479)) _bstr_t IWMPObjectExtendedProps::GetverticalAlignment ( );
__declspec(implementation_key(480)) void IWMPObjectExtendedProps::PutverticalAlignment ( _bstr_t pVal );
__declspec(implementation_key(481)) HRESULT IWMPObjectExtendedProps::moveTo ( long newX, long newY, long moveTime );
__declspec(implementation_key(482)) long IWMPObjectExtendedProps::GetalphaBlend ( );
__declspec(implementation_key(483)) void IWMPObjectExtendedProps::PutalphaBlend ( long pVal );
__declspec(implementation_key(484)) HRESULT IWMPObjectExtendedProps::alphaBlendTo ( long newVal, long alphaTime );
__declspec(implementation_key(485)) _bstr_t IWMPObjectExtendedProps::GetaccName ( );
__declspec(implementation_key(486)) void IWMPObjectExtendedProps::PutaccName ( _bstr_t pszName );
__declspec(implementation_key(487)) _bstr_t IWMPObjectExtendedProps::GetaccDescription ( );
__declspec(implementation_key(488)) void IWMPObjectExtendedProps::PutaccDescription ( _bstr_t pszDesc );
__declspec(implementation_key(489)) _bstr_t IWMPObjectExtendedProps::GetaccKeyboardShortcut ( );
__declspec(implementation_key(490)) void IWMPObjectExtendedProps::PutaccKeyboardShortcut ( _bstr_t pszShortcut );
__declspec(implementation_key(491)) _bstr_t IWMPLayoutSubView::GettransparencyColor ( );
__declspec(implementation_key(492)) void IWMPLayoutSubView::PuttransparencyColor ( _bstr_t pVal );
__declspec(implementation_key(493)) _bstr_t IWMPLayoutSubView::GetbackgroundColor ( );
__declspec(implementation_key(494)) void IWMPLayoutSubView::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(495)) _bstr_t IWMPLayoutSubView::GetbackgroundImage ( );
__declspec(implementation_key(496)) void IWMPLayoutSubView::PutbackgroundImage ( _bstr_t pVal );
__declspec(implementation_key(497)) VARIANT_BOOL IWMPLayoutSubView::GetbackgroundTiled ( );
__declspec(implementation_key(498)) void IWMPLayoutSubView::PutbackgroundTiled ( VARIANT_BOOL pVal );
__declspec(implementation_key(499)) float IWMPLayoutSubView::GetbackgroundImageHueShift ( );
__declspec(implementation_key(500)) void IWMPLayoutSubView::PutbackgroundImageHueShift ( float pVal );
__declspec(implementation_key(501)) float IWMPLayoutSubView::GetbackgroundImageSaturation ( );
__declspec(implementation_key(502)) void IWMPLayoutSubView::PutbackgroundImageSaturation ( float pVal );
__declspec(implementation_key(503)) VARIANT_BOOL IWMPLayoutSubView::GetresizeBackgroundImage ( );
__declspec(implementation_key(504)) void IWMPLayoutSubView::PutresizeBackgroundImage ( VARIANT_BOOL pVal );
__declspec(implementation_key(505)) _bstr_t IWMPLayoutView::Gettitle ( );
__declspec(implementation_key(506)) void IWMPLayoutView::Puttitle ( _bstr_t pVal );
__declspec(implementation_key(507)) _bstr_t IWMPLayoutView::Getcategory ( );
__declspec(implementation_key(508)) void IWMPLayoutView::Putcategory ( _bstr_t pVal );
__declspec(implementation_key(509)) _bstr_t IWMPLayoutView::GetfocusObjectID ( );
__declspec(implementation_key(510)) void IWMPLayoutView::PutfocusObjectID ( _bstr_t pVal );
__declspec(implementation_key(511)) VARIANT_BOOL IWMPLayoutView::GettitleBar ( );
__declspec(implementation_key(512)) VARIANT_BOOL IWMPLayoutView::Getresizable ( );
__declspec(implementation_key(513)) long IWMPLayoutView::GettimerInterval ( );
__declspec(implementation_key(514)) void IWMPLayoutView::PuttimerInterval ( long pVal );
__declspec(implementation_key(515)) long IWMPLayoutView::GetminWidth ( );
__declspec(implementation_key(516)) void IWMPLayoutView::PutminWidth ( long pVal );
__declspec(implementation_key(517)) long IWMPLayoutView::GetmaxWidth ( );
__declspec(implementation_key(518)) void IWMPLayoutView::PutmaxWidth ( long pVal );
__declspec(implementation_key(519)) long IWMPLayoutView::GetminHeight ( );
__declspec(implementation_key(520)) void IWMPLayoutView::PutminHeight ( long pVal );
__declspec(implementation_key(521)) long IWMPLayoutView::GetmaxHeight ( );
__declspec(implementation_key(522)) void IWMPLayoutView::PutmaxHeight ( long pVal );
__declspec(implementation_key(523)) HRESULT IWMPLayoutView::close ( );
__declspec(implementation_key(524)) HRESULT IWMPLayoutView::minimize ( );
__declspec(implementation_key(525)) HRESULT IWMPLayoutView::maximize ( );
__declspec(implementation_key(526)) HRESULT IWMPLayoutView::restore ( );
__declspec(implementation_key(527)) HRESULT IWMPLayoutView::size ( _bstr_t bstrDirection );
__declspec(implementation_key(528)) HRESULT IWMPLayoutView::returnToMediaCenter ( );
__declspec(implementation_key(529)) HRESULT IWMPLayoutView::updateWindow ( );
__declspec(implementation_key(530)) IDispatchPtr IWMPEventObject::GetsrcElement ( );
__declspec(implementation_key(531)) VARIANT_BOOL IWMPEventObject::GetaltKey ( );
__declspec(implementation_key(532)) VARIANT_BOOL IWMPEventObject::GetctrlKey ( );
__declspec(implementation_key(533)) VARIANT_BOOL IWMPEventObject::GetshiftKey ( );
__declspec(implementation_key(534)) IDispatchPtr IWMPEventObject::GetfromElement ( );
__declspec(implementation_key(535)) IDispatchPtr IWMPEventObject::GettoElement ( );
__declspec(implementation_key(536)) void IWMPEventObject::PutkeyCode ( long p );
__declspec(implementation_key(537)) long IWMPEventObject::GetkeyCode ( );
__declspec(implementation_key(538)) long IWMPEventObject::Getbutton ( );
__declspec(implementation_key(539)) long IWMPEventObject::Getx ( );
__declspec(implementation_key(540)) long IWMPEventObject::Gety ( );
__declspec(implementation_key(541)) long IWMPEventObject::GetclientX ( );
__declspec(implementation_key(542)) long IWMPEventObject::GetclientY ( );
__declspec(implementation_key(543)) long IWMPEventObject::GetoffsetX ( );
__declspec(implementation_key(544)) long IWMPEventObject::GetoffsetY ( );
__declspec(implementation_key(545)) long IWMPEventObject::GetscreenX ( );
__declspec(implementation_key(546)) long IWMPEventObject::GetscreenY ( );
__declspec(implementation_key(547)) long IWMPEventObject::GetscreenWidth ( );
__declspec(implementation_key(548)) long IWMPEventObject::GetscreenHeight ( );
__declspec(implementation_key(549)) _bstr_t IWMPTheme::Gettitle ( );
__declspec(implementation_key(550)) float IWMPTheme::Getversion ( );
__declspec(implementation_key(551)) _bstr_t IWMPTheme::GetauthorVersion ( );
__declspec(implementation_key(552)) _bstr_t IWMPTheme::Getauthor ( );
__declspec(implementation_key(553)) _bstr_t IWMPTheme::Getcopyright ( );
__declspec(implementation_key(554)) _bstr_t IWMPTheme::GetcurrentViewID ( );
__declspec(implementation_key(555)) void IWMPTheme::PutcurrentViewID ( _bstr_t pVal );
__declspec(implementation_key(556)) HRESULT IWMPTheme::showErrorDialog ( );
__declspec(implementation_key(557)) HRESULT IWMPTheme::logString ( _bstr_t stringVal );
__declspec(implementation_key(558)) HRESULT IWMPTheme::openView ( _bstr_t viewID );
__declspec(implementation_key(559)) HRESULT IWMPTheme::openViewRelative ( _bstr_t viewID, long x, long y );
__declspec(implementation_key(560)) HRESULT IWMPTheme::closeView ( _bstr_t viewID );
__declspec(implementation_key(561)) _bstr_t IWMPTheme::openDialog ( _bstr_t dialogType, _bstr_t parameters );
__declspec(implementation_key(562)) _bstr_t IWMPTheme::loadString ( _bstr_t bstrString );
__declspec(implementation_key(563)) _bstr_t IWMPTheme::loadPreference ( _bstr_t bstrName );
__declspec(implementation_key(564)) HRESULT IWMPTheme::savePreference ( _bstr_t bstrName, _bstr_t bstrValue );
__declspec(implementation_key(565)) HRESULT IWMPTheme::playSound ( _bstr_t bstrFilename );
__declspec(implementation_key(566)) _bstr_t IWMPLayoutSettingsDispatch::GeteffectType ( );
__declspec(implementation_key(567)) void IWMPLayoutSettingsDispatch::PuteffectType ( _bstr_t pVal );
__declspec(implementation_key(568)) long IWMPLayoutSettingsDispatch::GeteffectPreset ( );
__declspec(implementation_key(569)) void IWMPLayoutSettingsDispatch::PuteffectPreset ( long pVal );
__declspec(implementation_key(570)) _bstr_t IWMPLayoutSettingsDispatch::GetsettingsView ( );
__declspec(implementation_key(571)) void IWMPLayoutSettingsDispatch::PutsettingsView ( _bstr_t pVal );
__declspec(implementation_key(572)) long IWMPLayoutSettingsDispatch::GetvideoZoom ( );
__declspec(implementation_key(573)) void IWMPLayoutSettingsDispatch::PutvideoZoom ( long pVal );
__declspec(implementation_key(574)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetvideoShrinkToFit ( );
__declspec(implementation_key(575)) void IWMPLayoutSettingsDispatch::PutvideoShrinkToFit ( VARIANT_BOOL pVal );
__declspec(implementation_key(576)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetvideoStretchToFit ( );
__declspec(implementation_key(577)) void IWMPLayoutSettingsDispatch::PutvideoStretchToFit ( VARIANT_BOOL pVal );
__declspec(implementation_key(578)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetuserVideoStretchToFit ( );
__declspec(implementation_key(579)) void IWMPLayoutSettingsDispatch::PutuserVideoStretchToFit ( VARIANT_BOOL pVal );
__declspec(implementation_key(580)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowCaptions ( );
__declspec(implementation_key(581)) void IWMPLayoutSettingsDispatch::PutshowCaptions ( VARIANT_BOOL pVal );
__declspec(implementation_key(582)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowTitles ( );
__declspec(implementation_key(583)) void IWMPLayoutSettingsDispatch::PutshowTitles ( VARIANT_BOOL pVal );
__declspec(implementation_key(584)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowEffects ( );
__declspec(implementation_key(585)) void IWMPLayoutSettingsDispatch::PutshowEffects ( VARIANT_BOOL pVal );
__declspec(implementation_key(586)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowFullScreenPlaylist ( );
__declspec(implementation_key(587)) void IWMPLayoutSettingsDispatch::PutshowFullScreenPlaylist ( VARIANT_BOOL pVal );
__declspec(implementation_key(588)) _bstr_t IWMPLayoutSettingsDispatch::GetcontrastMode ( );
__declspec(implementation_key(589)) _bstr_t IWMPLayoutSettingsDispatch::getNamedString ( _bstr_t bstrName );
__declspec(implementation_key(590)) _bstr_t IWMPLayoutSettingsDispatch::getDurationStringFromSeconds ( long lDurationVal );
__declspec(implementation_key(591)) _bstr_t IWMPLayoutSettingsDispatch::GetdisplayView ( );
__declspec(implementation_key(592)) void IWMPLayoutSettingsDispatch::PutdisplayView ( _bstr_t pVal );
__declspec(implementation_key(593)) _bstr_t IWMPLayoutSettingsDispatch::GetmetadataView ( );
__declspec(implementation_key(594)) void IWMPLayoutSettingsDispatch::PutmetadataView ( _bstr_t pVal );
__declspec(implementation_key(595)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowSettings ( );
__declspec(implementation_key(596)) void IWMPLayoutSettingsDispatch::PutshowSettings ( VARIANT_BOOL pVal );
__declspec(implementation_key(597)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowResizeBars ( );
__declspec(implementation_key(598)) void IWMPLayoutSettingsDispatch::PutshowResizeBars ( VARIANT_BOOL pVal );
__declspec(implementation_key(599)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowPlaylist ( );
__declspec(implementation_key(600)) void IWMPLayoutSettingsDispatch::PutshowPlaylist ( VARIANT_BOOL pVal );
__declspec(implementation_key(601)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowMetadata ( );
__declspec(implementation_key(602)) void IWMPLayoutSettingsDispatch::PutshowMetadata ( VARIANT_BOOL pVal );
__declspec(implementation_key(603)) long IWMPLayoutSettingsDispatch::GetsettingsWidth ( );
__declspec(implementation_key(604)) void IWMPLayoutSettingsDispatch::PutsettingsWidth ( long pVal );
__declspec(implementation_key(605)) long IWMPLayoutSettingsDispatch::GetsettingsHeight ( );
__declspec(implementation_key(606)) void IWMPLayoutSettingsDispatch::PutsettingsHeight ( long pVal );
__declspec(implementation_key(607)) long IWMPLayoutSettingsDispatch::GetplaylistWidth ( );
__declspec(implementation_key(608)) void IWMPLayoutSettingsDispatch::PutplaylistWidth ( long pVal );
__declspec(implementation_key(609)) long IWMPLayoutSettingsDispatch::GetplaylistHeight ( );
__declspec(implementation_key(610)) void IWMPLayoutSettingsDispatch::PutplaylistHeight ( long pVal );
__declspec(implementation_key(611)) long IWMPLayoutSettingsDispatch::GetmetadataWidth ( );
__declspec(implementation_key(612)) void IWMPLayoutSettingsDispatch::PutmetadataWidth ( long pVal );
__declspec(implementation_key(613)) long IWMPLayoutSettingsDispatch::GetmetadataHeight ( );
__declspec(implementation_key(614)) void IWMPLayoutSettingsDispatch::PutmetadataHeight ( long pVal );
__declspec(implementation_key(615)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetfullScreenAvailable ( );
__declspec(implementation_key(616)) void IWMPLayoutSettingsDispatch::PutfullScreenAvailable ( VARIANT_BOOL pVal );
__declspec(implementation_key(617)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetfullScreenRequest ( );
__declspec(implementation_key(618)) void IWMPLayoutSettingsDispatch::PutfullScreenRequest ( VARIANT_BOOL pVal );
__declspec(implementation_key(619)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetquickHide ( );
__declspec(implementation_key(620)) void IWMPLayoutSettingsDispatch::PutquickHide ( VARIANT_BOOL pVal );
__declspec(implementation_key(621)) long IWMPLayoutSettingsDispatch::GetdisplayPreset ( );
__declspec(implementation_key(622)) void IWMPLayoutSettingsDispatch::PutdisplayPreset ( long pVal );
__declspec(implementation_key(623)) long IWMPLayoutSettingsDispatch::GetsettingsPreset ( );
__declspec(implementation_key(624)) void IWMPLayoutSettingsDispatch::PutsettingsPreset ( long pVal );
__declspec(implementation_key(625)) long IWMPLayoutSettingsDispatch::GetmetadataPreset ( );
__declspec(implementation_key(626)) void IWMPLayoutSettingsDispatch::PutmetadataPreset ( long pVal );
__declspec(implementation_key(627)) _bstr_t IWMPLayoutSettingsDispatch::GetuserDisplayView ( );
__declspec(implementation_key(628)) _bstr_t IWMPLayoutSettingsDispatch::GetuserWMPDisplayView ( );
__declspec(implementation_key(629)) long IWMPLayoutSettingsDispatch::GetuserDisplayPreset ( );
__declspec(implementation_key(630)) long IWMPLayoutSettingsDispatch::GetuserWMPDisplayPreset ( );
__declspec(implementation_key(631)) long IWMPLayoutSettingsDispatch::GetdynamicRangeControl ( );
__declspec(implementation_key(632)) void IWMPLayoutSettingsDispatch::PutdynamicRangeControl ( long pVal );
__declspec(implementation_key(633)) float IWMPLayoutSettingsDispatch::GetslowRate ( );
__declspec(implementation_key(634)) void IWMPLayoutSettingsDispatch::PutslowRate ( float pVal );
__declspec(implementation_key(635)) float IWMPLayoutSettingsDispatch::GetfastRate ( );
__declspec(implementation_key(636)) void IWMPLayoutSettingsDispatch::PutfastRate ( float pVal );
__declspec(implementation_key(637)) float IWMPLayoutSettingsDispatch::GetbuttonHueShift ( );
__declspec(implementation_key(638)) void IWMPLayoutSettingsDispatch::PutbuttonHueShift ( float pVal );
__declspec(implementation_key(639)) float IWMPLayoutSettingsDispatch::GetbuttonSaturation ( );
__declspec(implementation_key(640)) void IWMPLayoutSettingsDispatch::PutbuttonSaturation ( float pVal );
__declspec(implementation_key(641)) float IWMPLayoutSettingsDispatch::GetbackHueShift ( );
__declspec(implementation_key(642)) void IWMPLayoutSettingsDispatch::PutbackHueShift ( float pVal );
__declspec(implementation_key(643)) float IWMPLayoutSettingsDispatch::GetbackSaturation ( );
__declspec(implementation_key(644)) void IWMPLayoutSettingsDispatch::PutbackSaturation ( float pVal );
__declspec(implementation_key(645)) long IWMPLayoutSettingsDispatch::GetvizRequest ( );
__declspec(implementation_key(646)) void IWMPLayoutSettingsDispatch::PutvizRequest ( long pVal );
__declspec(implementation_key(647)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorLight ( );
__declspec(implementation_key(648)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorMedium ( );
__declspec(implementation_key(649)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorDark ( );
__declspec(implementation_key(650)) _bstr_t IWMPLayoutSettingsDispatch::GettoolbarButtonHighlight ( );
__declspec(implementation_key(651)) _bstr_t IWMPLayoutSettingsDispatch::GettoolbarButtonShadow ( );
__declspec(implementation_key(652)) _bstr_t IWMPLayoutSettingsDispatch::GettoolbarButtonFace ( );
__declspec(implementation_key(653)) _bstr_t IWMPLayoutSettingsDispatch::GetitemPlayingColor ( );
__declspec(implementation_key(654)) _bstr_t IWMPLayoutSettingsDispatch::GetitemPlayingBackgroundColor ( );
__declspec(implementation_key(655)) _bstr_t IWMPLayoutSettingsDispatch::GetitemErrorColor ( );
__declspec(implementation_key(656)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetappColorLimited ( );
__declspec(implementation_key(657)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetappColorBlackBackground ( );
__declspec(implementation_key(658)) void IWMPLayoutSettingsDispatch::PutappColorBlackBackground ( VARIANT_BOOL pVal );
__declspec(implementation_key(659)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorVideoBorder ( );
__declspec(implementation_key(660)) void IWMPLayoutSettingsDispatch::PutappColorVideoBorder ( _bstr_t pVal );
__declspec(implementation_key(661)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux1 ( );
__declspec(implementation_key(662)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux2 ( );
__declspec(implementation_key(663)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux3 ( );
__declspec(implementation_key(664)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux4 ( );
__declspec(implementation_key(665)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux5 ( );
__declspec(implementation_key(666)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux6 ( );
__declspec(implementation_key(667)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux7 ( );
__declspec(implementation_key(668)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux8 ( );
__declspec(implementation_key(669)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux9 ( );
__declspec(implementation_key(670)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux10 ( );
__declspec(implementation_key(671)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux11 ( );
__declspec(implementation_key(672)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux12 ( );
__declspec(implementation_key(673)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux13 ( );
__declspec(implementation_key(674)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux14 ( );
__declspec(implementation_key(675)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux15 ( );
__declspec(implementation_key(676)) _bstr_t IWMPLayoutSettingsDispatch::Getstatus ( );
__declspec(implementation_key(677)) void IWMPLayoutSettingsDispatch::Putstatus ( _bstr_t pVal );
__declspec(implementation_key(678)) _bstr_t IWMPLayoutSettingsDispatch::GetuserWMPSettingsView ( );
__declspec(implementation_key(679)) long IWMPLayoutSettingsDispatch::GetuserWMPSettingsPreset ( );
__declspec(implementation_key(680)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetuserWMPShowSettings ( );
__declspec(implementation_key(681)) _bstr_t IWMPLayoutSettingsDispatch::GetuserWMPMetadataView ( );
__declspec(implementation_key(682)) long IWMPLayoutSettingsDispatch::GetuserWMPMetadataPreset ( );
__declspec(implementation_key(683)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetuserWMPShowMetadata ( );
__declspec(implementation_key(684)) long IWMPLayoutSettingsDispatch::GetcaptionsHeight ( );
__declspec(implementation_key(685)) void IWMPLayoutSettingsDispatch::PutcaptionsHeight ( long pVal );
__declspec(implementation_key(686)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetsnapToVideo ( );
__declspec(implementation_key(687)) void IWMPLayoutSettingsDispatch::PutsnapToVideo ( VARIANT_BOOL pVal );
__declspec(implementation_key(688)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetpinFullScreenControls ( );
__declspec(implementation_key(689)) void IWMPLayoutSettingsDispatch::PutpinFullScreenControls ( VARIANT_BOOL pVal );
__declspec(implementation_key(690)) _bstr_t IWMPBrandDispatch::GetfullServiceName ( );
__declspec(implementation_key(691)) _bstr_t IWMPBrandDispatch::GetfriendlyName ( );
__declspec(implementation_key(692)) _bstr_t IWMPBrandDispatch::GetguideButtonText ( );
__declspec(implementation_key(693)) _bstr_t IWMPBrandDispatch::GetguideButtonTip ( );
__declspec(implementation_key(694)) _bstr_t IWMPBrandDispatch::GetguideMenuText ( );
__declspec(implementation_key(695)) _bstr_t IWMPBrandDispatch::GetguideAccText ( );
__declspec(implementation_key(696)) _bstr_t IWMPBrandDispatch::Gettask1ButtonText ( );
__declspec(implementation_key(697)) _bstr_t IWMPBrandDispatch::Gettask1ButtonTip ( );
__declspec(implementation_key(698)) _bstr_t IWMPBrandDispatch::Gettask1MenuText ( );
__declspec(implementation_key(699)) _bstr_t IWMPBrandDispatch::Gettask1AccText ( );
__declspec(implementation_key(700)) _bstr_t IWMPBrandDispatch::Gettask2ButtonText ( );
__declspec(implementation_key(701)) _bstr_t IWMPBrandDispatch::Gettask2ButtonTip ( );
__declspec(implementation_key(702)) _bstr_t IWMPBrandDispatch::Gettask2MenuText ( );
__declspec(implementation_key(703)) _bstr_t IWMPBrandDispatch::Gettask2AccText ( );
__declspec(implementation_key(704)) _bstr_t IWMPBrandDispatch::Gettask3ButtonText ( );
__declspec(implementation_key(705)) _bstr_t IWMPBrandDispatch::Gettask3ButtonTip ( );
__declspec(implementation_key(706)) _bstr_t IWMPBrandDispatch::Gettask3MenuText ( );
__declspec(implementation_key(707)) _bstr_t IWMPBrandDispatch::Gettask3AccText ( );
__declspec(implementation_key(708)) _bstr_t IWMPBrandDispatch::GetguideUrl ( );
__declspec(implementation_key(709)) _bstr_t IWMPBrandDispatch::Gettask1Url ( );
__declspec(implementation_key(710)) _bstr_t IWMPBrandDispatch::Gettask2Url ( );
__declspec(implementation_key(711)) _bstr_t IWMPBrandDispatch::Gettask3Url ( );
__declspec(implementation_key(712)) _bstr_t IWMPBrandDispatch::GetimageLargeUrl ( );
__declspec(implementation_key(713)) _bstr_t IWMPBrandDispatch::GetimageSmallUrl ( );
__declspec(implementation_key(714)) _bstr_t IWMPBrandDispatch::GetimageMenuUrl ( );
__declspec(implementation_key(715)) _bstr_t IWMPBrandDispatch::GetinfoCenterUrl ( );
__declspec(implementation_key(716)) _bstr_t IWMPBrandDispatch::GetalbumInfoUrl ( );
__declspec(implementation_key(717)) _bstr_t IWMPBrandDispatch::GetbuyCDUrl ( );
__declspec(implementation_key(718)) _bstr_t IWMPBrandDispatch::GethtmlViewUrl ( );
__declspec(implementation_key(719)) _bstr_t IWMPBrandDispatch::GetnavigateUrl ( );
__declspec(implementation_key(720)) _bstr_t IWMPBrandDispatch::GetcookieUrl ( );
__declspec(implementation_key(721)) _bstr_t IWMPBrandDispatch::GetdownloadStatusUrl ( );
__declspec(implementation_key(722)) _bstr_t IWMPBrandDispatch::GetcolorPlayer ( );
__declspec(implementation_key(723)) _bstr_t IWMPBrandDispatch::GetcolorPlayerText ( );
__declspec(implementation_key(724)) long IWMPBrandDispatch::GetnavigateDispid ( );
__declspec(implementation_key(725)) _bstr_t IWMPBrandDispatch::GetnavigateParams ( );
__declspec(implementation_key(726)) _bstr_t IWMPBrandDispatch::GetnavigatePane ( );
__declspec(implementation_key(727)) _bstr_t IWMPBrandDispatch::GetselectedPane ( );
__declspec(implementation_key(728)) void IWMPBrandDispatch::PutselectedPane ( _bstr_t pVal );
__declspec(implementation_key(729)) HRESULT IWMPBrandDispatch::setNavigateProps ( _bstr_t bstrPane, long lDispid, _bstr_t bstrParams );
__declspec(implementation_key(730)) _bstr_t IWMPBrandDispatch::getMediaParams ( IUnknown * pObject, _bstr_t bstrURL );
__declspec(implementation_key(731)) void IWMPBrandDispatch::PutselectedTask ( long _arg1 );
__declspec(implementation_key(732)) _bstr_t IWMPNowPlayingHelperDispatch::GetviewFriendlyName ( _bstr_t bstrView );
__declspec(implementation_key(733)) long IWMPNowPlayingHelperDispatch::GetviewPresetCount ( _bstr_t bstrView );
__declspec(implementation_key(734)) _bstr_t IWMPNowPlayingHelperDispatch::GetviewPresetName ( _bstr_t bstrView, long nPresetIndex );
__declspec(implementation_key(735)) _bstr_t IWMPNowPlayingHelperDispatch::GeteffectFriendlyName ( _bstr_t bstrEffect );
__declspec(implementation_key(736)) _bstr_t IWMPNowPlayingHelperDispatch::GeteffectPresetName ( _bstr_t bstrEffect, long nPresetIndex );
__declspec(implementation_key(737)) _bstr_t IWMPNowPlayingHelperDispatch::resolveDisplayView ( VARIANT_BOOL fSafe );
__declspec(implementation_key(738)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::isValidDisplayView ( _bstr_t bstrView );
__declspec(implementation_key(739)) _bstr_t IWMPNowPlayingHelperDispatch::getSkinFile ( );
__declspec(implementation_key(740)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetcaptionsAvailable ( );
__declspec(implementation_key(741)) long IWMPNowPlayingHelperDispatch::GetlinkAvailable ( );
__declspec(implementation_key(742)) long IWMPNowPlayingHelperDispatch::GetlinkRequest ( );
__declspec(implementation_key(743)) void IWMPNowPlayingHelperDispatch::PutlinkRequest ( long pVal );
__declspec(implementation_key(744)) _bstr_t IWMPNowPlayingHelperDispatch::GetlinkRequestParams ( );
__declspec(implementation_key(745)) void IWMPNowPlayingHelperDispatch::PutlinkRequestParams ( _bstr_t pVal );
__declspec(implementation_key(746)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetisXPOrBetter ( );
__declspec(implementation_key(747)) long IWMPNowPlayingHelperDispatch::getCurrentArtID ( VARIANT_BOOL fLargeArt );
__declspec(implementation_key(748)) _bstr_t IWMPNowPlayingHelperDispatch::getTimeString ( double dTime );
__declspec(implementation_key(749)) _bstr_t IWMPNowPlayingHelperDispatch::getCurrentScriptCommand ( _bstr_t bstrType );
__declspec(implementation_key(750)) HRESULT IWMPNowPlayingHelperDispatch::calcLayout ( long lWidth, long lHeight, VARIANT_BOOL vbCaptions, VARIANT_BOOL vbBanner );
__declspec(implementation_key(751)) long IWMPNowPlayingHelperDispatch::getLayoutSize ( long nProp );
__declspec(implementation_key(752)) IDispatchPtr IWMPNowPlayingHelperDispatch::getRootPlaylist ( IDispatch * pPlaylist );
__declspec(implementation_key(753)) _bstr_t IWMPNowPlayingHelperDispatch::getHTMLViewURL ( );
__declspec(implementation_key(754)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetcanSendLink ( );
__declspec(implementation_key(755)) HRESULT IWMPNowPlayingHelperDispatch::sendLink ( double dblStartTime, double dblEndTime );
__declspec(implementation_key(756)) IUnknownPtr IWMPNowPlayingHelperDispatch::GeteditObj ( );
__declspec(implementation_key(757)) void IWMPNowPlayingHelperDispatch::PuteditObj ( IUnknown * ppVal );
__declspec(implementation_key(758)) _bstr_t IWMPNowPlayingHelperDispatch::getStatusString ( _bstr_t bstrCategory );
__declspec(implementation_key(759)) _bstr_t IWMPNowPlayingHelperDispatch::GetnotificationString ( );
__declspec(implementation_key(760)) _bstr_t IWMPNowPlayingHelperDispatch::GethtmlViewBaseURL ( );
__declspec(implementation_key(761)) void IWMPNowPlayingHelperDispatch::PuthtmlViewBaseURL ( _bstr_t pVal );
__declspec(implementation_key(762)) _bstr_t IWMPNowPlayingHelperDispatch::GethtmlViewFullURL ( );
__declspec(implementation_key(763)) void IWMPNowPlayingHelperDispatch::PuthtmlViewFullURL ( _bstr_t pVal );
__declspec(implementation_key(764)) long IWMPNowPlayingHelperDispatch::GethtmlViewSecureLock ( );
__declspec(implementation_key(765)) void IWMPNowPlayingHelperDispatch::PuthtmlViewSecureLock ( long pVal );
__declspec(implementation_key(766)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GethtmlViewBusy ( );
__declspec(implementation_key(767)) void IWMPNowPlayingHelperDispatch::PuthtmlViewBusy ( VARIANT_BOOL pVal );
__declspec(implementation_key(768)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GethtmlViewShowCert ( );
__declspec(implementation_key(769)) void IWMPNowPlayingHelperDispatch::PuthtmlViewShowCert ( VARIANT_BOOL pVal );
__declspec(implementation_key(770)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetpreviousEnabled ( );
__declspec(implementation_key(771)) void IWMPNowPlayingHelperDispatch::PutpreviousEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(772)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetdoPreviousNow ( );
__declspec(implementation_key(773)) void IWMPNowPlayingHelperDispatch::PutdoPreviousNow ( VARIANT_BOOL pVal );
__declspec(implementation_key(774)) long IWMPNowPlayingHelperDispatch::GetDPI ( );
__declspec(implementation_key(775)) HRESULT IWMPNowPlayingHelperDispatch::clearColors ( );
__declspec(implementation_key(776)) HRESULT IWMPButtonCtrlEvents::onclick ( );
__declspec(implementation_key(777)) _bstr_t IWMPButtonCtrl::Getimage ( );
__declspec(implementation_key(778)) void IWMPButtonCtrl::Putimage ( _bstr_t pVal );
__declspec(implementation_key(779)) _bstr_t IWMPButtonCtrl::GethoverImage ( );
__declspec(implementation_key(780)) void IWMPButtonCtrl::PuthoverImage ( _bstr_t pVal );
__declspec(implementation_key(781)) _bstr_t IWMPButtonCtrl::GetdownImage ( );
__declspec(implementation_key(782)) void IWMPButtonCtrl::PutdownImage ( _bstr_t pVal );
__declspec(implementation_key(783)) _bstr_t IWMPButtonCtrl::GetdisabledImage ( );
__declspec(implementation_key(784)) void IWMPButtonCtrl::PutdisabledImage ( _bstr_t pVal );
__declspec(implementation_key(785)) _bstr_t IWMPButtonCtrl::GethoverDownImage ( );
__declspec(implementation_key(786)) void IWMPButtonCtrl::PuthoverDownImage ( _bstr_t pVal );
__declspec(implementation_key(787)) VARIANT_BOOL IWMPButtonCtrl::Gettiled ( );
__declspec(implementation_key(788)) void IWMPButtonCtrl::Puttiled ( VARIANT_BOOL pVal );
__declspec(implementation_key(789)) _bstr_t IWMPButtonCtrl::GettransparencyColor ( );
__declspec(implementation_key(790)) void IWMPButtonCtrl::PuttransparencyColor ( _bstr_t pVal );
__declspec(implementation_key(791)) VARIANT_BOOL IWMPButtonCtrl::Getdown ( );
__declspec(implementation_key(792)) void IWMPButtonCtrl::Putdown ( VARIANT_BOOL pVal );
__declspec(implementation_key(793)) VARIANT_BOOL IWMPButtonCtrl::Getsticky ( );
__declspec(implementation_key(794)) void IWMPButtonCtrl::Putsticky ( VARIANT_BOOL pVal );
__declspec(implementation_key(795)) _bstr_t IWMPButtonCtrl::GetupToolTip ( );
__declspec(implementation_key(796)) void IWMPButtonCtrl::PutupToolTip ( _bstr_t pVal );
__declspec(implementation_key(797)) _bstr_t IWMPButtonCtrl::GetdownToolTip ( );
__declspec(implementation_key(798)) void IWMPButtonCtrl::PutdownToolTip ( _bstr_t pVal );
__declspec(implementation_key(799)) _bstr_t IWMPButtonCtrl::Getcursor ( );
__declspec(implementation_key(800)) void IWMPButtonCtrl::Putcursor ( _bstr_t pVal );
__declspec(implementation_key(801)) long IWMPListBoxCtrl::GetselectedItem ( );
__declspec(implementation_key(802)) void IWMPListBoxCtrl::PutselectedItem ( long pnPos );
__declspec(implementation_key(803)) VARIANT_BOOL IWMPListBoxCtrl::Getsorted ( );
__declspec(implementation_key(804)) void IWMPListBoxCtrl::Putsorted ( VARIANT_BOOL pVal );
__declspec(implementation_key(805)) VARIANT_BOOL IWMPListBoxCtrl::Getmultiselect ( );
__declspec(implementation_key(806)) void IWMPListBoxCtrl::Putmultiselect ( VARIANT_BOOL pVal );
__declspec(implementation_key(807)) VARIANT_BOOL IWMPListBoxCtrl::GetreadOnly ( );
__declspec(implementation_key(808)) void IWMPListBoxCtrl::PutreadOnly ( VARIANT_BOOL pVal );
__declspec(implementation_key(809)) _bstr_t IWMPListBoxCtrl::GetforegroundColor ( );
__declspec(implementation_key(810)) void IWMPListBoxCtrl::PutforegroundColor ( _bstr_t pVal );
__declspec(implementation_key(811)) _bstr_t IWMPListBoxCtrl::GetbackgroundColor ( );
__declspec(implementation_key(812)) void IWMPListBoxCtrl::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(813)) long IWMPListBoxCtrl::GetfontSize ( );
__declspec(implementation_key(814)) void IWMPListBoxCtrl::PutfontSize ( long pVal );
__declspec(implementation_key(815)) _bstr_t IWMPListBoxCtrl::GetfontStyle ( );
__declspec(implementation_key(816)) void IWMPListBoxCtrl::PutfontStyle ( _bstr_t pVal );
__declspec(implementation_key(817)) _bstr_t IWMPListBoxCtrl::GetfontFace ( );
__declspec(implementation_key(818)) void IWMPListBoxCtrl::PutfontFace ( _bstr_t pVal );
__declspec(implementation_key(819)) long IWMPListBoxCtrl::GetitemCount ( );
__declspec(implementation_key(820)) long IWMPListBoxCtrl::GetfirstVisibleItem ( );
__declspec(implementation_key(821)) void IWMPListBoxCtrl::PutfirstVisibleItem ( long pVal );
__declspec(implementation_key(822)) void IWMPListBoxCtrl::PutpopUp ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(823)) long IWMPListBoxCtrl::GetfocusItem ( );
__declspec(implementation_key(824)) void IWMPListBoxCtrl::PutfocusItem ( long pVal );
__declspec(implementation_key(825)) VARIANT_BOOL IWMPListBoxCtrl::Getborder ( );
__declspec(implementation_key(826)) void IWMPListBoxCtrl::Putborder ( VARIANT_BOOL pVal );
__declspec(implementation_key(827)) _bstr_t IWMPListBoxCtrl::getItem ( long nPos );
__declspec(implementation_key(828)) HRESULT IWMPListBoxCtrl::insertItem ( long nPos, _bstr_t newVal );
__declspec(implementation_key(829)) HRESULT IWMPListBoxCtrl::appendItem ( _bstr_t newVal );
__declspec(implementation_key(830)) HRESULT IWMPListBoxCtrl::replaceItem ( long nPos, _bstr_t newVal );
__declspec(implementation_key(831)) HRESULT IWMPListBoxCtrl::deleteItem ( long nPos );
__declspec(implementation_key(832)) HRESULT IWMPListBoxCtrl::deleteAll ( );
__declspec(implementation_key(833)) long IWMPListBoxCtrl::findItem ( long nStartIndex, _bstr_t newVal );
__declspec(implementation_key(834)) long IWMPListBoxCtrl::getNextSelectedItem ( long nStartIndex );
__declspec(implementation_key(835)) HRESULT IWMPListBoxCtrl::setSelectedState ( long nPos, VARIANT_BOOL vbSelected );
__declspec(implementation_key(836)) HRESULT IWMPListBoxCtrl::show ( );
__declspec(implementation_key(837)) HRESULT IWMPListBoxCtrl::dismiss ( );
__declspec(implementation_key(838)) void IWMPListBoxItem::Putvalue ( _bstr_t _arg1 );
__declspec(implementation_key(839)) _bstr_t IWMPPlaylistCtrlColumn::GetcolumnName ( );
__declspec(implementation_key(840)) void IWMPPlaylistCtrlColumn::PutcolumnName ( _bstr_t pVal );
__declspec(implementation_key(841)) _bstr_t IWMPPlaylistCtrlColumn::GetcolumnID ( );
__declspec(implementation_key(842)) void IWMPPlaylistCtrlColumn::PutcolumnID ( _bstr_t pVal );
__declspec(implementation_key(843)) _bstr_t IWMPPlaylistCtrlColumn::GetcolumnResizeMode ( );
__declspec(implementation_key(844)) void IWMPPlaylistCtrlColumn::PutcolumnResizeMode ( _bstr_t pVal );
__declspec(implementation_key(845)) long IWMPPlaylistCtrlColumn::GetcolumnWidth ( );
__declspec(implementation_key(846)) void IWMPPlaylistCtrlColumn::PutcolumnWidth ( long pVal );
__declspec(implementation_key(847)) HRESULT IWMPSliderCtrlEvents::ondragbegin ( );
__declspec(implementation_key(848)) HRESULT IWMPSliderCtrlEvents::ondragend ( );
__declspec(implementation_key(849)) HRESULT IWMPSliderCtrlEvents::onpositionchange ( );
__declspec(implementation_key(850)) _bstr_t IWMPSliderCtrl::Getdirection ( );
__declspec(implementation_key(851)) void IWMPSliderCtrl::Putdirection ( _bstr_t pVal );
__declspec(implementation_key(852)) VARIANT_BOOL IWMPSliderCtrl::Getslide ( );
__declspec(implementation_key(853)) void IWMPSliderCtrl::Putslide ( VARIANT_BOOL pVal );
__declspec(implementation_key(854)) VARIANT_BOOL IWMPSliderCtrl::Gettiled ( );
__declspec(implementation_key(855)) void IWMPSliderCtrl::Puttiled ( VARIANT_BOOL pVal );
__declspec(implementation_key(856)) _bstr_t IWMPSliderCtrl::GetforegroundColor ( );
__declspec(implementation_key(857)) void IWMPSliderCtrl::PutforegroundColor ( _bstr_t pVal );
__declspec(implementation_key(858)) _bstr_t IWMPSliderCtrl::GetforegroundEndColor ( );
__declspec(implementation_key(859)) void IWMPSliderCtrl::PutforegroundEndColor ( _bstr_t pVal );
__declspec(implementation_key(860)) _bstr_t IWMPSliderCtrl::GetbackgroundColor ( );
__declspec(implementation_key(861)) void IWMPSliderCtrl::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(862)) _bstr_t IWMPSliderCtrl::GetbackgroundEndColor ( );
__declspec(implementation_key(863)) void IWMPSliderCtrl::PutbackgroundEndColor ( _bstr_t pVal );
__declspec(implementation_key(864)) _bstr_t IWMPSliderCtrl::GetdisabledColor ( );
__declspec(implementation_key(865)) void IWMPSliderCtrl::PutdisabledColor ( _bstr_t pVal );
__declspec(implementation_key(866)) _bstr_t IWMPSliderCtrl::GettransparencyColor ( );
__declspec(implementation_key(867)) void IWMPSliderCtrl::PuttransparencyColor ( _bstr_t pVal );
__declspec(implementation_key(868)) _bstr_t IWMPSliderCtrl::GetforegroundImage ( );
__declspec(implementation_key(869)) void IWMPSliderCtrl::PutforegroundImage ( _bstr_t pVal );
__declspec(implementation_key(870)) _bstr_t IWMPSliderCtrl::GetbackgroundImage ( );
__declspec(implementation_key(871)) void IWMPSliderCtrl::PutbackgroundImage ( _bstr_t pVal );
__declspec(implementation_key(872)) _bstr_t IWMPSliderCtrl::GetbackgroundHoverImage ( );
__declspec(implementation_key(873)) void IWMPSliderCtrl::PutbackgroundHoverImage ( _bstr_t pVal );
__declspec(implementation_key(874)) _bstr_t IWMPSliderCtrl::GetdisabledImage ( );
__declspec(implementation_key(875)) void IWMPSliderCtrl::PutdisabledImage ( _bstr_t pVal );
__declspec(implementation_key(876)) _bstr_t IWMPSliderCtrl::GetthumbImage ( );
__declspec(implementation_key(877)) void IWMPSliderCtrl::PutthumbImage ( _bstr_t pVal );
__declspec(implementation_key(878)) _bstr_t IWMPSliderCtrl::GetthumbHoverImage ( );
__declspec(implementation_key(879)) void IWMPSliderCtrl::PutthumbHoverImage ( _bstr_t pVal );
__declspec(implementation_key(880)) _bstr_t IWMPSliderCtrl::GetthumbDownImage ( );
__declspec(implementation_key(881)) void IWMPSliderCtrl::PutthumbDownImage ( _bstr_t pVal );
__declspec(implementation_key(882)) _bstr_t IWMPSliderCtrl::GetthumbDisabledImage ( );
__declspec(implementation_key(883)) void IWMPSliderCtrl::PutthumbDisabledImage ( _bstr_t pVal );
__declspec(implementation_key(884)) float IWMPSliderCtrl::Getmin ( );
__declspec(implementation_key(885)) void IWMPSliderCtrl::Putmin ( float pVal );
__declspec(implementation_key(886)) float IWMPSliderCtrl::Getmax ( );
__declspec(implementation_key(887)) void IWMPSliderCtrl::Putmax ( float pVal );
__declspec(implementation_key(888)) float IWMPSliderCtrl::Getvalue ( );
__declspec(implementation_key(889)) void IWMPSliderCtrl::Putvalue ( float pVal );
__declspec(implementation_key(890)) _bstr_t IWMPSliderCtrl::GettoolTip ( );
__declspec(implementation_key(891)) void IWMPSliderCtrl::PuttoolTip ( _bstr_t pVal );
__declspec(implementation_key(892)) _bstr_t IWMPSliderCtrl::Getcursor ( );
__declspec(implementation_key(893)) void IWMPSliderCtrl::Putcursor ( _bstr_t pVal );
__declspec(implementation_key(894)) int IWMPSliderCtrl::GetborderSize ( );
__declspec(implementation_key(895)) void IWMPSliderCtrl::PutborderSize ( int pVal );
__declspec(implementation_key(896)) _bstr_t IWMPSliderCtrl::GetforegroundHoverImage ( );
__declspec(implementation_key(897)) void IWMPSliderCtrl::PutforegroundHoverImage ( _bstr_t pVal );
__declspec(implementation_key(898)) float IWMPSliderCtrl::GetforegroundProgress ( );
__declspec(implementation_key(899)) void IWMPSliderCtrl::PutforegroundProgress ( float pVal );
__declspec(implementation_key(900)) VARIANT_BOOL IWMPSliderCtrl::GetuseForegroundProgress ( );
__declspec(implementation_key(901)) void IWMPSliderCtrl::PutuseForegroundProgress ( VARIANT_BOOL pVal );
__declspec(implementation_key(902)) HRESULT IWMPVideoCtrlEvents::onvideostart ( );
__declspec(implementation_key(903)) HRESULT IWMPVideoCtrlEvents::onvideoend ( );
__declspec(implementation_key(904)) void IWMPVideoCtrl::Putwindowless ( VARIANT_BOOL pbClipped );
__declspec(implementation_key(905)) VARIANT_BOOL IWMPVideoCtrl::Getwindowless ( );
__declspec(implementation_key(906)) void IWMPVideoCtrl::Putcursor ( _bstr_t pbstrCursor );
__declspec(implementation_key(907)) _bstr_t IWMPVideoCtrl::Getcursor ( );
__declspec(implementation_key(908)) void IWMPVideoCtrl::PutbackgroundColor ( _bstr_t pbstrColor );
__declspec(implementation_key(909)) _bstr_t IWMPVideoCtrl::GetbackgroundColor ( );
__declspec(implementation_key(910)) void IWMPVideoCtrl::PutmaintainAspectRatio ( VARIANT_BOOL pbMaintainAspectRatio );
__declspec(implementation_key(911)) VARIANT_BOOL IWMPVideoCtrl::GetmaintainAspectRatio ( );
__declspec(implementation_key(912)) void IWMPVideoCtrl::PuttoolTip ( _bstr_t bstrToolTip );
__declspec(implementation_key(913)) _bstr_t IWMPVideoCtrl::GettoolTip ( );
__declspec(implementation_key(914)) VARIANT_BOOL IWMPVideoCtrl::GetfullScreen ( );
__declspec(implementation_key(915)) void IWMPVideoCtrl::PutfullScreen ( VARIANT_BOOL pbFullScreen );
__declspec(implementation_key(916)) void IWMPVideoCtrl::PutshrinkToFit ( VARIANT_BOOL pbShrinkToFit );
__declspec(implementation_key(917)) VARIANT_BOOL IWMPVideoCtrl::GetshrinkToFit ( );
__declspec(implementation_key(918)) void IWMPVideoCtrl::PutstretchToFit ( VARIANT_BOOL pbStretchToFit );
__declspec(implementation_key(919)) VARIANT_BOOL IWMPVideoCtrl::GetstretchToFit ( );
__declspec(implementation_key(920)) void IWMPVideoCtrl::Putzoom ( long pzoom );
__declspec(implementation_key(921)) long IWMPVideoCtrl::Getzoom ( );
__declspec(implementation_key(922)) VARIANT_BOOL IWMPEffectsCtrl::Getwindowed ( );
__declspec(implementation_key(923)) void IWMPEffectsCtrl::Putwindowed ( VARIANT_BOOL pVal );
__declspec(implementation_key(924)) VARIANT_BOOL IWMPEffectsCtrl::GetallowAll ( );
__declspec(implementation_key(925)) void IWMPEffectsCtrl::PutallowAll ( VARIANT_BOOL pVal );
__declspec(implementation_key(926)) void IWMPEffectsCtrl::PutcurrentEffectType ( _bstr_t pVal );
__declspec(implementation_key(927)) _bstr_t IWMPEffectsCtrl::GetcurrentEffectType ( );
__declspec(implementation_key(928)) _bstr_t IWMPEffectsCtrl::GetcurrentEffectTitle ( );
__declspec(implementation_key(929)) HRESULT IWMPEffectsCtrl::next ( );
__declspec(implementation_key(930)) HRESULT IWMPEffectsCtrl::previous ( );
__declspec(implementation_key(931)) HRESULT IWMPEffectsCtrl::settings ( );
__declspec(implementation_key(932)) IDispatchPtr IWMPEffectsCtrl::GetcurrentEffect ( );
__declspec(implementation_key(933)) void IWMPEffectsCtrl::PutcurrentEffect ( IDispatch * p );
__declspec(implementation_key(934)) HRESULT IWMPEffectsCtrl::nextEffect ( );
__declspec(implementation_key(935)) HRESULT IWMPEffectsCtrl::previousEffect ( );
__declspec(implementation_key(936)) HRESULT IWMPEffectsCtrl::nextPreset ( );
__declspec(implementation_key(937)) HRESULT IWMPEffectsCtrl::previousPreset ( );
__declspec(implementation_key(938)) long IWMPEffectsCtrl::GetcurrentPreset ( );
__declspec(implementation_key(939)) void IWMPEffectsCtrl::PutcurrentPreset ( long pVal );
__declspec(implementation_key(940)) _bstr_t IWMPEffectsCtrl::GetcurrentPresetTitle ( );
__declspec(implementation_key(941)) long IWMPEffectsCtrl::GetcurrentEffectPresetCount ( );
__declspec(implementation_key(942)) VARIANT_BOOL IWMPEffectsCtrl::GetfullScreen ( );
__declspec(implementation_key(943)) void IWMPEffectsCtrl::PutfullScreen ( VARIANT_BOOL pbFullScreen );
__declspec(implementation_key(944)) VARIANT_BOOL IWMPEffectsCtrl::GeteffectCanGoFullScreen ( );
__declspec(implementation_key(945)) VARIANT_BOOL IWMPEffectsCtrl::GeteffectHasPropertyPage ( );
__declspec(implementation_key(946)) long IWMPEffectsCtrl::GeteffectCount ( );
__declspec(implementation_key(947)) _bstr_t IWMPEffectsCtrl::GeteffectTitle ( long index );
__declspec(implementation_key(948)) _bstr_t IWMPEffectsCtrl::GeteffectType ( long index );
__declspec(implementation_key(949)) VARIANT_BOOL IWMPEqualizerSettingsCtrl::Getbypass ( );
__declspec(implementation_key(950)) void IWMPEqualizerSettingsCtrl::Putbypass ( VARIANT_BOOL pVal );
__declspec(implementation_key(951)) float IWMPEqualizerSettingsCtrl::GetgainLevel1 ( );
__declspec(implementation_key(952)) void IWMPEqualizerSettingsCtrl::PutgainLevel1 ( float pflLevel );
__declspec(implementation_key(953)) float IWMPEqualizerSettingsCtrl::GetgainLevel2 ( );
__declspec(implementation_key(954)) void IWMPEqualizerSettingsCtrl::PutgainLevel2 ( float pflLevel );
__declspec(implementation_key(955)) float IWMPEqualizerSettingsCtrl::GetgainLevel3 ( );
__declspec(implementation_key(956)) void IWMPEqualizerSettingsCtrl::PutgainLevel3 ( float pflLevel );
__declspec(implementation_key(957)) float IWMPEqualizerSettingsCtrl::GetgainLevel4 ( );
__declspec(implementation_key(958)) void IWMPEqualizerSettingsCtrl::PutgainLevel4 ( float pflLevel );
__declspec(implementation_key(959)) float IWMPEqualizerSettingsCtrl::GetgainLevel5 ( );
__declspec(implementation_key(960)) void IWMPEqualizerSettingsCtrl::PutgainLevel5 ( float pflLevel );
__declspec(implementation_key(961)) float IWMPEqualizerSettingsCtrl::GetgainLevel6 ( );
__declspec(implementation_key(962)) void IWMPEqualizerSettingsCtrl::PutgainLevel6 ( float pflLevel );
__declspec(implementation_key(963)) float IWMPEqualizerSettingsCtrl::GetgainLevel7 ( );
__declspec(implementation_key(964)) void IWMPEqualizerSettingsCtrl::PutgainLevel7 ( float pflLevel );
__declspec(implementation_key(965)) float IWMPEqualizerSettingsCtrl::GetgainLevel8 ( );
__declspec(implementation_key(966)) void IWMPEqualizerSettingsCtrl::PutgainLevel8 ( float pflLevel );
__declspec(implementation_key(967)) float IWMPEqualizerSettingsCtrl::GetgainLevel9 ( );
__declspec(implementation_key(968)) void IWMPEqualizerSettingsCtrl::PutgainLevel9 ( float pflLevel );
__declspec(implementation_key(969)) float IWMPEqualizerSettingsCtrl::GetgainLevel10 ( );
__declspec(implementation_key(970)) void IWMPEqualizerSettingsCtrl::PutgainLevel10 ( float pflLevel );
__declspec(implementation_key(971)) float IWMPEqualizerSettingsCtrl::GetgainLevels ( long iIndex );
__declspec(implementation_key(972)) void IWMPEqualizerSettingsCtrl::PutgainLevels ( long iIndex, float pflLevel );
__declspec(implementation_key(973)) HRESULT IWMPEqualizerSettingsCtrl::reset ( );
__declspec(implementation_key(974)) long IWMPEqualizerSettingsCtrl::Getbands ( );
__declspec(implementation_key(975)) HRESULT IWMPEqualizerSettingsCtrl::nextPreset ( );
__declspec(implementation_key(976)) HRESULT IWMPEqualizerSettingsCtrl::previousPreset ( );
__declspec(implementation_key(977)) long IWMPEqualizerSettingsCtrl::GetcurrentPreset ( );
__declspec(implementation_key(978)) void IWMPEqualizerSettingsCtrl::PutcurrentPreset ( long pVal );
__declspec(implementation_key(979)) _bstr_t IWMPEqualizerSettingsCtrl::GetcurrentPresetTitle ( );
__declspec(implementation_key(980)) long IWMPEqualizerSettingsCtrl::GetpresetCount ( );
__declspec(implementation_key(981)) VARIANT_BOOL IWMPEqualizerSettingsCtrl::GetenhancedAudio ( );
__declspec(implementation_key(982)) void IWMPEqualizerSettingsCtrl::PutenhancedAudio ( VARIANT_BOOL pfVal );
__declspec(implementation_key(983)) long IWMPEqualizerSettingsCtrl::GetspeakerSize ( );
__declspec(implementation_key(984)) void IWMPEqualizerSettingsCtrl::PutspeakerSize ( long plVal );
__declspec(implementation_key(985)) _bstr_t IWMPEqualizerSettingsCtrl::GetcurrentSpeakerName ( );
__declspec(implementation_key(986)) long IWMPEqualizerSettingsCtrl::GettruBassLevel ( );
__declspec(implementation_key(987)) void IWMPEqualizerSettingsCtrl::PuttruBassLevel ( long plTruBassLevel );
__declspec(implementation_key(988)) long IWMPEqualizerSettingsCtrl::GetwowLevel ( );
__declspec(implementation_key(989)) void IWMPEqualizerSettingsCtrl::PutwowLevel ( long plWowLevel );
__declspec(implementation_key(990)) float IWMPEqualizerSettingsCtrl::GetsplineTension ( );
__declspec(implementation_key(991)) void IWMPEqualizerSettingsCtrl::PutsplineTension ( float pflSplineTension );
__declspec(implementation_key(992)) VARIANT_BOOL IWMPEqualizerSettingsCtrl::GetenableSplineTension ( );
__declspec(implementation_key(993)) void IWMPEqualizerSettingsCtrl::PutenableSplineTension ( VARIANT_BOOL pfEnableSplineTension );
__declspec(implementation_key(994)) _bstr_t IWMPEqualizerSettingsCtrl::GetpresetTitle ( long iIndex );
__declspec(implementation_key(995)) VARIANT_BOOL IWMPEqualizerSettingsCtrl::Getnormalization ( );
__declspec(implementation_key(996)) void IWMPEqualizerSettingsCtrl::Putnormalization ( VARIANT_BOOL pfVal );
__declspec(implementation_key(997)) float IWMPEqualizerSettingsCtrl::GetnormalizationAverage ( );
__declspec(implementation_key(998)) float IWMPEqualizerSettingsCtrl::GetnormalizationPeak ( );
__declspec(implementation_key(999)) VARIANT_BOOL IWMPEqualizerSettingsCtrl::GetcrossFade ( );
__declspec(implementation_key(1000)) void IWMPEqualizerSettingsCtrl::PutcrossFade ( VARIANT_BOOL pfVal );
__declspec(implementation_key(1001)) long IWMPEqualizerSettingsCtrl::GetcrossFadeWindow ( );
__declspec(implementation_key(1002)) void IWMPEqualizerSettingsCtrl::PutcrossFadeWindow ( long plWindow );
__declspec(implementation_key(1003)) long IWMPVideoSettingsCtrl::Getbrightness ( );
__declspec(implementation_key(1004)) void IWMPVideoSettingsCtrl::Putbrightness ( long pVal );
__declspec(implementation_key(1005)) long IWMPVideoSettingsCtrl::Getcontrast ( );
__declspec(implementation_key(1006)) void IWMPVideoSettingsCtrl::Putcontrast ( long pVal );
__declspec(implementation_key(1007)) long IWMPVideoSettingsCtrl::Gethue ( );
__declspec(implementation_key(1008)) void IWMPVideoSettingsCtrl::Puthue ( long pVal );
__declspec(implementation_key(1009)) long IWMPVideoSettingsCtrl::Getsaturation ( );
__declspec(implementation_key(1010)) void IWMPVideoSettingsCtrl::Putsaturation ( long pVal );
__declspec(implementation_key(1011)) HRESULT IWMPVideoSettingsCtrl::reset ( );
__declspec(implementation_key(1012)) VARIANT_BOOL IWMPLibraryTreeCtrl::GetdropDownVisible ( );
__declspec(implementation_key(1013)) void IWMPLibraryTreeCtrl::PutdropDownVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1014)) _bstr_t IWMPLibraryTreeCtrl::GetforegroundColor ( );
__declspec(implementation_key(1015)) void IWMPLibraryTreeCtrl::PutforegroundColor ( _bstr_t pVal );
__declspec(implementation_key(1016)) _bstr_t IWMPLibraryTreeCtrl::GetbackgroundColor ( );
__declspec(implementation_key(1017)) void IWMPLibraryTreeCtrl::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1018)) long IWMPLibraryTreeCtrl::GetfontSize ( );
__declspec(implementation_key(1019)) void IWMPLibraryTreeCtrl::PutfontSize ( long pVal );
__declspec(implementation_key(1020)) _bstr_t IWMPLibraryTreeCtrl::GetfontStyle ( );
__declspec(implementation_key(1021)) void IWMPLibraryTreeCtrl::PutfontStyle ( _bstr_t pVal );
__declspec(implementation_key(1022)) _bstr_t IWMPLibraryTreeCtrl::GetfontFace ( );
__declspec(implementation_key(1023)) void IWMPLibraryTreeCtrl::PutfontFace ( _bstr_t pVal );
__declspec(implementation_key(1024)) _bstr_t IWMPLibraryTreeCtrl::Getfilter ( );
__declspec(implementation_key(1025)) void IWMPLibraryTreeCtrl::Putfilter ( _bstr_t pVal );
__declspec(implementation_key(1026)) _bstr_t IWMPLibraryTreeCtrl::GetexpandState ( );
__declspec(implementation_key(1027)) void IWMPLibraryTreeCtrl::PutexpandState ( _bstr_t pVal );
__declspec(implementation_key(1028)) IWMPPlaylistPtr IWMPLibraryTreeCtrl::GetPlaylist ( );
__declspec(implementation_key(1029)) void IWMPLibraryTreeCtrl::PutPlaylist ( struct IWMPPlaylist * ppPlaylist );
__declspec(implementation_key(1030)) IWMPPlaylistPtr IWMPLibraryTreeCtrl::GetselectedPlaylist ( );
__declspec(implementation_key(1031)) IWMPMediaPtr IWMPLibraryTreeCtrl::GetselectedMedia ( );
__declspec(implementation_key(1032)) _bstr_t IWMPEditCtrl::Getvalue ( );
__declspec(implementation_key(1033)) void IWMPEditCtrl::Putvalue ( _bstr_t pVal );
__declspec(implementation_key(1034)) VARIANT_BOOL IWMPEditCtrl::Getborder ( );
__declspec(implementation_key(1035)) void IWMPEditCtrl::Putborder ( VARIANT_BOOL pVal );
__declspec(implementation_key(1036)) _bstr_t IWMPEditCtrl::Getjustification ( );
__declspec(implementation_key(1037)) void IWMPEditCtrl::Putjustification ( _bstr_t pVal );
__declspec(implementation_key(1038)) _bstr_t IWMPEditCtrl::GeteditStyle ( );
__declspec(implementation_key(1039)) void IWMPEditCtrl::PuteditStyle ( _bstr_t pVal );
__declspec(implementation_key(1040)) VARIANT_BOOL IWMPEditCtrl::GetwordWrap ( );
__declspec(implementation_key(1041)) void IWMPEditCtrl::PutwordWrap ( VARIANT_BOOL pVal );
__declspec(implementation_key(1042)) VARIANT_BOOL IWMPEditCtrl::GetreadOnly ( );
__declspec(implementation_key(1043)) void IWMPEditCtrl::PutreadOnly ( VARIANT_BOOL pVal );
__declspec(implementation_key(1044)) _bstr_t IWMPEditCtrl::GetforegroundColor ( );
__declspec(implementation_key(1045)) void IWMPEditCtrl::PutforegroundColor ( _bstr_t pVal );
__declspec(implementation_key(1046)) _bstr_t IWMPEditCtrl::GetbackgroundColor ( );
__declspec(implementation_key(1047)) void IWMPEditCtrl::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1048)) long IWMPEditCtrl::GetfontSize ( );
__declspec(implementation_key(1049)) void IWMPEditCtrl::PutfontSize ( long pVal );
__declspec(implementation_key(1050)) _bstr_t IWMPEditCtrl::GetfontStyle ( );
__declspec(implementation_key(1051)) void IWMPEditCtrl::PutfontStyle ( _bstr_t pVal );
__declspec(implementation_key(1052)) _bstr_t IWMPEditCtrl::GetfontFace ( );
__declspec(implementation_key(1053)) void IWMPEditCtrl::PutfontFace ( _bstr_t pVal );
__declspec(implementation_key(1054)) long IWMPEditCtrl::GettextLimit ( );
__declspec(implementation_key(1055)) void IWMPEditCtrl::PuttextLimit ( long pVal );
__declspec(implementation_key(1056)) long IWMPEditCtrl::GetlineCount ( );
__declspec(implementation_key(1057)) _bstr_t IWMPEditCtrl::getLine ( long nIndex );
__declspec(implementation_key(1058)) long IWMPEditCtrl::getSelectionStart ( );
__declspec(implementation_key(1059)) long IWMPEditCtrl::getSelectionEnd ( );
__declspec(implementation_key(1060)) HRESULT IWMPEditCtrl::setSelection ( long nStart, long nEnd );
__declspec(implementation_key(1061)) HRESULT IWMPEditCtrl::replaceSelection ( _bstr_t newVal );
__declspec(implementation_key(1062)) long IWMPEditCtrl::getLineIndex ( long nIndex );
__declspec(implementation_key(1063)) long IWMPEditCtrl::getLineFromChar ( long nPosition );
__declspec(implementation_key(1064)) _bstr_t IWMPPluginUIHost::GetbackgroundColor ( );
__declspec(implementation_key(1065)) void IWMPPluginUIHost::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1066)) _bstr_t IWMPPluginUIHost::GetobjectID ( );
__declspec(implementation_key(1067)) void IWMPPluginUIHost::PutobjectID ( _bstr_t pVal );
__declspec(implementation_key(1068)) _variant_t IWMPPluginUIHost::getProperty ( _bstr_t bstrName );
__declspec(implementation_key(1069)) HRESULT IWMPPluginUIHost::setProperty ( _bstr_t bstrName, const _variant_t & newVal );
__declspec(implementation_key(1070)) HRESULT IWMPMenuCtrl::deleteAllItems ( );
__declspec(implementation_key(1071)) HRESULT IWMPMenuCtrl::appendItem ( long nID, _bstr_t bstrItem );
__declspec(implementation_key(1072)) HRESULT IWMPMenuCtrl::appendSeparator ( );
__declspec(implementation_key(1073)) HRESULT IWMPMenuCtrl::enableItem ( long nID, VARIANT_BOOL newVal );
__declspec(implementation_key(1074)) HRESULT IWMPMenuCtrl::checkItem ( long nID, VARIANT_BOOL newVal );
__declspec(implementation_key(1075)) HRESULT IWMPMenuCtrl::checkRadioItem ( long nID, VARIANT_BOOL newVal );
__declspec(implementation_key(1076)) long IWMPMenuCtrl::GetshowFlags ( );
__declspec(implementation_key(1077)) void IWMPMenuCtrl::PutshowFlags ( long pVal );
__declspec(implementation_key(1078)) long IWMPMenuCtrl::show ( );
__declspec(implementation_key(1079)) HRESULT IWMPMenuCtrl::showEx ( long nID );
__declspec(implementation_key(1080)) HRESULT IWMPAutoMenuCtrl::show ( _bstr_t newVal );
__declspec(implementation_key(1081)) _bstr_t IWMPRegionalButtonCtrl::Getimage ( );
__declspec(implementation_key(1082)) void IWMPRegionalButtonCtrl::Putimage ( _bstr_t pVal );
__declspec(implementation_key(1083)) _bstr_t IWMPRegionalButtonCtrl::GethoverImage ( );
__declspec(implementation_key(1084)) void IWMPRegionalButtonCtrl::PuthoverImage ( _bstr_t pVal );
__declspec(implementation_key(1085)) _bstr_t IWMPRegionalButtonCtrl::GetdownImage ( );
__declspec(implementation_key(1086)) void IWMPRegionalButtonCtrl::PutdownImage ( _bstr_t pVal );
__declspec(implementation_key(1087)) _bstr_t IWMPRegionalButtonCtrl::GethoverDownImage ( );
__declspec(implementation_key(1088)) void IWMPRegionalButtonCtrl::PuthoverDownImage ( _bstr_t pVal );
__declspec(implementation_key(1089)) _bstr_t IWMPRegionalButtonCtrl::GetdisabledImage ( );
__declspec(implementation_key(1090)) void IWMPRegionalButtonCtrl::PutdisabledImage ( _bstr_t pVal );
__declspec(implementation_key(1091)) _bstr_t IWMPRegionalButtonCtrl::GetmappingImage ( );
__declspec(implementation_key(1092)) void IWMPRegionalButtonCtrl::PutmappingImage ( _bstr_t pVal );
__declspec(implementation_key(1093)) _bstr_t IWMPRegionalButtonCtrl::GettransparencyColor ( );
__declspec(implementation_key(1094)) void IWMPRegionalButtonCtrl::PuttransparencyColor ( _bstr_t pVal );
__declspec(implementation_key(1095)) _bstr_t IWMPRegionalButtonCtrl::Getcursor ( );
__declspec(implementation_key(1096)) void IWMPRegionalButtonCtrl::Putcursor ( _bstr_t pVal );
__declspec(implementation_key(1097)) VARIANT_BOOL IWMPRegionalButtonCtrl::GetshowBackground ( );
__declspec(implementation_key(1098)) void IWMPRegionalButtonCtrl::PutshowBackground ( VARIANT_BOOL pVal );
__declspec(implementation_key(1099)) VARIANT_BOOL IWMPRegionalButtonCtrl::Getradio ( );
__declspec(implementation_key(1100)) void IWMPRegionalButtonCtrl::Putradio ( VARIANT_BOOL pVal );
__declspec(implementation_key(1101)) long IWMPRegionalButtonCtrl::GetbuttonCount ( );
__declspec(implementation_key(1102)) IDispatchPtr IWMPRegionalButtonCtrl::createButton ( );
__declspec(implementation_key(1103)) IDispatchPtr IWMPRegionalButtonCtrl::getButton ( long nButton );
__declspec(implementation_key(1104)) HRESULT IWMPRegionalButtonCtrl::Click ( long nButton );
__declspec(implementation_key(1105)) float IWMPRegionalButtonCtrl::GethueShift ( );
__declspec(implementation_key(1106)) void IWMPRegionalButtonCtrl::PuthueShift ( float pVal );
__declspec(implementation_key(1107)) float IWMPRegionalButtonCtrl::Getsaturation ( );
__declspec(implementation_key(1108)) void IWMPRegionalButtonCtrl::Putsaturation ( float pVal );
__declspec(implementation_key(1109)) HRESULT IWMPRegionalButtonEvents::onblur ( );
__declspec(implementation_key(1110)) HRESULT IWMPRegionalButtonEvents::onfocus ( );
__declspec(implementation_key(1111)) HRESULT IWMPRegionalButtonEvents::onclick ( );
__declspec(implementation_key(1112)) HRESULT IWMPRegionalButtonEvents::ondblclick ( );
__declspec(implementation_key(1113)) HRESULT IWMPRegionalButtonEvents::onmousedown ( );
__declspec(implementation_key(1114)) HRESULT IWMPRegionalButtonEvents::onmouseup ( );
__declspec(implementation_key(1115)) HRESULT IWMPRegionalButtonEvents::onmousemove ( );
__declspec(implementation_key(1116)) HRESULT IWMPRegionalButtonEvents::onmouseover ( );
__declspec(implementation_key(1117)) HRESULT IWMPRegionalButtonEvents::onmouseout ( );
__declspec(implementation_key(1118)) HRESULT IWMPRegionalButtonEvents::onkeypress ( );
__declspec(implementation_key(1119)) HRESULT IWMPRegionalButtonEvents::onkeydown ( );
__declspec(implementation_key(1120)) HRESULT IWMPRegionalButtonEvents::onkeyup ( );
__declspec(implementation_key(1121)) _bstr_t IWMPRegionalButton::GetupToolTip ( );
__declspec(implementation_key(1122)) void IWMPRegionalButton::PutupToolTip ( _bstr_t pVal );
__declspec(implementation_key(1123)) _bstr_t IWMPRegionalButton::GetdownToolTip ( );
__declspec(implementation_key(1124)) void IWMPRegionalButton::PutdownToolTip ( _bstr_t pVal );
__declspec(implementation_key(1125)) _bstr_t IWMPRegionalButton::GetmappingColor ( );
__declspec(implementation_key(1126)) void IWMPRegionalButton::PutmappingColor ( _bstr_t pVal );
__declspec(implementation_key(1127)) VARIANT_BOOL IWMPRegionalButton::Getenabled ( );
__declspec(implementation_key(1128)) void IWMPRegionalButton::Putenabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(1129)) VARIANT_BOOL IWMPRegionalButton::Getsticky ( );
__declspec(implementation_key(1130)) void IWMPRegionalButton::Putsticky ( VARIANT_BOOL pVal );
__declspec(implementation_key(1131)) VARIANT_BOOL IWMPRegionalButton::Getdown ( );
__declspec(implementation_key(1132)) void IWMPRegionalButton::Putdown ( VARIANT_BOOL pVal );
__declspec(implementation_key(1133)) long IWMPRegionalButton::Getindex ( );
__declspec(implementation_key(1134)) VARIANT_BOOL IWMPRegionalButton::GettabStop ( );
__declspec(implementation_key(1135)) void IWMPRegionalButton::PuttabStop ( VARIANT_BOOL pVal );
__declspec(implementation_key(1136)) _bstr_t IWMPRegionalButton::Getcursor ( );
__declspec(implementation_key(1137)) void IWMPRegionalButton::Putcursor ( _bstr_t pVal );
__declspec(implementation_key(1138)) HRESULT IWMPRegionalButton::Click ( );
__declspec(implementation_key(1139)) _bstr_t IWMPRegionalButton::GetaccName ( );
__declspec(implementation_key(1140)) void IWMPRegionalButton::PutaccName ( _bstr_t pszName );
__declspec(implementation_key(1141)) _bstr_t IWMPRegionalButton::GetaccDescription ( );
__declspec(implementation_key(1142)) void IWMPRegionalButton::PutaccDescription ( _bstr_t pszDescription );
__declspec(implementation_key(1143)) _bstr_t IWMPRegionalButton::GetaccKeyboardShortcut ( );
__declspec(implementation_key(1144)) void IWMPRegionalButton::PutaccKeyboardShortcut ( _bstr_t pszShortcut );
__declspec(implementation_key(1145)) HRESULT IWMPCustomSliderCtrlEvents::ondragbegin ( );
__declspec(implementation_key(1146)) HRESULT IWMPCustomSliderCtrlEvents::ondragend ( );
__declspec(implementation_key(1147)) HRESULT IWMPCustomSliderCtrlEvents::onpositionchange ( );
__declspec(implementation_key(1148)) _bstr_t IWMPCustomSlider::Getcursor ( );
__declspec(implementation_key(1149)) void IWMPCustomSlider::Putcursor ( _bstr_t pVal );
__declspec(implementation_key(1150)) float IWMPCustomSlider::Getmin ( );
__declspec(implementation_key(1151)) void IWMPCustomSlider::Putmin ( float pVal );
__declspec(implementation_key(1152)) float IWMPCustomSlider::Getmax ( );
__declspec(implementation_key(1153)) void IWMPCustomSlider::Putmax ( float pVal );
__declspec(implementation_key(1154)) float IWMPCustomSlider::Getvalue ( );
__declspec(implementation_key(1155)) void IWMPCustomSlider::Putvalue ( float pVal );
__declspec(implementation_key(1156)) _bstr_t IWMPCustomSlider::GettoolTip ( );
__declspec(implementation_key(1157)) void IWMPCustomSlider::PuttoolTip ( _bstr_t pVal );
__declspec(implementation_key(1158)) _bstr_t IWMPCustomSlider::GetpositionImage ( );
__declspec(implementation_key(1159)) void IWMPCustomSlider::PutpositionImage ( _bstr_t pVal );
__declspec(implementation_key(1160)) _bstr_t IWMPCustomSlider::Getimage ( );
__declspec(implementation_key(1161)) void IWMPCustomSlider::Putimage ( _bstr_t pVal );
__declspec(implementation_key(1162)) _bstr_t IWMPCustomSlider::GethoverImage ( );
__declspec(implementation_key(1163)) void IWMPCustomSlider::PuthoverImage ( _bstr_t pVal );
__declspec(implementation_key(1164)) _bstr_t IWMPCustomSlider::GetdisabledImage ( );
__declspec(implementation_key(1165)) void IWMPCustomSlider::PutdisabledImage ( _bstr_t pVal );
__declspec(implementation_key(1166)) _bstr_t IWMPCustomSlider::GetdownImage ( );
__declspec(implementation_key(1167)) void IWMPCustomSlider::PutdownImage ( _bstr_t pVal );
__declspec(implementation_key(1168)) _bstr_t IWMPCustomSlider::GettransparencyColor ( );
__declspec(implementation_key(1169)) void IWMPCustomSlider::PuttransparencyColor ( _bstr_t pVal );
__declspec(implementation_key(1170)) _bstr_t IWMPTextCtrl::GetbackgroundColor ( );
__declspec(implementation_key(1171)) void IWMPTextCtrl::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1172)) _bstr_t IWMPTextCtrl::GetfontFace ( );
__declspec(implementation_key(1173)) void IWMPTextCtrl::PutfontFace ( _bstr_t pVal );
__declspec(implementation_key(1174)) _bstr_t IWMPTextCtrl::GetfontStyle ( );
__declspec(implementation_key(1175)) void IWMPTextCtrl::PutfontStyle ( _bstr_t pVal );
__declspec(implementation_key(1176)) long IWMPTextCtrl::GetfontSize ( );
__declspec(implementation_key(1177)) void IWMPTextCtrl::PutfontSize ( long pVal );
__declspec(implementation_key(1178)) _bstr_t IWMPTextCtrl::GetforegroundColor ( );
__declspec(implementation_key(1179)) void IWMPTextCtrl::PutforegroundColor ( _bstr_t pVal );
__declspec(implementation_key(1180)) _bstr_t IWMPTextCtrl::GethoverBackgroundColor ( );
__declspec(implementation_key(1181)) void IWMPTextCtrl::PuthoverBackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1182)) _bstr_t IWMPTextCtrl::GethoverForegroundColor ( );
__declspec(implementation_key(1183)) void IWMPTextCtrl::PuthoverForegroundColor ( _bstr_t pVal );
__declspec(implementation_key(1184)) _bstr_t IWMPTextCtrl::GethoverFontStyle ( );
__declspec(implementation_key(1185)) void IWMPTextCtrl::PuthoverFontStyle ( _bstr_t pVal );
__declspec(implementation_key(1186)) _bstr_t IWMPTextCtrl::Getvalue ( );
__declspec(implementation_key(1187)) void IWMPTextCtrl::Putvalue ( _bstr_t pVal );
__declspec(implementation_key(1188)) _bstr_t IWMPTextCtrl::GettoolTip ( );
__declspec(implementation_key(1189)) void IWMPTextCtrl::PuttoolTip ( _bstr_t pVal );
__declspec(implementation_key(1190)) _bstr_t IWMPTextCtrl::GetdisabledFontStyle ( );
__declspec(implementation_key(1191)) void IWMPTextCtrl::PutdisabledFontStyle ( _bstr_t pVal );
__declspec(implementation_key(1192)) _bstr_t IWMPTextCtrl::GetdisabledForegroundColor ( );
__declspec(implementation_key(1193)) void IWMPTextCtrl::PutdisabledForegroundColor ( _bstr_t pVal );
__declspec(implementation_key(1194)) _bstr_t IWMPTextCtrl::GetdisabledBackgroundColor ( );
__declspec(implementation_key(1195)) void IWMPTextCtrl::PutdisabledBackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1196)) VARIANT_BOOL IWMPTextCtrl::GetfontSmoothing ( );
__declspec(implementation_key(1197)) void IWMPTextCtrl::PutfontSmoothing ( VARIANT_BOOL pVal );
__declspec(implementation_key(1198)) _bstr_t IWMPTextCtrl::Getjustification ( );
__declspec(implementation_key(1199)) void IWMPTextCtrl::Putjustification ( _bstr_t pVal );
__declspec(implementation_key(1200)) VARIANT_BOOL IWMPTextCtrl::GetwordWrap ( );
__declspec(implementation_key(1201)) void IWMPTextCtrl::PutwordWrap ( VARIANT_BOOL pVal );
__declspec(implementation_key(1202)) _bstr_t IWMPTextCtrl::Getcursor ( );
__declspec(implementation_key(1203)) void IWMPTextCtrl::Putcursor ( _bstr_t pVal );
__declspec(implementation_key(1204)) VARIANT_BOOL IWMPTextCtrl::Getscrolling ( );
__declspec(implementation_key(1205)) void IWMPTextCtrl::Putscrolling ( VARIANT_BOOL pVal );
__declspec(implementation_key(1206)) _bstr_t IWMPTextCtrl::GetscrollingDirection ( );
__declspec(implementation_key(1207)) void IWMPTextCtrl::PutscrollingDirection ( _bstr_t pVal );
__declspec(implementation_key(1208)) int IWMPTextCtrl::GetscrollingDelay ( );
__declspec(implementation_key(1209)) void IWMPTextCtrl::PutscrollingDelay ( int pVal );
__declspec(implementation_key(1210)) int IWMPTextCtrl::GetscrollingAmount ( );
__declspec(implementation_key(1211)) void IWMPTextCtrl::PutscrollingAmount ( int pVal );
__declspec(implementation_key(1212)) int IWMPTextCtrl::GettextWidth ( );
__declspec(implementation_key(1213)) IUnknownPtr ITaskCntrCtrl::GetCurrentContainer ( );
__declspec(implementation_key(1214)) void ITaskCntrCtrl::PutCurrentContainer ( IUnknown * ppUnk );
__declspec(implementation_key(1215)) HRESULT ITaskCntrCtrl::Activate ( );
__declspec(implementation_key(1216)) HRESULT _WMPCoreEvents::OpenStateChange ( long NewState );
__declspec(implementation_key(1217)) HRESULT _WMPCoreEvents::PlayStateChange ( long NewState );
__declspec(implementation_key(1218)) HRESULT _WMPCoreEvents::AudioLanguageChange ( long LangID );
__declspec(implementation_key(1219)) HRESULT _WMPCoreEvents::StatusChange ( );
__declspec(implementation_key(1220)) HRESULT _WMPCoreEvents::ScriptCommand ( _bstr_t scType, _bstr_t Param );
__declspec(implementation_key(1221)) HRESULT _WMPCoreEvents::NewStream ( );
__declspec(implementation_key(1222)) HRESULT _WMPCoreEvents::Disconnect ( long Result );
__declspec(implementation_key(1223)) HRESULT _WMPCoreEvents::Buffering ( VARIANT_BOOL Start );
__declspec(implementation_key(1224)) HRESULT _WMPCoreEvents::Error ( );
__declspec(implementation_key(1225)) HRESULT _WMPCoreEvents::Warning ( long WarningType, long Param, _bstr_t Description );
__declspec(implementation_key(1226)) HRESULT _WMPCoreEvents::EndOfStream ( long Result );
__declspec(implementation_key(1227)) HRESULT _WMPCoreEvents::PositionChange ( double oldPosition, double newPosition );
__declspec(implementation_key(1228)) HRESULT _WMPCoreEvents::MarkerHit ( long MarkerNum );
__declspec(implementation_key(1229)) HRESULT _WMPCoreEvents::DurationUnitChange ( long NewDurationUnit );
__declspec(implementation_key(1230)) HRESULT _WMPCoreEvents::CdromMediaChange ( long CdromNum );
__declspec(implementation_key(1231)) HRESULT _WMPCoreEvents::PlaylistChange ( IDispatch * Playlist, enum WMPPlaylistChangeEventType change );
__declspec(implementation_key(1232)) HRESULT _WMPCoreEvents::CurrentPlaylistChange ( enum WMPPlaylistChangeEventType change );
__declspec(implementation_key(1233)) HRESULT _WMPCoreEvents::CurrentPlaylistItemAvailable ( _bstr_t bstrItemName );
__declspec(implementation_key(1234)) HRESULT _WMPCoreEvents::MediaChange ( IDispatch * Item );
__declspec(implementation_key(1235)) HRESULT _WMPCoreEvents::CurrentMediaItemAvailable ( _bstr_t bstrItemName );
__declspec(implementation_key(1236)) HRESULT _WMPCoreEvents::CurrentItemChange ( IDispatch * pdispMedia );
__declspec(implementation_key(1237)) HRESULT _WMPCoreEvents::MediaCollectionChange ( );
__declspec(implementation_key(1238)) HRESULT _WMPCoreEvents::MediaCollectionAttributeStringAdded ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal );
__declspec(implementation_key(1239)) HRESULT _WMPCoreEvents::MediaCollectionAttributeStringRemoved ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal );
__declspec(implementation_key(1240)) HRESULT _WMPCoreEvents::MediaCollectionAttributeStringChanged ( _bstr_t bstrAttribName, _bstr_t bstrOldAttribVal, _bstr_t bstrNewAttribVal );
__declspec(implementation_key(1241)) HRESULT _WMPCoreEvents::PlaylistCollectionChange ( );
__declspec(implementation_key(1242)) HRESULT _WMPCoreEvents::PlaylistCollectionPlaylistAdded ( _bstr_t bstrPlaylistName );
__declspec(implementation_key(1243)) HRESULT _WMPCoreEvents::PlaylistCollectionPlaylistRemoved ( _bstr_t bstrPlaylistName );
__declspec(implementation_key(1244)) HRESULT _WMPCoreEvents::PlaylistCollectionPlaylistSetAsDeleted ( _bstr_t bstrPlaylistName, VARIANT_BOOL varfIsDeleted );
__declspec(implementation_key(1245)) HRESULT _WMPCoreEvents::ModeChange ( _bstr_t ModeName, VARIANT_BOOL NewValue );
__declspec(implementation_key(1246)) HRESULT _WMPCoreEvents::MediaError ( IDispatch * pMediaObject );
__declspec(implementation_key(1247)) HRESULT _WMPCoreEvents::OpenPlaylistSwitch ( IDispatch * pItem );
__declspec(implementation_key(1248)) HRESULT _WMPCoreEvents::DomainChange ( _bstr_t strDomain );
__declspec(implementation_key(1249)) HRESULT IWMPGraphEventHandler::NotifyGraphStateChange ( ULONG_PTR punkGraph, long lGraphState );
__declspec(implementation_key(1250)) HRESULT IWMPGraphEventHandler::AsyncNotifyGraphStateChange ( ULONG_PTR punkGraph, long lGraphState );
__declspec(implementation_key(1251)) HRESULT IWMPGraphEventHandler::NotifyRateChange ( ULONG_PTR punkGraph, double dRate );
__declspec(implementation_key(1252)) HRESULT IWMPGraphEventHandler::NotifyPlaybackEnd ( ULONG_PTR punkGraph, _bstr_t bstrQueuedUrl, unsigned long dwCurrentContext );
__declspec(implementation_key(1253)) HRESULT IWMPGraphEventHandler::NotifyStreamEnd ( ULONG_PTR punkGraph );
__declspec(implementation_key(1254)) HRESULT IWMPGraphEventHandler::NotifyScriptCommand ( ULONG_PTR punkGraph, _bstr_t bstrCommand, _bstr_t bstrParam );
__declspec(implementation_key(1255)) HRESULT IWMPGraphEventHandler::NotifyEarlyScriptCommand ( ULONG_PTR punkGraph, _bstr_t bstrCommand, _bstr_t bstrParam, double dTime );
__declspec(implementation_key(1256)) HRESULT IWMPGraphEventHandler::NotifyMarkerHit ( ULONG_PTR punkGraph, long lMarker );
__declspec(implementation_key(1257)) HRESULT IWMPGraphEventHandler::NotifyGraphError ( ULONG_PTR punkGraph, long lErrMajor, long lErrMinor, long lCondition, _bstr_t bstrInfo );
__declspec(implementation_key(1258)) HRESULT IWMPGraphEventHandler::NotifyAcquireCredentials ( ULONG_PTR punkGraph, _bstr_t bstrRealm, _bstr_t bstrSite, _bstr_t bstrUser, _bstr_t bstrPassword, unsigned long * pdwFlags, VARIANT_BOOL * pfCancel );
__declspec(implementation_key(1259)) HRESULT IWMPGraphEventHandler::NotifyUntrustedLicense ( ULONG_PTR punkGraph, _bstr_t bstrURL, VARIANT_BOOL * pfCancel );
__declspec(implementation_key(1260)) HRESULT IWMPGraphEventHandler::NotifyLicenseDialog ( ULONG_PTR punkGraph, _bstr_t bstrURL, unsigned char * pPostData, unsigned long dwPostDataSize, long lResult );
__declspec(implementation_key(1261)) HRESULT IWMPGraphEventHandler::NotifyNeedsIndividualization ( ULONG_PTR punkGraph, VARIANT_BOOL * pfResult );
__declspec(implementation_key(1262)) HRESULT IWMPGraphEventHandler::NotifyNewMetadata ( ULONG_PTR punkGraph );
__declspec(implementation_key(1263)) HRESULT IWMPGraphEventHandler::NotifyNewMediaCaps ( ULONG_PTR punkGraph );
__declspec(implementation_key(1264)) HRESULT IWMPGraphEventHandler::NotifyDisconnect ( ULONG_PTR punkGraph, long lResult );
__declspec(implementation_key(1265)) HRESULT IWMPGraphEventHandler::NotifySave ( ULONG_PTR punkGraph, long fStarted, long lResult );
__declspec(implementation_key(1266)) HRESULT IWMPGraphEventHandler::NotifyDelayClose ( ULONG_PTR punkGraph, VARIANT_BOOL fDelay );
__declspec(implementation_key(1267)) HRESULT IWMPGraphEventHandler::NotifyDVD ( ULONG_PTR punkGraph, long lEventCode, long lParam1, long lParam2 );
__declspec(implementation_key(1268)) HRESULT IWMPGraphEventHandler::NotifyRequestAppThreadAction ( ULONG_PTR punkGraph, unsigned long dwAction );
__declspec(implementation_key(1269)) HRESULT IWMPGraphEventHandler::NotifyPrerollReady ( ULONG_PTR punkGraph );
__declspec(implementation_key(1270)) HRESULT IWMPGraphEventHandler::NotifyNewIcons ( ULONG_PTR punkGraph );
__declspec(implementation_key(1271)) HRESULT IWMPGraphEventHandler::NotifyStepComplete ( ULONG_PTR punkGraph );
__declspec(implementation_key(1272)) HRESULT IWMPGraphEventHandler::NotifyNewBitrate ( ULONG_PTR punkGraph, unsigned long dwBitrate );
__declspec(implementation_key(1273)) HRESULT IWMPGraphEventHandler::NotifyGraphCreationPreRender ( ULONG_PTR punkGraph, ULONG_PTR punkFilterGraph, ULONG_PTR punkCardeaEncConfig, ULONG_PTR phrContinue, ULONG_PTR hEventToSet );
__declspec(implementation_key(1274)) HRESULT IWMPGraphEventHandler::NotifyGraphCreationPostRender ( ULONG_PTR punkGraph, ULONG_PTR punkFilterGraph, ULONG_PTR phrContinue, ULONG_PTR hEventToSet );
__declspec(implementation_key(1275)) long IBattery::GetpresetCount ( );
__declspec(implementation_key(1276)) IDispatchPtr IBattery::Getpreset ( long nIndex );
__declspec(implementation_key(1277)) _bstr_t IBatteryPreset::Gettitle ( );
__declspec(implementation_key(1278)) void IBatteryPreset::Puttitle ( _bstr_t pVal );
__declspec(implementation_key(1279)) long IBarsEffect::GetdisplayMode ( );
__declspec(implementation_key(1280)) void IBarsEffect::PutdisplayMode ( long pVal );
__declspec(implementation_key(1281)) VARIANT_BOOL IBarsEffect::GetshowPeaks ( );
__declspec(implementation_key(1282)) void IBarsEffect::PutshowPeaks ( VARIANT_BOOL pVal );
__declspec(implementation_key(1283)) long IBarsEffect::GetpeakHangTime ( );
__declspec(implementation_key(1284)) void IBarsEffect::PutpeakHangTime ( long pVal );
__declspec(implementation_key(1285)) float IBarsEffect::GetpeakFallbackAcceleration ( );
__declspec(implementation_key(1286)) void IBarsEffect::PutpeakFallbackAcceleration ( float pVal );
__declspec(implementation_key(1287)) float IBarsEffect::GetpeakFallbackSpeed ( );
__declspec(implementation_key(1288)) void IBarsEffect::PutpeakFallbackSpeed ( float pVal );
__declspec(implementation_key(1289)) float IBarsEffect::GetlevelFallbackAcceleration ( );
__declspec(implementation_key(1290)) void IBarsEffect::PutlevelFallbackAcceleration ( float pVal );
__declspec(implementation_key(1291)) float IBarsEffect::GetlevelFallbackSpeed ( );
__declspec(implementation_key(1292)) void IBarsEffect::PutlevelFallbackSpeed ( float pVal );
__declspec(implementation_key(1293)) _bstr_t IBarsEffect::GetbackgroundColor ( );
__declspec(implementation_key(1294)) void IBarsEffect::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1295)) _bstr_t IBarsEffect::GetlevelColor ( );
__declspec(implementation_key(1296)) void IBarsEffect::PutlevelColor ( _bstr_t pVal );
__declspec(implementation_key(1297)) _bstr_t IBarsEffect::GetpeakColor ( );
__declspec(implementation_key(1298)) void IBarsEffect::PutpeakColor ( _bstr_t pVal );
__declspec(implementation_key(1299)) long IBarsEffect::GethorizontalSpacing ( );
__declspec(implementation_key(1300)) void IBarsEffect::PuthorizontalSpacing ( long pVal );
__declspec(implementation_key(1301)) long IBarsEffect::GetlevelWidth ( );
__declspec(implementation_key(1302)) void IBarsEffect::PutlevelWidth ( long pVal );
__declspec(implementation_key(1303)) float IBarsEffect::GetlevelScale ( );
__declspec(implementation_key(1304)) void IBarsEffect::PutlevelScale ( float pVal );
__declspec(implementation_key(1305)) long IBarsEffect::GetfadeRate ( );
__declspec(implementation_key(1306)) void IBarsEffect::PutfadeRate ( long pVal );
__declspec(implementation_key(1307)) long IBarsEffect::GetfadeMode ( );
__declspec(implementation_key(1308)) void IBarsEffect::PutfadeMode ( long pVal );
__declspec(implementation_key(1309)) VARIANT_BOOL IBarsEffect::Gettransparent ( );
__declspec(implementation_key(1310)) void IBarsEffect::Puttransparent ( VARIANT_BOOL pVal );
__declspec(implementation_key(1311)) _bstr_t ISpikesEffect::GetbackgroundColor ( );
__declspec(implementation_key(1312)) void ISpikesEffect::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1313)) _bstr_t ISpikesEffect::GetforegroundColor ( );
__declspec(implementation_key(1314)) void ISpikesEffect::PutforegroundColor ( _bstr_t pVal );
__declspec(implementation_key(1315)) long ISpikesEffect::GetdisplayMode ( );
__declspec(implementation_key(1316)) void ISpikesEffect::PutdisplayMode ( long pVal );
__declspec(implementation_key(1317)) float ISpikesEffect::GetfallbackSpeed ( );
__declspec(implementation_key(1318)) void ISpikesEffect::PutfallbackSpeed ( float pVal );
__declspec(implementation_key(1319)) VARIANT_BOOL ISpikesEffect::Gettransparent ( );
__declspec(implementation_key(1320)) void ISpikesEffect::Puttransparent ( VARIANT_BOOL pVal );
__declspec(implementation_key(1321)) float IDotPlaneEffect::GetcameraDistance ( );
__declspec(implementation_key(1322)) void IDotPlaneEffect::PutcameraDistance ( float pVal );
__declspec(implementation_key(1323)) float IDotPlaneEffect::GetfallbackAcceleration ( );
__declspec(implementation_key(1324)) void IDotPlaneEffect::PutfallbackAcceleration ( float pVal );
__declspec(implementation_key(1325)) float IDotPlaneEffect::GetfallbackSpeed ( );
__declspec(implementation_key(1326)) void IDotPlaneEffect::PutfallbackSpeed ( float pVal );
__declspec(implementation_key(1327)) VARIANT_BOOL IDotPlaneEffect::GetspinZ ( );
__declspec(implementation_key(1328)) void IDotPlaneEffect::PutspinZ ( VARIANT_BOOL pVal );
__declspec(implementation_key(1329)) VARIANT_BOOL IDotPlaneEffect::GetspinX ( );
__declspec(implementation_key(1330)) void IDotPlaneEffect::PutspinX ( VARIANT_BOOL pVal );
__declspec(implementation_key(1331)) VARIANT_BOOL IDotPlaneEffect::GetspinY ( );
__declspec(implementation_key(1332)) void IDotPlaneEffect::PutspinY ( VARIANT_BOOL pVal );
__declspec(implementation_key(1333)) HRESULT IDotPlaneEffect::reset ( );
__declspec(implementation_key(1334)) HRESULT IDotPlaneEffect::stopSpin ( );
__declspec(implementation_key(1335)) _bstr_t IDotPlaneEffect::GetbackgroundColor ( );
__declspec(implementation_key(1336)) void IDotPlaneEffect::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1337)) _bstr_t IDotPlaneEffect::GetfadeColor1 ( );
__declspec(implementation_key(1338)) void IDotPlaneEffect::PutfadeColor1 ( _bstr_t pVal );
__declspec(implementation_key(1339)) _bstr_t IDotPlaneEffect::GetfadeColor2 ( );
__declspec(implementation_key(1340)) void IDotPlaneEffect::PutfadeColor2 ( _bstr_t pVal );
__declspec(implementation_key(1341)) _bstr_t IDotPlaneEffect::GetfadeColor3 ( );
__declspec(implementation_key(1342)) void IDotPlaneEffect::PutfadeColor3 ( _bstr_t pVal );
__declspec(implementation_key(1343)) _bstr_t IDotPlaneEffect::GetfadeColor4 ( );
__declspec(implementation_key(1344)) void IDotPlaneEffect::PutfadeColor4 ( _bstr_t pVal );
__declspec(implementation_key(1345)) _bstr_t IDotPlaneEffect::GetfadeColor5 ( );
__declspec(implementation_key(1346)) void IDotPlaneEffect::PutfadeColor5 ( _bstr_t pVal );
__declspec(implementation_key(1347)) VARIANT_BOOL IDotPlaneEffect::Gettransparent ( );
__declspec(implementation_key(1348)) void IDotPlaneEffect::Puttransparent ( VARIANT_BOOL pVal );
__declspec(implementation_key(1349)) _bstr_t IWMPExternal::Getversion ( );
__declspec(implementation_key(1350)) _bstr_t IWMPExternal::GetappColorLight ( );
__declspec(implementation_key(1351)) void IWMPExternal::PutOnColorChange ( IDispatch * _arg1 );
__declspec(implementation_key(1352)) _bstr_t IWMPExternalColors::GetappColorMedium ( );
__declspec(implementation_key(1353)) _bstr_t IWMPExternalColors::GetappColorDark ( );
__declspec(implementation_key(1354)) _bstr_t IWMPExternalColors::GetappColorButtonHighlight ( );
__declspec(implementation_key(1355)) _bstr_t IWMPExternalColors::GetappColorButtonShadow ( );
__declspec(implementation_key(1356)) _bstr_t IWMPExternalColors::GetappColorButtonHoverFace ( );
__declspec(implementation_key(1357)) HRESULT IWMPSubscriptionServiceLimited::NavigateTaskPaneURL ( _bstr_t bstrKeyName, _bstr_t bstrTaskPane, _bstr_t bstrParams );
__declspec(implementation_key(1358)) void IWMPSubscriptionServiceLimited::PutSelectedTaskPane ( _bstr_t bstrTaskPane );
__declspec(implementation_key(1359)) _bstr_t IWMPSubscriptionServiceLimited::GetSelectedTaskPane ( );
__declspec(implementation_key(1360)) IWMPDownloadManagerPtr IWMPSubscriptionServiceExternal::GetDownloadManager ( );
__declspec(implementation_key(1361)) IWMPDownloadCollectionPtr IWMPDownloadManager::getDownloadCollection ( long lCollectionId );
__declspec(implementation_key(1362)) IWMPDownloadCollectionPtr IWMPDownloadManager::createDownloadCollection ( );
__declspec(implementation_key(1363)) long IWMPDownloadCollection::Getid ( );
__declspec(implementation_key(1364)) long IWMPDownloadCollection::Getcount ( );
__declspec(implementation_key(1365)) IWMPDownloadItem2Ptr IWMPDownloadCollection::Item ( long lItem );
__declspec(implementation_key(1366)) IWMPDownloadItem2Ptr IWMPDownloadCollection::startDownload ( _bstr_t bstrSourceURL, _bstr_t bstrType );
__declspec(implementation_key(1367)) HRESULT IWMPDownloadCollection::removeItem ( long lItem );
__declspec(implementation_key(1368)) HRESULT IWMPDownloadCollection::clear ( );
__declspec(implementation_key(1369)) _bstr_t IWMPDownloadItem::GetsourceURL ( );
__declspec(implementation_key(1370)) long IWMPDownloadItem::Getsize ( );
__declspec(implementation_key(1371)) _bstr_t IWMPDownloadItem::Gettype ( );
__declspec(implementation_key(1372)) long IWMPDownloadItem::Getprogress ( );
__declspec(implementation_key(1373)) enum WMPSubscriptionDownloadState IWMPDownloadItem::GetdownloadState ( );
__declspec(implementation_key(1374)) HRESULT IWMPDownloadItem::pause ( );
__declspec(implementation_key(1375)) HRESULT IWMPDownloadItem::resume ( );
__declspec(implementation_key(1376)) HRESULT IWMPDownloadItem::cancel ( );
__declspec(implementation_key(1377)) _bstr_t IWMPDownloadItem2::getItemInfo ( _bstr_t bstrItemName );
__declspec(implementation_key(1378)) HRESULT IWMPSubscriptionServicePlayMedia::playMedia ( _bstr_t bstrURL );
__declspec(implementation_key(1379)) HRESULT IWMPCDDVDWizardExternal::WriteNames ( _bstr_t bstrTOC, _bstr_t bstrMetadata );
__declspec(implementation_key(1380)) HRESULT IWMPCDDVDWizardExternal::ReturnToMainTask ( );
__declspec(implementation_key(1381)) HRESULT IWMPCDDVDWizardExternal::WriteNamesEx ( enum WMP_WRITENAMESEX_TYPE type, _bstr_t bstrTypeId, _bstr_t bstrMetadata, VARIANT_BOOL fRenameRegroupFiles );
__declspec(implementation_key(1382)) _bstr_t IWMPCDDVDWizardExternal::GetMDQByRequestID ( _bstr_t bstrRequestID );
__declspec(implementation_key(1383)) HRESULT IWMPCDDVDWizardExternal::EditMetadata ( );
__declspec(implementation_key(1384)) VARIANT_BOOL IWMPCDDVDWizardExternal::IsMetadataAvailableForEdit ( );
__declspec(implementation_key(1385)) HRESULT IWMPCDDVDWizardExternal::BuyCD ( _bstr_t bstrTitle, _bstr_t bstrArtist, _bstr_t bstrAlbum, _bstr_t bstrUFID, _bstr_t bstrWMID );
__declspec(implementation_key(1386)) HRESULT IWMPOfflineExternal::forceOnline ( );
#pragma stop_map_region

} // namespace IGAMEDIA

#pragma pack(pop)
