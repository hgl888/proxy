// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (5119db3f).
//
// e:\popwin\popwin\tmp\wmp.tli
//
// Wrapper implementations for Win32 type library wmp.dll
// compiler-generated file created 07/05/08 at 08:45:56 - DO NOT EDIT!


//
// interface IWMPSyncDevice wrapper method implementations
//

#pragma implementation_key(1)
inline _bstr_t IGAMEDIA::IWMPSyncDevice::GetfriendlyName ( ) {
    BSTR _result;
    HRESULT _hr = get_friendlyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2)
inline void IGAMEDIA::IWMPSyncDevice::PutfriendlyName ( _bstr_t pbstrName ) {
    HRESULT _hr = put_friendlyName(pbstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3)
inline _bstr_t IGAMEDIA::IWMPSyncDevice::GetdeviceName ( ) {
    BSTR _result;
    HRESULT _hr = get_deviceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4)
inline _bstr_t IGAMEDIA::IWMPSyncDevice::GetdeviceId ( ) {
    BSTR _result;
    HRESULT _hr = get_deviceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5)
inline long IGAMEDIA::IWMPSyncDevice::GetpartnershipIndex ( ) {
    long _result;
    HRESULT _hr = get_partnershipIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6)
inline VARIANT_BOOL IGAMEDIA::IWMPSyncDevice::Getconnected ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_connected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7)
inline enum WMPDeviceStatus IGAMEDIA::IWMPSyncDevice::Getstatus ( ) {
    enum WMPDeviceStatus _result;
    HRESULT _hr = get_status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(8)
inline enum WMPSyncState IGAMEDIA::IWMPSyncDevice::GetsyncState ( ) {
    enum WMPSyncState _result;
    HRESULT _hr = get_syncState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(9)
inline long IGAMEDIA::IWMPSyncDevice::Getprogress ( ) {
    long _result;
    HRESULT _hr = get_progress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(10)
inline _bstr_t IGAMEDIA::IWMPSyncDevice::getItemInfo ( _bstr_t bstrItemName ) {
    BSTR _result;
    HRESULT _hr = raw_getItemInfo(bstrItemName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(11)
inline HRESULT IGAMEDIA::IWMPSyncDevice::createPartnership ( VARIANT_BOOL vbShowUI ) {
    HRESULT _hr = raw_createPartnership(vbShowUI);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(12)
inline HRESULT IGAMEDIA::IWMPSyncDevice::deletePartnership ( ) {
    HRESULT _hr = raw_deletePartnership();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(13)
inline HRESULT IGAMEDIA::IWMPSyncDevice::Start ( ) {
    HRESULT _hr = raw_Start();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(14)
inline HRESULT IGAMEDIA::IWMPSyncDevice::stop ( ) {
    HRESULT _hr = raw_stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(15)
inline HRESULT IGAMEDIA::IWMPSyncDevice::showSettings ( ) {
    HRESULT _hr = raw_showSettings();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(16)
inline VARIANT_BOOL IGAMEDIA::IWMPSyncDevice::isIdentical ( struct IWMPSyncDevice * pDevice ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_isIdentical(pDevice, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface _WMPOCXEvents wrapper method implementations
//

#pragma implementation_key(17)
inline HRESULT IGAMEDIA::_WMPOCXEvents::OpenStateChange ( long NewState ) {
    return _com_dispatch_method(this, 0x1389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", NewState);
}

#pragma implementation_key(18)
inline HRESULT IGAMEDIA::_WMPOCXEvents::PlayStateChange ( long NewState ) {
    return _com_dispatch_method(this, 0x13ed, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", NewState);
}

#pragma implementation_key(19)
inline HRESULT IGAMEDIA::_WMPOCXEvents::AudioLanguageChange ( long LangID ) {
    return _com_dispatch_method(this, 0x13ee, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", LangID);
}

#pragma implementation_key(20)
inline HRESULT IGAMEDIA::_WMPOCXEvents::StatusChange ( ) {
    return _com_dispatch_method(this, 0x138a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(21)
inline HRESULT IGAMEDIA::_WMPOCXEvents::ScriptCommand ( _bstr_t scType, _bstr_t Param ) {
    return _com_dispatch_method(this, 0x14b5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008", (BSTR)scType, (BSTR)Param);
}

#pragma implementation_key(22)
inline HRESULT IGAMEDIA::_WMPOCXEvents::NewStream ( ) {
    return _com_dispatch_method(this, 0x151b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(23)
inline HRESULT IGAMEDIA::_WMPOCXEvents::Disconnect ( long Result ) {
    return _com_dispatch_method(this, 0x1519, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Result);
}

#pragma implementation_key(24)
inline HRESULT IGAMEDIA::_WMPOCXEvents::Buffering ( VARIANT_BOOL Start ) {
    return _com_dispatch_method(this, 0x151a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000b", Start);
}

#pragma implementation_key(25)
inline HRESULT IGAMEDIA::_WMPOCXEvents::Error ( ) {
    return _com_dispatch_method(this, 0x157d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(26)
inline HRESULT IGAMEDIA::_WMPOCXEvents::Warning ( long WarningType, long Param, _bstr_t Description ) {
    return _com_dispatch_method(this, 0x15e1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0008", WarningType, Param, (BSTR)Description);
}

#pragma implementation_key(27)
inline HRESULT IGAMEDIA::_WMPOCXEvents::EndOfStream ( long Result ) {
    return _com_dispatch_method(this, 0x1451, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Result);
}

#pragma implementation_key(28)
inline HRESULT IGAMEDIA::_WMPOCXEvents::PositionChange ( double oldPosition, double newPosition ) {
    return _com_dispatch_method(this, 0x1452, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0005", oldPosition, newPosition);
}

#pragma implementation_key(29)
inline HRESULT IGAMEDIA::_WMPOCXEvents::MarkerHit ( long MarkerNum ) {
    return _com_dispatch_method(this, 0x1453, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", MarkerNum);
}

#pragma implementation_key(30)
inline HRESULT IGAMEDIA::_WMPOCXEvents::DurationUnitChange ( long NewDurationUnit ) {
    return _com_dispatch_method(this, 0x1454, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", NewDurationUnit);
}

#pragma implementation_key(31)
inline HRESULT IGAMEDIA::_WMPOCXEvents::CdromMediaChange ( long CdromNum ) {
    return _com_dispatch_method(this, 0x1645, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", CdromNum);
}

#pragma implementation_key(32)
inline HRESULT IGAMEDIA::_WMPOCXEvents::PlaylistChange ( IDispatch * Playlist, enum WMPPlaylistChangeEventType change ) {
    return _com_dispatch_method(this, 0x16a9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", Playlist, change);
}

#pragma implementation_key(33)
inline HRESULT IGAMEDIA::_WMPOCXEvents::CurrentPlaylistChange ( enum WMPPlaylistChangeEventType change ) {
    return _com_dispatch_method(this, 0x16ac, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", change);
}

#pragma implementation_key(34)
inline HRESULT IGAMEDIA::_WMPOCXEvents::CurrentPlaylistItemAvailable ( _bstr_t bstrItemName ) {
    return _com_dispatch_method(this, 0x16ad, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrItemName);
}

#pragma implementation_key(35)
inline HRESULT IGAMEDIA::_WMPOCXEvents::MediaChange ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0x16aa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(36)
inline HRESULT IGAMEDIA::_WMPOCXEvents::CurrentMediaItemAvailable ( _bstr_t bstrItemName ) {
    return _com_dispatch_method(this, 0x16ab, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrItemName);
}

#pragma implementation_key(37)
inline HRESULT IGAMEDIA::_WMPOCXEvents::CurrentItemChange ( IDispatch * pdispMedia ) {
    return _com_dispatch_method(this, 0x16ae, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pdispMedia);
}

#pragma implementation_key(38)
inline HRESULT IGAMEDIA::_WMPOCXEvents::MediaCollectionChange ( ) {
    return _com_dispatch_method(this, 0x16af, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(39)
inline HRESULT IGAMEDIA::_WMPOCXEvents::MediaCollectionAttributeStringAdded ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal ) {
    return _com_dispatch_method(this, 0x16b0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008", (BSTR)bstrAttribName, (BSTR)bstrAttribVal);
}

#pragma implementation_key(40)
inline HRESULT IGAMEDIA::_WMPOCXEvents::MediaCollectionAttributeStringRemoved ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal ) {
    return _com_dispatch_method(this, 0x16b1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008", (BSTR)bstrAttribName, (BSTR)bstrAttribVal);
}

#pragma implementation_key(41)
inline HRESULT IGAMEDIA::_WMPOCXEvents::MediaCollectionAttributeStringChanged ( _bstr_t bstrAttribName, _bstr_t bstrOldAttribVal, _bstr_t bstrNewAttribVal ) {
    return _com_dispatch_method(this, 0x16bc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008\x0008", (BSTR)bstrAttribName, (BSTR)bstrOldAttribVal, (BSTR)bstrNewAttribVal);
}

#pragma implementation_key(42)
inline HRESULT IGAMEDIA::_WMPOCXEvents::PlaylistCollectionChange ( ) {
    return _com_dispatch_method(this, 0x16b2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(43)
inline HRESULT IGAMEDIA::_WMPOCXEvents::PlaylistCollectionPlaylistAdded ( _bstr_t bstrPlaylistName ) {
    return _com_dispatch_method(this, 0x16b3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrPlaylistName);
}

#pragma implementation_key(44)
inline HRESULT IGAMEDIA::_WMPOCXEvents::PlaylistCollectionPlaylistRemoved ( _bstr_t bstrPlaylistName ) {
    return _com_dispatch_method(this, 0x16b4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrPlaylistName);
}

#pragma implementation_key(45)
inline HRESULT IGAMEDIA::_WMPOCXEvents::PlaylistCollectionPlaylistSetAsDeleted ( _bstr_t bstrPlaylistName, VARIANT_BOOL varfIsDeleted ) {
    return _com_dispatch_method(this, 0x16ba, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x000b", (BSTR)bstrPlaylistName, varfIsDeleted);
}

#pragma implementation_key(46)
inline HRESULT IGAMEDIA::_WMPOCXEvents::ModeChange ( _bstr_t ModeName, VARIANT_BOOL NewValue ) {
    return _com_dispatch_method(this, 0x16bb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x000b", (BSTR)ModeName, NewValue);
}

#pragma implementation_key(47)
inline HRESULT IGAMEDIA::_WMPOCXEvents::MediaError ( IDispatch * pMediaObject ) {
    return _com_dispatch_method(this, 0x16bd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pMediaObject);
}

#pragma implementation_key(48)
inline HRESULT IGAMEDIA::_WMPOCXEvents::OpenPlaylistSwitch ( IDispatch * pItem ) {
    return _com_dispatch_method(this, 0x16bf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pItem);
}

#pragma implementation_key(49)
inline HRESULT IGAMEDIA::_WMPOCXEvents::DomainChange ( _bstr_t strDomain ) {
    return _com_dispatch_method(this, 0x16be, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)strDomain);
}

#pragma implementation_key(50)
inline HRESULT IGAMEDIA::_WMPOCXEvents::SwitchedToPlayerApplication ( ) {
    return _com_dispatch_method(this, 0x1965, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(51)
inline HRESULT IGAMEDIA::_WMPOCXEvents::SwitchedToControl ( ) {
    return _com_dispatch_method(this, 0x1966, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(52)
inline HRESULT IGAMEDIA::_WMPOCXEvents::PlayerDockedStateChange ( ) {
    return _com_dispatch_method(this, 0x1967, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(53)
inline HRESULT IGAMEDIA::_WMPOCXEvents::PlayerReconnect ( ) {
    return _com_dispatch_method(this, 0x1968, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(54)
inline HRESULT IGAMEDIA::_WMPOCXEvents::Click ( short nButton, short nShiftState, long fX, long fY ) {
    return _com_dispatch_method(this, 0x1969, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", nButton, nShiftState, fX, fY);
}

#pragma implementation_key(55)
inline HRESULT IGAMEDIA::_WMPOCXEvents::DoubleClick ( short nButton, short nShiftState, long fX, long fY ) {
    return _com_dispatch_method(this, 0x196a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", nButton, nShiftState, fX, fY);
}

#pragma implementation_key(56)
inline HRESULT IGAMEDIA::_WMPOCXEvents::KeyDown ( short nKeyCode, short nShiftState ) {
    return _com_dispatch_method(this, 0x196b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002", nKeyCode, nShiftState);
}

#pragma implementation_key(57)
inline HRESULT IGAMEDIA::_WMPOCXEvents::KeyPress ( short nKeyAscii ) {
    return _com_dispatch_method(this, 0x196c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002", nKeyAscii);
}

#pragma implementation_key(58)
inline HRESULT IGAMEDIA::_WMPOCXEvents::KeyUp ( short nKeyCode, short nShiftState ) {
    return _com_dispatch_method(this, 0x196d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002", nKeyCode, nShiftState);
}

#pragma implementation_key(59)
inline HRESULT IGAMEDIA::_WMPOCXEvents::MouseDown ( short nButton, short nShiftState, long fX, long fY ) {
    return _com_dispatch_method(this, 0x196e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", nButton, nShiftState, fX, fY);
}

#pragma implementation_key(60)
inline HRESULT IGAMEDIA::_WMPOCXEvents::MouseMove ( short nButton, short nShiftState, long fX, long fY ) {
    return _com_dispatch_method(this, 0x196f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", nButton, nShiftState, fX, fY);
}

#pragma implementation_key(61)
inline HRESULT IGAMEDIA::_WMPOCXEvents::MouseUp ( short nButton, short nShiftState, long fX, long fY ) {
    return _com_dispatch_method(this, 0x1970, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0003\x0003", nButton, nShiftState, fX, fY);
}

#pragma implementation_key(62)
inline HRESULT IGAMEDIA::_WMPOCXEvents::DeviceConnect ( struct IWMPSyncDevice * pDevice ) {
    return _com_dispatch_method(this, 0x1971, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d", pDevice);
}

#pragma implementation_key(63)
inline HRESULT IGAMEDIA::_WMPOCXEvents::DeviceDisconnect ( struct IWMPSyncDevice * pDevice ) {
    return _com_dispatch_method(this, 0x1972, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d", pDevice);
}

#pragma implementation_key(64)
inline HRESULT IGAMEDIA::_WMPOCXEvents::DeviceStatusChange ( struct IWMPSyncDevice * pDevice, enum WMPDeviceStatus NewStatus ) {
    return _com_dispatch_method(this, 0x1973, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d\x0003", pDevice, NewStatus);
}

#pragma implementation_key(65)
inline HRESULT IGAMEDIA::_WMPOCXEvents::DeviceSyncStateChange ( struct IWMPSyncDevice * pDevice, enum WMPSyncState NewState ) {
    return _com_dispatch_method(this, 0x1974, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d\x0003", pDevice, NewState);
}

#pragma implementation_key(66)
inline HRESULT IGAMEDIA::_WMPOCXEvents::DeviceSyncError ( struct IWMPSyncDevice * pDevice, IDispatch * pMedia ) {
    return _com_dispatch_method(this, 0x1975, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d\x0009", pDevice, pMedia);
}

#pragma implementation_key(67)
inline HRESULT IGAMEDIA::_WMPOCXEvents::CreatePartnershipComplete ( struct IWMPSyncDevice * pDevice, HRESULT hrResult ) {
    return _com_dispatch_method(this, 0x1976, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d\x000a", pDevice, hrResult);
}

//
// interface IWMPCore wrapper method implementations
//

#pragma implementation_key(68)
inline HRESULT IGAMEDIA::IWMPCore::close ( ) {
    HRESULT _hr = raw_close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(69)
inline _bstr_t IGAMEDIA::IWMPCore::GetURL ( ) {
    BSTR _result;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(70)
inline void IGAMEDIA::IWMPCore::PutURL ( _bstr_t pbstrURL ) {
    HRESULT _hr = put_URL(pbstrURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(71)
inline enum WMPOpenState IGAMEDIA::IWMPCore::GetopenState ( ) {
    enum WMPOpenState _result;
    HRESULT _hr = get_openState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(72)
inline enum WMPPlayState IGAMEDIA::IWMPCore::GetplayState ( ) {
    enum WMPPlayState _result;
    HRESULT _hr = get_playState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(73)
inline IGAMEDIA::IWMPControlsPtr IGAMEDIA::IWMPCore::Getcontrols ( ) {
    struct IWMPControls * _result;
    HRESULT _hr = get_controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPControlsPtr(_result, false);
}

#pragma implementation_key(74)
inline IGAMEDIA::IWMPSettingsPtr IGAMEDIA::IWMPCore::Getsettings ( ) {
    struct IWMPSettings * _result;
    HRESULT _hr = get_settings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPSettingsPtr(_result, false);
}

#pragma implementation_key(75)
inline IGAMEDIA::IWMPMediaPtr IGAMEDIA::IWMPCore::GetcurrentMedia ( ) {
    struct IWMPMedia * _result;
    HRESULT _hr = get_currentMedia(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaPtr(_result, false);
}

#pragma implementation_key(76)
inline void IGAMEDIA::IWMPCore::PutcurrentMedia ( struct IWMPMedia * ppMedia ) {
    HRESULT _hr = put_currentMedia(ppMedia);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(77)
inline IGAMEDIA::IWMPMediaCollectionPtr IGAMEDIA::IWMPCore::GetmediaCollection ( ) {
    struct IWMPMediaCollection * _result;
    HRESULT _hr = get_mediaCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaCollectionPtr(_result, false);
}

#pragma implementation_key(78)
inline IGAMEDIA::IWMPPlaylistCollectionPtr IGAMEDIA::IWMPCore::GetplaylistCollection ( ) {
    struct IWMPPlaylistCollection * _result;
    HRESULT _hr = get_playlistCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistCollectionPtr(_result, false);
}

#pragma implementation_key(79)
inline _bstr_t IGAMEDIA::IWMPCore::GetversionInfo ( ) {
    BSTR _result;
    HRESULT _hr = get_versionInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(80)
inline HRESULT IGAMEDIA::IWMPCore::launchURL ( _bstr_t bstrURL ) {
    HRESULT _hr = raw_launchURL(bstrURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(81)
inline IGAMEDIA::IWMPNetworkPtr IGAMEDIA::IWMPCore::Getnetwork ( ) {
    struct IWMPNetwork * _result;
    HRESULT _hr = get_network(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPNetworkPtr(_result, false);
}

#pragma implementation_key(82)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPCore::GetcurrentPlaylist ( ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = get_currentPlaylist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(83)
inline void IGAMEDIA::IWMPCore::PutcurrentPlaylist ( struct IWMPPlaylist * ppPL ) {
    HRESULT _hr = put_currentPlaylist(ppPL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(84)
inline IGAMEDIA::IWMPCdromCollectionPtr IGAMEDIA::IWMPCore::GetcdromCollection ( ) {
    struct IWMPCdromCollection * _result;
    HRESULT _hr = get_cdromCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPCdromCollectionPtr(_result, false);
}

#pragma implementation_key(85)
inline IGAMEDIA::IWMPClosedCaptionPtr IGAMEDIA::IWMPCore::GetclosedCaption ( ) {
    struct IWMPClosedCaption * _result;
    HRESULT _hr = get_closedCaption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPClosedCaptionPtr(_result, false);
}

#pragma implementation_key(86)
inline VARIANT_BOOL IGAMEDIA::IWMPCore::GetisOnline ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_isOnline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(87)
inline IGAMEDIA::IWMPErrorPtr IGAMEDIA::IWMPCore::GetError ( ) {
    struct IWMPError * _result;
    HRESULT _hr = get_Error(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPErrorPtr(_result, false);
}

#pragma implementation_key(88)
inline _bstr_t IGAMEDIA::IWMPCore::Getstatus ( ) {
    BSTR _result;
    HRESULT _hr = get_status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPCore2 wrapper method implementations
//

#pragma implementation_key(89)
inline IGAMEDIA::IWMPDVDPtr IGAMEDIA::IWMPCore2::Getdvd ( ) {
    struct IWMPDVD * _result;
    HRESULT _hr = get_dvd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPDVDPtr(_result, false);
}

//
// interface IWMPCore3 wrapper method implementations
//

#pragma implementation_key(90)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPCore3::newPlaylist ( _bstr_t bstrName, _bstr_t bstrURL ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = raw_newPlaylist(bstrName, bstrURL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(91)
inline IGAMEDIA::IWMPMediaPtr IGAMEDIA::IWMPCore3::newMedia ( _bstr_t bstrURL ) {
    struct IWMPMedia * _result;
    HRESULT _hr = raw_newMedia(bstrURL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaPtr(_result, false);
}

//
// interface IWMPPlayer4 wrapper method implementations
//

#pragma implementation_key(92)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer4::Getenabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(93)
inline void IGAMEDIA::IWMPPlayer4::Putenabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(94)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer4::GetfullScreen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_fullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(95)
inline void IGAMEDIA::IWMPPlayer4::PutfullScreen ( VARIANT_BOOL pbFullScreen ) {
    HRESULT _hr = put_fullScreen(pbFullScreen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(96)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer4::GetenableContextMenu ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_enableContextMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(97)
inline void IGAMEDIA::IWMPPlayer4::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu ) {
    HRESULT _hr = put_enableContextMenu(pbEnableContextMenu);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(98)
inline void IGAMEDIA::IWMPPlayer4::PutuiMode ( _bstr_t pbstrMode ) {
    HRESULT _hr = put_uiMode(pbstrMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(99)
inline _bstr_t IGAMEDIA::IWMPPlayer4::GetuiMode ( ) {
    BSTR _result;
    HRESULT _hr = get_uiMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(100)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer4::GetstretchToFit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_stretchToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(101)
inline void IGAMEDIA::IWMPPlayer4::PutstretchToFit ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_stretchToFit(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(102)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer4::GetwindowlessVideo ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_windowlessVideo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(103)
inline void IGAMEDIA::IWMPPlayer4::PutwindowlessVideo ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_windowlessVideo(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(104)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer4::GetisRemote ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_isRemote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(105)
inline IGAMEDIA::IWMPPlayerApplicationPtr IGAMEDIA::IWMPPlayer4::GetplayerApplication ( ) {
    struct IWMPPlayerApplication * _result;
    HRESULT _hr = get_playerApplication(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlayerApplicationPtr(_result, false);
}

#pragma implementation_key(106)
inline HRESULT IGAMEDIA::IWMPPlayer4::openPlayer ( _bstr_t bstrURL ) {
    HRESULT _hr = raw_openPlayer(bstrURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPControls wrapper method implementations
//

#pragma implementation_key(107)
inline VARIANT_BOOL IGAMEDIA::IWMPControls::GetisAvailable ( _bstr_t bstrItem ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_isAvailable(bstrItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(108)
inline HRESULT IGAMEDIA::IWMPControls::play ( ) {
    HRESULT _hr = raw_play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(109)
inline HRESULT IGAMEDIA::IWMPControls::stop ( ) {
    HRESULT _hr = raw_stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(110)
inline HRESULT IGAMEDIA::IWMPControls::pause ( ) {
    HRESULT _hr = raw_pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(111)
inline HRESULT IGAMEDIA::IWMPControls::fastForward ( ) {
    HRESULT _hr = raw_fastForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(112)
inline HRESULT IGAMEDIA::IWMPControls::fastReverse ( ) {
    HRESULT _hr = raw_fastReverse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(113)
inline double IGAMEDIA::IWMPControls::GetcurrentPosition ( ) {
    double _result;
    HRESULT _hr = get_currentPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(114)
inline void IGAMEDIA::IWMPControls::PutcurrentPosition ( double pdCurrentPosition ) {
    HRESULT _hr = put_currentPosition(pdCurrentPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(115)
inline _bstr_t IGAMEDIA::IWMPControls::GetcurrentPositionString ( ) {
    BSTR _result;
    HRESULT _hr = get_currentPositionString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(116)
inline HRESULT IGAMEDIA::IWMPControls::next ( ) {
    HRESULT _hr = raw_next();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(117)
inline HRESULT IGAMEDIA::IWMPControls::previous ( ) {
    HRESULT _hr = raw_previous();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(118)
inline IGAMEDIA::IWMPMediaPtr IGAMEDIA::IWMPControls::GetcurrentItem ( ) {
    struct IWMPMedia * _result;
    HRESULT _hr = get_currentItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaPtr(_result, false);
}

#pragma implementation_key(119)
inline void IGAMEDIA::IWMPControls::PutcurrentItem ( struct IWMPMedia * ppIWMPMedia ) {
    HRESULT _hr = put_currentItem(ppIWMPMedia);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(120)
inline long IGAMEDIA::IWMPControls::GetcurrentMarker ( ) {
    long _result;
    HRESULT _hr = get_currentMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(121)
inline void IGAMEDIA::IWMPControls::PutcurrentMarker ( long plMarker ) {
    HRESULT _hr = put_currentMarker(plMarker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(122)
inline HRESULT IGAMEDIA::IWMPControls::playItem ( struct IWMPMedia * pIWMPMedia ) {
    HRESULT _hr = raw_playItem(pIWMPMedia);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPMedia wrapper method implementations
//

#pragma implementation_key(123)
inline VARIANT_BOOL IGAMEDIA::IWMPMedia::GetisIdentical ( struct IWMPMedia * pIWMPMedia ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_isIdentical(pIWMPMedia, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(124)
inline _bstr_t IGAMEDIA::IWMPMedia::GetsourceURL ( ) {
    BSTR _result;
    HRESULT _hr = get_sourceURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(125)
inline _bstr_t IGAMEDIA::IWMPMedia::Getname ( ) {
    BSTR _result;
    HRESULT _hr = get_name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(126)
inline void IGAMEDIA::IWMPMedia::Putname ( _bstr_t pbstrName ) {
    HRESULT _hr = put_name(pbstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(127)
inline long IGAMEDIA::IWMPMedia::GetimageSourceWidth ( ) {
    long _result;
    HRESULT _hr = get_imageSourceWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(128)
inline long IGAMEDIA::IWMPMedia::GetimageSourceHeight ( ) {
    long _result;
    HRESULT _hr = get_imageSourceHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(129)
inline long IGAMEDIA::IWMPMedia::GetmarkerCount ( ) {
    long _result;
    HRESULT _hr = get_markerCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(130)
inline double IGAMEDIA::IWMPMedia::getMarkerTime ( long MarkerNum ) {
    double _result;
    HRESULT _hr = raw_getMarkerTime(MarkerNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(131)
inline _bstr_t IGAMEDIA::IWMPMedia::getMarkerName ( long MarkerNum ) {
    BSTR _result;
    HRESULT _hr = raw_getMarkerName(MarkerNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(132)
inline double IGAMEDIA::IWMPMedia::Getduration ( ) {
    double _result;
    HRESULT _hr = get_duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(133)
inline _bstr_t IGAMEDIA::IWMPMedia::GetdurationString ( ) {
    BSTR _result;
    HRESULT _hr = get_durationString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(134)
inline long IGAMEDIA::IWMPMedia::GetattributeCount ( ) {
    long _result;
    HRESULT _hr = get_attributeCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(135)
inline _bstr_t IGAMEDIA::IWMPMedia::getAttributeName ( long lIndex ) {
    BSTR _result;
    HRESULT _hr = raw_getAttributeName(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(136)
inline _bstr_t IGAMEDIA::IWMPMedia::getItemInfo ( _bstr_t bstrItemName ) {
    BSTR _result;
    HRESULT _hr = raw_getItemInfo(bstrItemName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(137)
inline HRESULT IGAMEDIA::IWMPMedia::setItemInfo ( _bstr_t bstrItemName, _bstr_t bstrVal ) {
    HRESULT _hr = raw_setItemInfo(bstrItemName, bstrVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(138)
inline _bstr_t IGAMEDIA::IWMPMedia::getItemInfoByAtom ( long lAtom ) {
    BSTR _result;
    HRESULT _hr = raw_getItemInfoByAtom(lAtom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(139)
inline VARIANT_BOOL IGAMEDIA::IWMPMedia::isMemberOf ( struct IWMPPlaylist * pPlaylist ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_isMemberOf(pPlaylist, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(140)
inline VARIANT_BOOL IGAMEDIA::IWMPMedia::isReadOnlyItem ( _bstr_t bstrItemName ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_isReadOnlyItem(bstrItemName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPPlaylist wrapper method implementations
//

#pragma implementation_key(141)
inline long IGAMEDIA::IWMPPlaylist::Getcount ( ) {
    long _result;
    HRESULT _hr = get_count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(142)
inline _bstr_t IGAMEDIA::IWMPPlaylist::Getname ( ) {
    BSTR _result;
    HRESULT _hr = get_name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(143)
inline void IGAMEDIA::IWMPPlaylist::Putname ( _bstr_t pbstrName ) {
    HRESULT _hr = put_name(pbstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(144)
inline long IGAMEDIA::IWMPPlaylist::GetattributeCount ( ) {
    long _result;
    HRESULT _hr = get_attributeCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(145)
inline _bstr_t IGAMEDIA::IWMPPlaylist::GetattributeName ( long lIndex ) {
    BSTR _result;
    HRESULT _hr = get_attributeName(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(146)
inline IGAMEDIA::IWMPMediaPtr IGAMEDIA::IWMPPlaylist::GetItem ( long lIndex ) {
    struct IWMPMedia * _result;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaPtr(_result, false);
}

#pragma implementation_key(147)
inline _bstr_t IGAMEDIA::IWMPPlaylist::getItemInfo ( _bstr_t bstrName ) {
    BSTR _result;
    HRESULT _hr = raw_getItemInfo(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(148)
inline HRESULT IGAMEDIA::IWMPPlaylist::setItemInfo ( _bstr_t bstrName, _bstr_t bstrValue ) {
    HRESULT _hr = raw_setItemInfo(bstrName, bstrValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(149)
inline VARIANT_BOOL IGAMEDIA::IWMPPlaylist::GetisIdentical ( struct IWMPPlaylist * pIWMPPlaylist ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_isIdentical(pIWMPPlaylist, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(150)
inline HRESULT IGAMEDIA::IWMPPlaylist::clear ( ) {
    HRESULT _hr = raw_clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(151)
inline HRESULT IGAMEDIA::IWMPPlaylist::insertItem ( long lIndex, struct IWMPMedia * pIWMPMedia ) {
    HRESULT _hr = raw_insertItem(lIndex, pIWMPMedia);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(152)
inline HRESULT IGAMEDIA::IWMPPlaylist::appendItem ( struct IWMPMedia * pIWMPMedia ) {
    HRESULT _hr = raw_appendItem(pIWMPMedia);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(153)
inline HRESULT IGAMEDIA::IWMPPlaylist::removeItem ( struct IWMPMedia * pIWMPMedia ) {
    HRESULT _hr = raw_removeItem(pIWMPMedia);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(154)
inline HRESULT IGAMEDIA::IWMPPlaylist::moveItem ( long lIndexOld, long lIndexNew ) {
    HRESULT _hr = raw_moveItem(lIndexOld, lIndexNew);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPSettings wrapper method implementations
//

#pragma implementation_key(155)
inline VARIANT_BOOL IGAMEDIA::IWMPSettings::GetisAvailable ( _bstr_t bstrItem ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_isAvailable(bstrItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(156)
inline VARIANT_BOOL IGAMEDIA::IWMPSettings::GetautoStart ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_autoStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(157)
inline void IGAMEDIA::IWMPSettings::PutautoStart ( VARIANT_BOOL pfAutoStart ) {
    HRESULT _hr = put_autoStart(pfAutoStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(158)
inline _bstr_t IGAMEDIA::IWMPSettings::GetbaseURL ( ) {
    BSTR _result;
    HRESULT _hr = get_baseURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(159)
inline void IGAMEDIA::IWMPSettings::PutbaseURL ( _bstr_t pbstrBaseURL ) {
    HRESULT _hr = put_baseURL(pbstrBaseURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(160)
inline _bstr_t IGAMEDIA::IWMPSettings::GetdefaultFrame ( ) {
    BSTR _result;
    HRESULT _hr = get_defaultFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(161)
inline void IGAMEDIA::IWMPSettings::PutdefaultFrame ( _bstr_t pbstrDefaultFrame ) {
    HRESULT _hr = put_defaultFrame(pbstrDefaultFrame);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(162)
inline VARIANT_BOOL IGAMEDIA::IWMPSettings::GetinvokeURLs ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_invokeURLs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline void IGAMEDIA::IWMPSettings::PutinvokeURLs ( VARIANT_BOOL pfInvokeURLs ) {
    HRESULT _hr = put_invokeURLs(pfInvokeURLs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(164)
inline VARIANT_BOOL IGAMEDIA::IWMPSettings::Getmute ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_mute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(165)
inline void IGAMEDIA::IWMPSettings::Putmute ( VARIANT_BOOL pfMute ) {
    HRESULT _hr = put_mute(pfMute);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(166)
inline long IGAMEDIA::IWMPSettings::GetplayCount ( ) {
    long _result;
    HRESULT _hr = get_playCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(167)
inline void IGAMEDIA::IWMPSettings::PutplayCount ( long plCount ) {
    HRESULT _hr = put_playCount(plCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(168)
inline double IGAMEDIA::IWMPSettings::Getrate ( ) {
    double _result;
    HRESULT _hr = get_rate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(169)
inline void IGAMEDIA::IWMPSettings::Putrate ( double pdRate ) {
    HRESULT _hr = put_rate(pdRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(170)
inline long IGAMEDIA::IWMPSettings::Getbalance ( ) {
    long _result;
    HRESULT _hr = get_balance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(171)
inline void IGAMEDIA::IWMPSettings::Putbalance ( long plBalance ) {
    HRESULT _hr = put_balance(plBalance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(172)
inline long IGAMEDIA::IWMPSettings::Getvolume ( ) {
    long _result;
    HRESULT _hr = get_volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(173)
inline void IGAMEDIA::IWMPSettings::Putvolume ( long plVolume ) {
    HRESULT _hr = put_volume(plVolume);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(174)
inline VARIANT_BOOL IGAMEDIA::IWMPSettings::getMode ( _bstr_t bstrMode ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_getMode(bstrMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(175)
inline HRESULT IGAMEDIA::IWMPSettings::setMode ( _bstr_t bstrMode, VARIANT_BOOL varfMode ) {
    HRESULT _hr = raw_setMode(bstrMode, varfMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(176)
inline VARIANT_BOOL IGAMEDIA::IWMPSettings::GetenableErrorDialogs ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_enableErrorDialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(177)
inline void IGAMEDIA::IWMPSettings::PutenableErrorDialogs ( VARIANT_BOOL pfEnableErrorDialogs ) {
    HRESULT _hr = put_enableErrorDialogs(pfEnableErrorDialogs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPMediaCollection wrapper method implementations
//

#pragma implementation_key(178)
inline IGAMEDIA::IWMPMediaPtr IGAMEDIA::IWMPMediaCollection::add ( _bstr_t bstrURL ) {
    struct IWMPMedia * _result;
    HRESULT _hr = raw_add(bstrURL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaPtr(_result, false);
}

#pragma implementation_key(179)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPMediaCollection::getAll ( ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = raw_getAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(180)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPMediaCollection::getByName ( _bstr_t bstrName ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = raw_getByName(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(181)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPMediaCollection::getByGenre ( _bstr_t bstrGenre ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = raw_getByGenre(bstrGenre, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(182)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPMediaCollection::getByAuthor ( _bstr_t bstrAuthor ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = raw_getByAuthor(bstrAuthor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(183)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPMediaCollection::getByAlbum ( _bstr_t bstrAlbum ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = raw_getByAlbum(bstrAlbum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(184)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPMediaCollection::getByAttribute ( _bstr_t bstrAttribute, _bstr_t bstrValue ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = raw_getByAttribute(bstrAttribute, bstrValue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(185)
inline HRESULT IGAMEDIA::IWMPMediaCollection::remove ( struct IWMPMedia * pItem, VARIANT_BOOL varfDeleteFile ) {
    HRESULT _hr = raw_remove(pItem, varfDeleteFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(186)
inline IGAMEDIA::IWMPStringCollectionPtr IGAMEDIA::IWMPMediaCollection::getAttributeStringCollection ( _bstr_t bstrAttribute, _bstr_t bstrMediaType ) {
    struct IWMPStringCollection * _result;
    HRESULT _hr = raw_getAttributeStringCollection(bstrAttribute, bstrMediaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPStringCollectionPtr(_result, false);
}

#pragma implementation_key(187)
inline long IGAMEDIA::IWMPMediaCollection::getMediaAtom ( _bstr_t bstrItemName ) {
    long _result;
    HRESULT _hr = raw_getMediaAtom(bstrItemName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(188)
inline HRESULT IGAMEDIA::IWMPMediaCollection::setDeleted ( struct IWMPMedia * pItem, VARIANT_BOOL varfIsDeleted ) {
    HRESULT _hr = raw_setDeleted(pItem, varfIsDeleted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(189)
inline VARIANT_BOOL IGAMEDIA::IWMPMediaCollection::isDeleted ( struct IWMPMedia * pItem ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_isDeleted(pItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPStringCollection wrapper method implementations
//

#pragma implementation_key(190)
inline long IGAMEDIA::IWMPStringCollection::Getcount ( ) {
    long _result;
    HRESULT _hr = get_count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(191)
inline _bstr_t IGAMEDIA::IWMPStringCollection::Item ( long lIndex ) {
    BSTR _result;
    HRESULT _hr = raw_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPPlaylistCollection wrapper method implementations
//

#pragma implementation_key(192)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPPlaylistCollection::newPlaylist ( _bstr_t bstrName ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = raw_newPlaylist(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(193)
inline IGAMEDIA::IWMPPlaylistArrayPtr IGAMEDIA::IWMPPlaylistCollection::getAll ( ) {
    struct IWMPPlaylistArray * _result;
    HRESULT _hr = raw_getAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistArrayPtr(_result, false);
}

#pragma implementation_key(194)
inline IGAMEDIA::IWMPPlaylistArrayPtr IGAMEDIA::IWMPPlaylistCollection::getByName ( _bstr_t bstrName ) {
    struct IWMPPlaylistArray * _result;
    HRESULT _hr = raw_getByName(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistArrayPtr(_result, false);
}

#pragma implementation_key(195)
inline HRESULT IGAMEDIA::IWMPPlaylistCollection::remove ( struct IWMPPlaylist * pItem ) {
    HRESULT _hr = raw_remove(pItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(196)
inline HRESULT IGAMEDIA::IWMPPlaylistCollection::setDeleted ( struct IWMPPlaylist * pItem, VARIANT_BOOL varfIsDeleted ) {
    HRESULT _hr = raw_setDeleted(pItem, varfIsDeleted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(197)
inline VARIANT_BOOL IGAMEDIA::IWMPPlaylistCollection::isDeleted ( struct IWMPPlaylist * pItem ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_isDeleted(pItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(198)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPPlaylistCollection::importPlaylist ( struct IWMPPlaylist * pItem ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = raw_importPlaylist(pItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

//
// interface IWMPPlaylistArray wrapper method implementations
//

#pragma implementation_key(199)
inline long IGAMEDIA::IWMPPlaylistArray::Getcount ( ) {
    long _result;
    HRESULT _hr = get_count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(200)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPPlaylistArray::Item ( long lIndex ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = raw_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

//
// interface IWMPNetwork wrapper method implementations
//

#pragma implementation_key(201)
inline long IGAMEDIA::IWMPNetwork::GetbandWidth ( ) {
    long _result;
    HRESULT _hr = get_bandWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(202)
inline long IGAMEDIA::IWMPNetwork::GetrecoveredPackets ( ) {
    long _result;
    HRESULT _hr = get_recoveredPackets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(203)
inline _bstr_t IGAMEDIA::IWMPNetwork::GetsourceProtocol ( ) {
    BSTR _result;
    HRESULT _hr = get_sourceProtocol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(204)
inline long IGAMEDIA::IWMPNetwork::GetreceivedPackets ( ) {
    long _result;
    HRESULT _hr = get_receivedPackets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(205)
inline long IGAMEDIA::IWMPNetwork::GetlostPackets ( ) {
    long _result;
    HRESULT _hr = get_lostPackets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(206)
inline long IGAMEDIA::IWMPNetwork::GetreceptionQuality ( ) {
    long _result;
    HRESULT _hr = get_receptionQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(207)
inline long IGAMEDIA::IWMPNetwork::GetbufferingCount ( ) {
    long _result;
    HRESULT _hr = get_bufferingCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(208)
inline long IGAMEDIA::IWMPNetwork::GetbufferingProgress ( ) {
    long _result;
    HRESULT _hr = get_bufferingProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(209)
inline long IGAMEDIA::IWMPNetwork::GetbufferingTime ( ) {
    long _result;
    HRESULT _hr = get_bufferingTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(210)
inline void IGAMEDIA::IWMPNetwork::PutbufferingTime ( long plBufferingTime ) {
    HRESULT _hr = put_bufferingTime(plBufferingTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(211)
inline long IGAMEDIA::IWMPNetwork::GetframeRate ( ) {
    long _result;
    HRESULT _hr = get_frameRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(212)
inline long IGAMEDIA::IWMPNetwork::GetmaxBitRate ( ) {
    long _result;
    HRESULT _hr = get_maxBitRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(213)
inline long IGAMEDIA::IWMPNetwork::GetbitRate ( ) {
    long _result;
    HRESULT _hr = get_bitRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(214)
inline long IGAMEDIA::IWMPNetwork::getProxySettings ( _bstr_t bstrProtocol ) {
    long _result;
    HRESULT _hr = raw_getProxySettings(bstrProtocol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(215)
inline HRESULT IGAMEDIA::IWMPNetwork::setProxySettings ( _bstr_t bstrProtocol, long lProxySetting ) {
    HRESULT _hr = raw_setProxySettings(bstrProtocol, lProxySetting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(216)
inline _bstr_t IGAMEDIA::IWMPNetwork::getProxyName ( _bstr_t bstrProtocol ) {
    BSTR _result;
    HRESULT _hr = raw_getProxyName(bstrProtocol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(217)
inline HRESULT IGAMEDIA::IWMPNetwork::setProxyName ( _bstr_t bstrProtocol, _bstr_t bstrProxyName ) {
    HRESULT _hr = raw_setProxyName(bstrProtocol, bstrProxyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(218)
inline long IGAMEDIA::IWMPNetwork::getProxyPort ( _bstr_t bstrProtocol ) {
    long _result;
    HRESULT _hr = raw_getProxyPort(bstrProtocol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(219)
inline HRESULT IGAMEDIA::IWMPNetwork::setProxyPort ( _bstr_t bstrProtocol, long lProxyPort ) {
    HRESULT _hr = raw_setProxyPort(bstrProtocol, lProxyPort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(220)
inline _bstr_t IGAMEDIA::IWMPNetwork::getProxyExceptionList ( _bstr_t bstrProtocol ) {
    BSTR _result;
    HRESULT _hr = raw_getProxyExceptionList(bstrProtocol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(221)
inline HRESULT IGAMEDIA::IWMPNetwork::setProxyExceptionList ( _bstr_t bstrProtocol, _bstr_t pbstrExceptionList ) {
    HRESULT _hr = raw_setProxyExceptionList(bstrProtocol, pbstrExceptionList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(222)
inline VARIANT_BOOL IGAMEDIA::IWMPNetwork::getProxyBypassForLocal ( _bstr_t bstrProtocol ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_getProxyBypassForLocal(bstrProtocol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(223)
inline HRESULT IGAMEDIA::IWMPNetwork::setProxyBypassForLocal ( _bstr_t bstrProtocol, VARIANT_BOOL fBypassForLocal ) {
    HRESULT _hr = raw_setProxyBypassForLocal(bstrProtocol, fBypassForLocal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(224)
inline long IGAMEDIA::IWMPNetwork::GetmaxBandwidth ( ) {
    long _result;
    HRESULT _hr = get_maxBandwidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(225)
inline void IGAMEDIA::IWMPNetwork::PutmaxBandwidth ( long lMaxBandwidth ) {
    HRESULT _hr = put_maxBandwidth(lMaxBandwidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(226)
inline long IGAMEDIA::IWMPNetwork::GetdownloadProgress ( ) {
    long _result;
    HRESULT _hr = get_downloadProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(227)
inline long IGAMEDIA::IWMPNetwork::GetencodedFrameRate ( ) {
    long _result;
    HRESULT _hr = get_encodedFrameRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(228)
inline long IGAMEDIA::IWMPNetwork::GetframesSkipped ( ) {
    long _result;
    HRESULT _hr = get_framesSkipped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPCdromCollection wrapper method implementations
//

#pragma implementation_key(229)
inline long IGAMEDIA::IWMPCdromCollection::Getcount ( ) {
    long _result;
    HRESULT _hr = get_count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(230)
inline IGAMEDIA::IWMPCdromPtr IGAMEDIA::IWMPCdromCollection::Item ( long lIndex ) {
    struct IWMPCdrom * _result;
    HRESULT _hr = raw_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPCdromPtr(_result, false);
}

#pragma implementation_key(231)
inline IGAMEDIA::IWMPCdromPtr IGAMEDIA::IWMPCdromCollection::getByDriveSpecifier ( _bstr_t bstrDriveSpecifier ) {
    struct IWMPCdrom * _result;
    HRESULT _hr = raw_getByDriveSpecifier(bstrDriveSpecifier, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPCdromPtr(_result, false);
}

//
// interface IWMPCdrom wrapper method implementations
//

#pragma implementation_key(232)
inline _bstr_t IGAMEDIA::IWMPCdrom::GetdriveSpecifier ( ) {
    BSTR _result;
    HRESULT _hr = get_driveSpecifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(233)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPCdrom::GetPlaylist ( ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = get_Playlist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(234)
inline HRESULT IGAMEDIA::IWMPCdrom::eject ( ) {
    HRESULT _hr = raw_eject();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPClosedCaption wrapper method implementations
//

#pragma implementation_key(235)
inline _bstr_t IGAMEDIA::IWMPClosedCaption::GetSAMIStyle ( ) {
    BSTR _result;
    HRESULT _hr = get_SAMIStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(236)
inline void IGAMEDIA::IWMPClosedCaption::PutSAMIStyle ( _bstr_t pbstrSAMIStyle ) {
    HRESULT _hr = put_SAMIStyle(pbstrSAMIStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(237)
inline _bstr_t IGAMEDIA::IWMPClosedCaption::GetSAMILang ( ) {
    BSTR _result;
    HRESULT _hr = get_SAMILang(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(238)
inline void IGAMEDIA::IWMPClosedCaption::PutSAMILang ( _bstr_t pbstrSAMILang ) {
    HRESULT _hr = put_SAMILang(pbstrSAMILang);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(239)
inline _bstr_t IGAMEDIA::IWMPClosedCaption::GetSAMIFileName ( ) {
    BSTR _result;
    HRESULT _hr = get_SAMIFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(240)
inline void IGAMEDIA::IWMPClosedCaption::PutSAMIFileName ( _bstr_t pbstrSAMIFileName ) {
    HRESULT _hr = put_SAMIFileName(pbstrSAMIFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(241)
inline _bstr_t IGAMEDIA::IWMPClosedCaption::GetcaptioningId ( ) {
    BSTR _result;
    HRESULT _hr = get_captioningId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(242)
inline void IGAMEDIA::IWMPClosedCaption::PutcaptioningId ( _bstr_t pbstrCaptioningID ) {
    HRESULT _hr = put_captioningId(pbstrCaptioningID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPError wrapper method implementations
//

#pragma implementation_key(243)
inline HRESULT IGAMEDIA::IWMPError::clearErrorQueue ( ) {
    HRESULT _hr = raw_clearErrorQueue();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(244)
inline long IGAMEDIA::IWMPError::GeterrorCount ( ) {
    long _result;
    HRESULT _hr = get_errorCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(245)
inline IGAMEDIA::IWMPErrorItemPtr IGAMEDIA::IWMPError::GetItem ( long dwIndex ) {
    struct IWMPErrorItem * _result;
    HRESULT _hr = get_Item(dwIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPErrorItemPtr(_result, false);
}

#pragma implementation_key(246)
inline HRESULT IGAMEDIA::IWMPError::webHelp ( ) {
    HRESULT _hr = raw_webHelp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPErrorItem wrapper method implementations
//

#pragma implementation_key(247)
inline long IGAMEDIA::IWMPErrorItem::GeterrorCode ( ) {
    long _result;
    HRESULT _hr = get_errorCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(248)
inline _bstr_t IGAMEDIA::IWMPErrorItem::GeterrorDescription ( ) {
    BSTR _result;
    HRESULT _hr = get_errorDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(249)
inline _variant_t IGAMEDIA::IWMPErrorItem::GeterrorContext ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_errorContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(250)
inline long IGAMEDIA::IWMPErrorItem::Getremedy ( ) {
    long _result;
    HRESULT _hr = get_remedy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(251)
inline _bstr_t IGAMEDIA::IWMPErrorItem::GetcustomUrl ( ) {
    BSTR _result;
    HRESULT _hr = get_customUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPDVD wrapper method implementations
//

#pragma implementation_key(252)
inline VARIANT_BOOL IGAMEDIA::IWMPDVD::GetisAvailable ( _bstr_t bstrItem ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_isAvailable(bstrItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline _bstr_t IGAMEDIA::IWMPDVD::Getdomain ( ) {
    BSTR _result;
    HRESULT _hr = get_domain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(254)
inline HRESULT IGAMEDIA::IWMPDVD::topMenu ( ) {
    HRESULT _hr = raw_topMenu();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(255)
inline HRESULT IGAMEDIA::IWMPDVD::titleMenu ( ) {
    HRESULT _hr = raw_titleMenu();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(256)
inline HRESULT IGAMEDIA::IWMPDVD::back ( ) {
    HRESULT _hr = raw_back();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(257)
inline HRESULT IGAMEDIA::IWMPDVD::resume ( ) {
    HRESULT _hr = raw_resume();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPPlayerApplication wrapper method implementations
//

#pragma implementation_key(258)
inline HRESULT IGAMEDIA::IWMPPlayerApplication::switchToPlayerApplication ( ) {
    HRESULT _hr = raw_switchToPlayerApplication();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(259)
inline HRESULT IGAMEDIA::IWMPPlayerApplication::switchToControl ( ) {
    HRESULT _hr = raw_switchToControl();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(260)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayerApplication::GetplayerDocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_playerDocked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(261)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayerApplication::GethasDisplay ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_hasDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPPlayer3 wrapper method implementations
//

#pragma implementation_key(262)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer3::Getenabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(263)
inline void IGAMEDIA::IWMPPlayer3::Putenabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(264)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer3::GetfullScreen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_fullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(265)
inline void IGAMEDIA::IWMPPlayer3::PutfullScreen ( VARIANT_BOOL pbFullScreen ) {
    HRESULT _hr = put_fullScreen(pbFullScreen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(266)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer3::GetenableContextMenu ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_enableContextMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(267)
inline void IGAMEDIA::IWMPPlayer3::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu ) {
    HRESULT _hr = put_enableContextMenu(pbEnableContextMenu);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(268)
inline void IGAMEDIA::IWMPPlayer3::PutuiMode ( _bstr_t pbstrMode ) {
    HRESULT _hr = put_uiMode(pbstrMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(269)
inline _bstr_t IGAMEDIA::IWMPPlayer3::GetuiMode ( ) {
    BSTR _result;
    HRESULT _hr = get_uiMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(270)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer3::GetstretchToFit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_stretchToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(271)
inline void IGAMEDIA::IWMPPlayer3::PutstretchToFit ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_stretchToFit(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(272)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer3::GetwindowlessVideo ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_windowlessVideo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(273)
inline void IGAMEDIA::IWMPPlayer3::PutwindowlessVideo ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_windowlessVideo(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPPlayer2 wrapper method implementations
//

#pragma implementation_key(274)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer2::Getenabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(275)
inline void IGAMEDIA::IWMPPlayer2::Putenabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(276)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer2::GetfullScreen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_fullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(277)
inline void IGAMEDIA::IWMPPlayer2::PutfullScreen ( VARIANT_BOOL pbFullScreen ) {
    HRESULT _hr = put_fullScreen(pbFullScreen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(278)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer2::GetenableContextMenu ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_enableContextMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(279)
inline void IGAMEDIA::IWMPPlayer2::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu ) {
    HRESULT _hr = put_enableContextMenu(pbEnableContextMenu);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(280)
inline void IGAMEDIA::IWMPPlayer2::PutuiMode ( _bstr_t pbstrMode ) {
    HRESULT _hr = put_uiMode(pbstrMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(281)
inline _bstr_t IGAMEDIA::IWMPPlayer2::GetuiMode ( ) {
    BSTR _result;
    HRESULT _hr = get_uiMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(282)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer2::GetstretchToFit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_stretchToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(283)
inline void IGAMEDIA::IWMPPlayer2::PutstretchToFit ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_stretchToFit(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(284)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer2::GetwindowlessVideo ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_windowlessVideo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(285)
inline void IGAMEDIA::IWMPPlayer2::PutwindowlessVideo ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_windowlessVideo(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPPlayer wrapper method implementations
//

#pragma implementation_key(286)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer::Getenabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(287)
inline void IGAMEDIA::IWMPPlayer::Putenabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(288)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer::GetfullScreen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_fullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(289)
inline void IGAMEDIA::IWMPPlayer::PutfullScreen ( VARIANT_BOOL pbFullScreen ) {
    HRESULT _hr = put_fullScreen(pbFullScreen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(290)
inline VARIANT_BOOL IGAMEDIA::IWMPPlayer::GetenableContextMenu ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_enableContextMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(291)
inline void IGAMEDIA::IWMPPlayer::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu ) {
    HRESULT _hr = put_enableContextMenu(pbEnableContextMenu);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(292)
inline void IGAMEDIA::IWMPPlayer::PutuiMode ( _bstr_t pbstrMode ) {
    HRESULT _hr = put_uiMode(pbstrMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(293)
inline _bstr_t IGAMEDIA::IWMPPlayer::GetuiMode ( ) {
    BSTR _result;
    HRESULT _hr = get_uiMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPErrorItem2 wrapper method implementations
//

#pragma implementation_key(294)
inline long IGAMEDIA::IWMPErrorItem2::Getcondition ( ) {
    long _result;
    HRESULT _hr = get_condition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPControls2 wrapper method implementations
//

#pragma implementation_key(295)
inline HRESULT IGAMEDIA::IWMPControls2::step ( long lStep ) {
    HRESULT _hr = raw_step(lStep);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPMedia2 wrapper method implementations
//

#pragma implementation_key(296)
inline IGAMEDIA::IWMPErrorItemPtr IGAMEDIA::IWMPMedia2::GetError ( ) {
    struct IWMPErrorItem * _result;
    HRESULT _hr = get_Error(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPErrorItemPtr(_result, false);
}

//
// interface IWMPMedia3 wrapper method implementations
//

#pragma implementation_key(297)
inline long IGAMEDIA::IWMPMedia3::getAttributeCountByType ( _bstr_t bstrType, _bstr_t bstrLanguage ) {
    long _result;
    HRESULT _hr = raw_getAttributeCountByType(bstrType, bstrLanguage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(298)
inline _variant_t IGAMEDIA::IWMPMedia3::getItemInfoByType ( _bstr_t bstrType, _bstr_t bstrLanguage, long lIndex ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_getItemInfoByType(bstrType, bstrLanguage, lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IWMPMetadataPicture wrapper method implementations
//

#pragma implementation_key(299)
inline _bstr_t IGAMEDIA::IWMPMetadataPicture::GetmimeType ( ) {
    BSTR _result;
    HRESULT _hr = get_mimeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(300)
inline _bstr_t IGAMEDIA::IWMPMetadataPicture::GetpictureType ( ) {
    BSTR _result;
    HRESULT _hr = get_pictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(301)
inline _bstr_t IGAMEDIA::IWMPMetadataPicture::GetDescription ( ) {
    BSTR _result;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(302)
inline _bstr_t IGAMEDIA::IWMPMetadataPicture::GetURL ( ) {
    BSTR _result;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPMetadataText wrapper method implementations
//

#pragma implementation_key(303)
inline _bstr_t IGAMEDIA::IWMPMetadataText::GetDescription ( ) {
    BSTR _result;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(304)
inline _bstr_t IGAMEDIA::IWMPMetadataText::Gettext ( ) {
    BSTR _result;
    HRESULT _hr = get_text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPSettings2 wrapper method implementations
//

#pragma implementation_key(305)
inline long IGAMEDIA::IWMPSettings2::GetdefaultAudioLanguage ( ) {
    long _result;
    HRESULT _hr = get_defaultAudioLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(306)
inline _bstr_t IGAMEDIA::IWMPSettings2::GetmediaAccessRights ( ) {
    BSTR _result;
    HRESULT _hr = get_mediaAccessRights(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(307)
inline VARIANT_BOOL IGAMEDIA::IWMPSettings2::requestMediaAccessRights ( _bstr_t bstrDesiredAccess ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_requestMediaAccessRights(bstrDesiredAccess, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPControls3 wrapper method implementations
//

#pragma implementation_key(308)
inline long IGAMEDIA::IWMPControls3::GetaudioLanguageCount ( ) {
    long _result;
    HRESULT _hr = get_audioLanguageCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(309)
inline long IGAMEDIA::IWMPControls3::getAudioLanguageID ( long lIndex ) {
    long _result;
    HRESULT _hr = raw_getAudioLanguageID(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(310)
inline _bstr_t IGAMEDIA::IWMPControls3::getAudioLanguageDescription ( long lIndex ) {
    BSTR _result;
    HRESULT _hr = raw_getAudioLanguageDescription(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(311)
inline long IGAMEDIA::IWMPControls3::GetcurrentAudioLanguage ( ) {
    long _result;
    HRESULT _hr = get_currentAudioLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(312)
inline void IGAMEDIA::IWMPControls3::PutcurrentAudioLanguage ( long plLangID ) {
    HRESULT _hr = put_currentAudioLanguage(plLangID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(313)
inline long IGAMEDIA::IWMPControls3::GetcurrentAudioLanguageIndex ( ) {
    long _result;
    HRESULT _hr = get_currentAudioLanguageIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(314)
inline void IGAMEDIA::IWMPControls3::PutcurrentAudioLanguageIndex ( long plIndex ) {
    HRESULT _hr = put_currentAudioLanguageIndex(plIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(315)
inline _bstr_t IGAMEDIA::IWMPControls3::getLanguageName ( long lLangID ) {
    BSTR _result;
    HRESULT _hr = raw_getLanguageName(lLangID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(316)
inline _bstr_t IGAMEDIA::IWMPControls3::GetcurrentPositionTimecode ( ) {
    BSTR _result;
    HRESULT _hr = get_currentPositionTimecode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(317)
inline void IGAMEDIA::IWMPControls3::PutcurrentPositionTimecode ( _bstr_t bstrTimecode ) {
    HRESULT _hr = put_currentPositionTimecode(bstrTimecode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPClosedCaption2 wrapper method implementations
//

#pragma implementation_key(318)
inline long IGAMEDIA::IWMPClosedCaption2::GetSAMILangCount ( ) {
    long _result;
    HRESULT _hr = get_SAMILangCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(319)
inline _bstr_t IGAMEDIA::IWMPClosedCaption2::getSAMILangName ( long nIndex ) {
    BSTR _result;
    HRESULT _hr = raw_getSAMILangName(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(320)
inline long IGAMEDIA::IWMPClosedCaption2::getSAMILangID ( long nIndex ) {
    long _result;
    HRESULT _hr = raw_getSAMILangID(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(321)
inline long IGAMEDIA::IWMPClosedCaption2::GetSAMIStyleCount ( ) {
    long _result;
    HRESULT _hr = get_SAMIStyleCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(322)
inline _bstr_t IGAMEDIA::IWMPClosedCaption2::getSAMIStyleName ( long nIndex ) {
    BSTR _result;
    HRESULT _hr = raw_getSAMIStyleName(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPPlaylistCtrl wrapper method implementations
//

#pragma implementation_key(323)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPPlaylistCtrl::GetPlaylist ( ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = get_Playlist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(324)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutPlaylist ( struct IWMPPlaylist * ppdispPlaylist ) {
    HRESULT _hr = put_Playlist(ppdispPlaylist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(325)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::Getcolumns ( ) {
    BSTR _result;
    HRESULT _hr = get_columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(326)
inline void IGAMEDIA::IWMPPlaylistCtrl::Putcolumns ( _bstr_t pbstrColumns ) {
    HRESULT _hr = put_columns(pbstrColumns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(327)
inline long IGAMEDIA::IWMPPlaylistCtrl::GetcolumnCount ( ) {
    long _result;
    HRESULT _hr = get_columnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(328)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetcolumnOrder ( ) {
    BSTR _result;
    HRESULT _hr = get_columnOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(329)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutcolumnOrder ( _bstr_t pbstrColumnOrder ) {
    HRESULT _hr = put_columnOrder(pbstrColumnOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(330)
inline VARIANT_BOOL IGAMEDIA::IWMPPlaylistCtrl::GetcolumnsVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_columnsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(331)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutcolumnsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_columnsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(332)
inline VARIANT_BOOL IGAMEDIA::IWMPPlaylistCtrl::GetdropDownVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_dropDownVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(333)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutdropDownVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_dropDownVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(334)
inline VARIANT_BOOL IGAMEDIA::IWMPPlaylistCtrl::GetplaylistItemsVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_playlistItemsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(335)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutplaylistItemsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_playlistItemsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(336)
inline VARIANT_BOOL IGAMEDIA::IWMPPlaylistCtrl::GetcheckboxesVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_checkboxesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(337)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutcheckboxesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_checkboxesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(338)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetbackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(339)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutbackgroundColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_backgroundColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(340)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetforegroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_foregroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(341)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutforegroundColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_foregroundColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(342)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetdisabledItemColor ( ) {
    BSTR _result;
    HRESULT _hr = get_disabledItemColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(343)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutdisabledItemColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_disabledItemColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(344)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetitemPlayingColor ( ) {
    BSTR _result;
    HRESULT _hr = get_itemPlayingColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(345)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutitemPlayingColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_itemPlayingColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(346)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetitemPlayingBackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_itemPlayingBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(347)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutitemPlayingBackgroundColor ( _bstr_t pbstrBackgroundColor ) {
    HRESULT _hr = put_itemPlayingBackgroundColor(pbstrBackgroundColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(348)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetbackgroundImage ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(349)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutbackgroundImage ( _bstr_t pbstrImage ) {
    HRESULT _hr = put_backgroundImage(pbstrImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(350)
inline VARIANT_BOOL IGAMEDIA::IWMPPlaylistCtrl::GetallowItemEditing ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_allowItemEditing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(351)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutallowItemEditing ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_allowItemEditing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(352)
inline VARIANT_BOOL IGAMEDIA::IWMPPlaylistCtrl::GetallowColumnSorting ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_allowColumnSorting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(353)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutallowColumnSorting ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_allowColumnSorting(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(354)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetdropDownList ( ) {
    BSTR _result;
    HRESULT _hr = get_dropDownList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(355)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutdropDownList ( _bstr_t pbstrList ) {
    HRESULT _hr = put_dropDownList(pbstrList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(356)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetdropDownToolTip ( ) {
    BSTR _result;
    HRESULT _hr = get_dropDownToolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(357)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutdropDownToolTip ( _bstr_t pbstrToolTip ) {
    HRESULT _hr = put_dropDownToolTip(pbstrToolTip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(358)
inline VARIANT_BOOL IGAMEDIA::IWMPPlaylistCtrl::Getcopying ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_copying(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(359)
inline HRESULT IGAMEDIA::IWMPPlaylistCtrl::copy ( ) {
    HRESULT _hr = raw_copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(360)
inline HRESULT IGAMEDIA::IWMPPlaylistCtrl::abortCopy ( ) {
    HRESULT _hr = raw_abortCopy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(361)
inline HRESULT IGAMEDIA::IWMPPlaylistCtrl::deleteSelected ( ) {
    HRESULT _hr = raw_deleteSelected();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(362)
inline HRESULT IGAMEDIA::IWMPPlaylistCtrl::deleteSelectedFromLibrary ( ) {
    HRESULT _hr = raw_deleteSelectedFromLibrary();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(363)
inline HRESULT IGAMEDIA::IWMPPlaylistCtrl::moveSelectedUp ( ) {
    HRESULT _hr = raw_moveSelectedUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(364)
inline HRESULT IGAMEDIA::IWMPPlaylistCtrl::moveSelectedDown ( ) {
    HRESULT _hr = raw_moveSelectedDown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(365)
inline HRESULT IGAMEDIA::IWMPPlaylistCtrl::addSelectedToPlaylist ( struct IWMPPlaylist * pdispPlaylist ) {
    HRESULT _hr = raw_addSelectedToPlaylist(pdispPlaylist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(366)
inline long IGAMEDIA::IWMPPlaylistCtrl::getNextSelectedItem ( long nStartIndex ) {
    long _result;
    HRESULT _hr = raw_getNextSelectedItem(nStartIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(367)
inline long IGAMEDIA::IWMPPlaylistCtrl::getNextCheckedItem ( long nStartIndex ) {
    long _result;
    HRESULT _hr = raw_getNextCheckedItem(nStartIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(368)
inline HRESULT IGAMEDIA::IWMPPlaylistCtrl::setSelectedState ( long nIndex, VARIANT_BOOL vbSelected ) {
    HRESULT _hr = raw_setSelectedState(nIndex, vbSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(369)
inline HRESULT IGAMEDIA::IWMPPlaylistCtrl::setCheckedState ( long nIndex, VARIANT_BOOL vbChecked ) {
    HRESULT _hr = raw_setCheckedState(nIndex, vbChecked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(370)
inline HRESULT IGAMEDIA::IWMPPlaylistCtrl::sortColumn ( long nIndex ) {
    HRESULT _hr = raw_sortColumn(nIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(371)
inline HRESULT IGAMEDIA::IWMPPlaylistCtrl::setColumnResizeMode ( long nIndex, _bstr_t newMode ) {
    HRESULT _hr = raw_setColumnResizeMode(nIndex, newMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(372)
inline HRESULT IGAMEDIA::IWMPPlaylistCtrl::setColumnWidth ( long nIndex, long nWidth ) {
    HRESULT _hr = raw_setColumnWidth(nIndex, nWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(373)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetitemErrorColor ( ) {
    BSTR _result;
    HRESULT _hr = get_itemErrorColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(374)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutitemErrorColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_itemErrorColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(375)
inline long IGAMEDIA::IWMPPlaylistCtrl::GetitemCount ( ) {
    long _result;
    HRESULT _hr = get_itemCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(376)
inline IGAMEDIA::IWMPMediaPtr IGAMEDIA::IWMPPlaylistCtrl::GetitemMedia ( long nIndex ) {
    struct IWMPMedia * _result;
    HRESULT _hr = get_itemMedia(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaPtr(_result, false);
}

#pragma implementation_key(377)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPPlaylistCtrl::GetitemPlaylist ( long nIndex ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = get_itemPlaylist(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(378)
inline long IGAMEDIA::IWMPPlaylistCtrl::getNextSelectedItem2 ( long nStartIndex ) {
    long _result;
    HRESULT _hr = raw_getNextSelectedItem2(nStartIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(379)
inline long IGAMEDIA::IWMPPlaylistCtrl::getNextCheckedItem2 ( long nStartIndex ) {
    long _result;
    HRESULT _hr = raw_getNextCheckedItem2(nStartIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(380)
inline HRESULT IGAMEDIA::IWMPPlaylistCtrl::setSelectedState2 ( long nIndex, VARIANT_BOOL vbSelected ) {
    HRESULT _hr = raw_setSelectedState2(nIndex, vbSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(381)
inline HRESULT IGAMEDIA::IWMPPlaylistCtrl::setCheckedState2 ( long nIndex, VARIANT_BOOL vbChecked ) {
    HRESULT _hr = raw_setCheckedState2(nIndex, vbChecked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(382)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetleftStatus ( ) {
    BSTR _result;
    HRESULT _hr = get_leftStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(383)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutleftStatus ( _bstr_t pbstrStatus ) {
    HRESULT _hr = put_leftStatus(pbstrStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(384)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetrightStatus ( ) {
    BSTR _result;
    HRESULT _hr = get_rightStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(385)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutrightStatus ( _bstr_t pbstrStatus ) {
    HRESULT _hr = put_rightStatus(pbstrStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(386)
inline VARIANT_BOOL IGAMEDIA::IWMPPlaylistCtrl::GeteditButtonVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_editButtonVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(387)
inline void IGAMEDIA::IWMPPlaylistCtrl::PuteditButtonVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_editButtonVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(388)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetdropDownImage ( ) {
    BSTR _result;
    HRESULT _hr = get_dropDownImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(389)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutdropDownImage ( _bstr_t pbstrImage ) {
    HRESULT _hr = put_dropDownImage(pbstrImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(390)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetdropDownBackgroundImage ( ) {
    BSTR _result;
    HRESULT _hr = get_dropDownBackgroundImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(391)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutdropDownBackgroundImage ( _bstr_t pbstrImage ) {
    HRESULT _hr = put_dropDownBackgroundImage(pbstrImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(392)
inline float IGAMEDIA::IWMPPlaylistCtrl::GethueShift ( ) {
    float _result;
    HRESULT _hr = get_hueShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(393)
inline void IGAMEDIA::IWMPPlaylistCtrl::PuthueShift ( float pVal ) {
    HRESULT _hr = put_hueShift(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(394)
inline float IGAMEDIA::IWMPPlaylistCtrl::Getsaturation ( ) {
    float _result;
    HRESULT _hr = get_saturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(395)
inline void IGAMEDIA::IWMPPlaylistCtrl::Putsaturation ( float pVal ) {
    HRESULT _hr = put_saturation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(396)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetstatusColor ( ) {
    BSTR _result;
    HRESULT _hr = get_statusColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(397)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutstatusColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_statusColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(398)
inline VARIANT_BOOL IGAMEDIA::IWMPPlaylistCtrl::GettoolbarVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_toolbarVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(399)
inline void IGAMEDIA::IWMPPlaylistCtrl::PuttoolbarVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_toolbarVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(400)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetitemSelectedColor ( ) {
    BSTR _result;
    HRESULT _hr = get_itemSelectedColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(401)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutitemSelectedColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_itemSelectedColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(402)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetitemSelectedFocusLostColor ( ) {
    BSTR _result;
    HRESULT _hr = get_itemSelectedFocusLostColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(403)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutitemSelectedFocusLostColor ( _bstr_t pbstrFocusLostColor ) {
    HRESULT _hr = put_itemSelectedFocusLostColor(pbstrFocusLostColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(404)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetitemSelectedBackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_itemSelectedBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(405)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutitemSelectedBackgroundColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_itemSelectedBackgroundColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(406)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetitemSelectedBackgroundFocusLostColor ( ) {
    BSTR _result;
    HRESULT _hr = get_itemSelectedBackgroundFocusLostColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(407)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutitemSelectedBackgroundFocusLostColor ( _bstr_t pbstrFocusLostColor ) {
    HRESULT _hr = put_itemSelectedBackgroundFocusLostColor(pbstrFocusLostColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(408)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetbackgroundSplitColor ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundSplitColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(409)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutbackgroundSplitColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_backgroundSplitColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(410)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrl::GetstatusTextColor ( ) {
    BSTR _result;
    HRESULT _hr = get_statusTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(411)
inline void IGAMEDIA::IWMPPlaylistCtrl::PutstatusTextColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_statusTextColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAppDispatch wrapper method implementations
//

#pragma implementation_key(412)
inline VARIANT_BOOL IGAMEDIA::IAppDispatch::GettitlebarVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_titlebarVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(413)
inline void IGAMEDIA::IAppDispatch::PuttitlebarVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_titlebarVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(414)
inline VARIANT_BOOL IGAMEDIA::IAppDispatch::GettitlebarAutoHide ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_titlebarAutoHide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(415)
inline void IGAMEDIA::IAppDispatch::PuttitlebarAutoHide ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_titlebarAutoHide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(416)
inline _bstr_t IGAMEDIA::IAppDispatch::GetcurrentTask ( ) {
    BSTR _result;
    HRESULT _hr = get_currentTask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(417)
inline void IGAMEDIA::IAppDispatch::PutcurrentTask ( _bstr_t pVal ) {
    HRESULT _hr = put_currentTask(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(418)
inline VARIANT_BOOL IGAMEDIA::IAppDispatch::GetsettingsVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_settingsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(419)
inline void IGAMEDIA::IAppDispatch::PutsettingsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_settingsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(420)
inline VARIANT_BOOL IGAMEDIA::IAppDispatch::GetplaylistVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_playlistVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(421)
inline void IGAMEDIA::IAppDispatch::PutplaylistVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_playlistVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(422)
inline HRESULT IGAMEDIA::IAppDispatch::gotoSkinMode ( ) {
    HRESULT _hr = raw_gotoSkinMode();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(423)
inline HRESULT IGAMEDIA::IAppDispatch::adjustLeft ( long nDistance ) {
    HRESULT _hr = raw_adjustLeft(nDistance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(424)
inline VARIANT_BOOL IGAMEDIA::IAppDispatch::GettaskbarVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_taskbarVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(425)
inline void IGAMEDIA::IAppDispatch::PuttaskbarVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_taskbarVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(426)
inline long IGAMEDIA::IAppDispatch::GetDPI ( ) {
    long _result;
    HRESULT _hr = get_DPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(427)
inline VARIANT_BOOL IGAMEDIA::IAppDispatch::GetpreviousEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_previousEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(428)
inline HRESULT IGAMEDIA::IAppDispatch::previous ( ) {
    HRESULT _hr = raw_previous();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(429)
inline VARIANT_BOOL IGAMEDIA::IAppDispatch::GettitlebarCurrentlyVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_titlebarCurrentlyVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(430)
inline VARIANT_BOOL IGAMEDIA::IAppDispatch::GetbgPluginRunning ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_bgPluginRunning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(431)
inline HRESULT IGAMEDIA::IAppDispatch::configurePlugins ( long nType ) {
    HRESULT _hr = raw_configurePlugins(nType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(432)
inline _bstr_t IGAMEDIA::IAppDispatch::getTimeString ( double dTime ) {
    BSTR _result;
    HRESULT _hr = raw_getTimeString(dTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(433)
inline VARIANT_BOOL IGAMEDIA::IAppDispatch::GetisXPOrBetter ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_isXPOrBetter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(434)
inline VARIANT_BOOL IGAMEDIA::IAppDispatch::Getmaximized ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_maximized(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPSafeBrowser wrapper method implementations
//

#pragma implementation_key(435)
inline _bstr_t IGAMEDIA::IWMPSafeBrowser::GetURL ( ) {
    BSTR _result;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(436)
inline void IGAMEDIA::IWMPSafeBrowser::PutURL ( _bstr_t pVal ) {
    HRESULT _hr = put_URL(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(437)
inline long IGAMEDIA::IWMPSafeBrowser::Getstatus ( ) {
    long _result;
    HRESULT _hr = get_status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(438)
inline long IGAMEDIA::IWMPSafeBrowser::GetpendingDownloads ( ) {
    long _result;
    HRESULT _hr = get_pendingDownloads(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(439)
inline HRESULT IGAMEDIA::IWMPSafeBrowser::showSAMIText ( _bstr_t samiText ) {
    HRESULT _hr = raw_showSAMIText(samiText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(440)
inline HRESULT IGAMEDIA::IWMPSafeBrowser::showLyrics ( _bstr_t lyrics ) {
    HRESULT _hr = raw_showLyrics(lyrics);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(441)
inline HRESULT IGAMEDIA::IWMPSafeBrowser::loadSpecialPage ( _bstr_t pageName ) {
    HRESULT _hr = raw_loadSpecialPage(pageName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(442)
inline HRESULT IGAMEDIA::IWMPSafeBrowser::goBack ( ) {
    HRESULT _hr = raw_goBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(443)
inline HRESULT IGAMEDIA::IWMPSafeBrowser::goForward ( ) {
    HRESULT _hr = raw_goForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(444)
inline HRESULT IGAMEDIA::IWMPSafeBrowser::stop ( ) {
    HRESULT _hr = raw_stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(445)
inline HRESULT IGAMEDIA::IWMPSafeBrowser::refresh ( ) {
    HRESULT _hr = raw_refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(446)
inline _bstr_t IGAMEDIA::IWMPSafeBrowser::GetbaseURL ( ) {
    BSTR _result;
    HRESULT _hr = get_baseURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(447)
inline _bstr_t IGAMEDIA::IWMPSafeBrowser::GetfullURL ( ) {
    BSTR _result;
    HRESULT _hr = get_fullURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(448)
inline long IGAMEDIA::IWMPSafeBrowser::GetsecureLock ( ) {
    long _result;
    HRESULT _hr = get_secureLock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(449)
inline VARIANT_BOOL IGAMEDIA::IWMPSafeBrowser::Getbusy ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_busy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(450)
inline HRESULT IGAMEDIA::IWMPSafeBrowser::showCert ( ) {
    HRESULT _hr = raw_showCert();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPSyncServices wrapper method implementations
//

#pragma implementation_key(451)
inline long IGAMEDIA::IWMPSyncServices::GetdeviceCount ( ) {
    long _result;
    HRESULT _hr = get_deviceCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(452)
inline IGAMEDIA::IWMPSyncDevicePtr IGAMEDIA::IWMPSyncServices::getDevice ( long lIndex ) {
    struct IWMPSyncDevice * _result;
    HRESULT _hr = raw_getDevice(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPSyncDevicePtr(_result, false);
}

//
// interface IWMPObjectExtendedProps wrapper method implementations
//

#pragma implementation_key(453)
inline _bstr_t IGAMEDIA::IWMPObjectExtendedProps::Getid ( ) {
    BSTR _result;
    HRESULT _hr = get_id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(454)
inline _bstr_t IGAMEDIA::IWMPObjectExtendedProps::GetelementType ( ) {
    BSTR _result;
    HRESULT _hr = get_elementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(455)
inline long IGAMEDIA::IWMPObjectExtendedProps::Getleft ( ) {
    long _result;
    HRESULT _hr = get_left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(456)
inline void IGAMEDIA::IWMPObjectExtendedProps::Putleft ( long pVal ) {
    HRESULT _hr = put_left(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(457)
inline long IGAMEDIA::IWMPObjectExtendedProps::Gettop ( ) {
    long _result;
    HRESULT _hr = get_top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(458)
inline void IGAMEDIA::IWMPObjectExtendedProps::Puttop ( long pVal ) {
    HRESULT _hr = put_top(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(459)
inline long IGAMEDIA::IWMPObjectExtendedProps::Getwidth ( ) {
    long _result;
    HRESULT _hr = get_width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(460)
inline void IGAMEDIA::IWMPObjectExtendedProps::Putwidth ( long pVal ) {
    HRESULT _hr = put_width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(461)
inline long IGAMEDIA::IWMPObjectExtendedProps::Getheight ( ) {
    long _result;
    HRESULT _hr = get_height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(462)
inline void IGAMEDIA::IWMPObjectExtendedProps::Putheight ( long pVal ) {
    HRESULT _hr = put_height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(463)
inline long IGAMEDIA::IWMPObjectExtendedProps::GetzIndex ( ) {
    long _result;
    HRESULT _hr = get_zIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(464)
inline void IGAMEDIA::IWMPObjectExtendedProps::PutzIndex ( long pVal ) {
    HRESULT _hr = put_zIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(465)
inline _bstr_t IGAMEDIA::IWMPObjectExtendedProps::GetclippingImage ( ) {
    BSTR _result;
    HRESULT _hr = get_clippingImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(466)
inline void IGAMEDIA::IWMPObjectExtendedProps::PutclippingImage ( _bstr_t pVal ) {
    HRESULT _hr = put_clippingImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(467)
inline _bstr_t IGAMEDIA::IWMPObjectExtendedProps::GetclippingColor ( ) {
    BSTR _result;
    HRESULT _hr = get_clippingColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(468)
inline void IGAMEDIA::IWMPObjectExtendedProps::PutclippingColor ( _bstr_t pVal ) {
    HRESULT _hr = put_clippingColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(469)
inline VARIANT_BOOL IGAMEDIA::IWMPObjectExtendedProps::Getvisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(470)
inline void IGAMEDIA::IWMPObjectExtendedProps::Putvisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_visible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(471)
inline VARIANT_BOOL IGAMEDIA::IWMPObjectExtendedProps::Getenabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(472)
inline void IGAMEDIA::IWMPObjectExtendedProps::Putenabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_enabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(473)
inline VARIANT_BOOL IGAMEDIA::IWMPObjectExtendedProps::GettabStop ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_tabStop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(474)
inline void IGAMEDIA::IWMPObjectExtendedProps::PuttabStop ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_tabStop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(475)
inline VARIANT_BOOL IGAMEDIA::IWMPObjectExtendedProps::GetpassThrough ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_passThrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(476)
inline void IGAMEDIA::IWMPObjectExtendedProps::PutpassThrough ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_passThrough(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(477)
inline _bstr_t IGAMEDIA::IWMPObjectExtendedProps::GethorizontalAlignment ( ) {
    BSTR _result;
    HRESULT _hr = get_horizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(478)
inline void IGAMEDIA::IWMPObjectExtendedProps::PuthorizontalAlignment ( _bstr_t pVal ) {
    HRESULT _hr = put_horizontalAlignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(479)
inline _bstr_t IGAMEDIA::IWMPObjectExtendedProps::GetverticalAlignment ( ) {
    BSTR _result;
    HRESULT _hr = get_verticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(480)
inline void IGAMEDIA::IWMPObjectExtendedProps::PutverticalAlignment ( _bstr_t pVal ) {
    HRESULT _hr = put_verticalAlignment(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(481)
inline HRESULT IGAMEDIA::IWMPObjectExtendedProps::moveTo ( long newX, long newY, long moveTime ) {
    HRESULT _hr = raw_moveTo(newX, newY, moveTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(482)
inline long IGAMEDIA::IWMPObjectExtendedProps::GetalphaBlend ( ) {
    long _result;
    HRESULT _hr = get_alphaBlend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(483)
inline void IGAMEDIA::IWMPObjectExtendedProps::PutalphaBlend ( long pVal ) {
    HRESULT _hr = put_alphaBlend(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(484)
inline HRESULT IGAMEDIA::IWMPObjectExtendedProps::alphaBlendTo ( long newVal, long alphaTime ) {
    HRESULT _hr = raw_alphaBlendTo(newVal, alphaTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(485)
inline _bstr_t IGAMEDIA::IWMPObjectExtendedProps::GetaccName ( ) {
    BSTR _result;
    HRESULT _hr = get_accName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(486)
inline void IGAMEDIA::IWMPObjectExtendedProps::PutaccName ( _bstr_t pszName ) {
    HRESULT _hr = put_accName(pszName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(487)
inline _bstr_t IGAMEDIA::IWMPObjectExtendedProps::GetaccDescription ( ) {
    BSTR _result;
    HRESULT _hr = get_accDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(488)
inline void IGAMEDIA::IWMPObjectExtendedProps::PutaccDescription ( _bstr_t pszDesc ) {
    HRESULT _hr = put_accDescription(pszDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(489)
inline _bstr_t IGAMEDIA::IWMPObjectExtendedProps::GetaccKeyboardShortcut ( ) {
    BSTR _result;
    HRESULT _hr = get_accKeyboardShortcut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(490)
inline void IGAMEDIA::IWMPObjectExtendedProps::PutaccKeyboardShortcut ( _bstr_t pszShortcut ) {
    HRESULT _hr = put_accKeyboardShortcut(pszShortcut);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPLayoutSubView wrapper method implementations
//

#pragma implementation_key(491)
inline _bstr_t IGAMEDIA::IWMPLayoutSubView::GettransparencyColor ( ) {
    BSTR _result;
    HRESULT _hr = get_transparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(492)
inline void IGAMEDIA::IWMPLayoutSubView::PuttransparencyColor ( _bstr_t pVal ) {
    HRESULT _hr = put_transparencyColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(493)
inline _bstr_t IGAMEDIA::IWMPLayoutSubView::GetbackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(494)
inline void IGAMEDIA::IWMPLayoutSubView::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(495)
inline _bstr_t IGAMEDIA::IWMPLayoutSubView::GetbackgroundImage ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(496)
inline void IGAMEDIA::IWMPLayoutSubView::PutbackgroundImage ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(497)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSubView::GetbackgroundTiled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_backgroundTiled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(498)
inline void IGAMEDIA::IWMPLayoutSubView::PutbackgroundTiled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_backgroundTiled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(499)
inline float IGAMEDIA::IWMPLayoutSubView::GetbackgroundImageHueShift ( ) {
    float _result;
    HRESULT _hr = get_backgroundImageHueShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(500)
inline void IGAMEDIA::IWMPLayoutSubView::PutbackgroundImageHueShift ( float pVal ) {
    HRESULT _hr = put_backgroundImageHueShift(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(501)
inline float IGAMEDIA::IWMPLayoutSubView::GetbackgroundImageSaturation ( ) {
    float _result;
    HRESULT _hr = get_backgroundImageSaturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(502)
inline void IGAMEDIA::IWMPLayoutSubView::PutbackgroundImageSaturation ( float pVal ) {
    HRESULT _hr = put_backgroundImageSaturation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(503)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSubView::GetresizeBackgroundImage ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_resizeBackgroundImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(504)
inline void IGAMEDIA::IWMPLayoutSubView::PutresizeBackgroundImage ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_resizeBackgroundImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPLayoutView wrapper method implementations
//

#pragma implementation_key(505)
inline _bstr_t IGAMEDIA::IWMPLayoutView::Gettitle ( ) {
    BSTR _result;
    HRESULT _hr = get_title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(506)
inline void IGAMEDIA::IWMPLayoutView::Puttitle ( _bstr_t pVal ) {
    HRESULT _hr = put_title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(507)
inline _bstr_t IGAMEDIA::IWMPLayoutView::Getcategory ( ) {
    BSTR _result;
    HRESULT _hr = get_category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(508)
inline void IGAMEDIA::IWMPLayoutView::Putcategory ( _bstr_t pVal ) {
    HRESULT _hr = put_category(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(509)
inline _bstr_t IGAMEDIA::IWMPLayoutView::GetfocusObjectID ( ) {
    BSTR _result;
    HRESULT _hr = get_focusObjectID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(510)
inline void IGAMEDIA::IWMPLayoutView::PutfocusObjectID ( _bstr_t pVal ) {
    HRESULT _hr = put_focusObjectID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(511)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutView::GettitleBar ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_titleBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(512)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutView::Getresizable ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_resizable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(513)
inline long IGAMEDIA::IWMPLayoutView::GettimerInterval ( ) {
    long _result;
    HRESULT _hr = get_timerInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(514)
inline void IGAMEDIA::IWMPLayoutView::PuttimerInterval ( long pVal ) {
    HRESULT _hr = put_timerInterval(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(515)
inline long IGAMEDIA::IWMPLayoutView::GetminWidth ( ) {
    long _result;
    HRESULT _hr = get_minWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(516)
inline void IGAMEDIA::IWMPLayoutView::PutminWidth ( long pVal ) {
    HRESULT _hr = put_minWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(517)
inline long IGAMEDIA::IWMPLayoutView::GetmaxWidth ( ) {
    long _result;
    HRESULT _hr = get_maxWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(518)
inline void IGAMEDIA::IWMPLayoutView::PutmaxWidth ( long pVal ) {
    HRESULT _hr = put_maxWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(519)
inline long IGAMEDIA::IWMPLayoutView::GetminHeight ( ) {
    long _result;
    HRESULT _hr = get_minHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(520)
inline void IGAMEDIA::IWMPLayoutView::PutminHeight ( long pVal ) {
    HRESULT _hr = put_minHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(521)
inline long IGAMEDIA::IWMPLayoutView::GetmaxHeight ( ) {
    long _result;
    HRESULT _hr = get_maxHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(522)
inline void IGAMEDIA::IWMPLayoutView::PutmaxHeight ( long pVal ) {
    HRESULT _hr = put_maxHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(523)
inline HRESULT IGAMEDIA::IWMPLayoutView::close ( ) {
    HRESULT _hr = raw_close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(524)
inline HRESULT IGAMEDIA::IWMPLayoutView::minimize ( ) {
    HRESULT _hr = raw_minimize();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(525)
inline HRESULT IGAMEDIA::IWMPLayoutView::maximize ( ) {
    HRESULT _hr = raw_maximize();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(526)
inline HRESULT IGAMEDIA::IWMPLayoutView::restore ( ) {
    HRESULT _hr = raw_restore();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(527)
inline HRESULT IGAMEDIA::IWMPLayoutView::size ( _bstr_t bstrDirection ) {
    HRESULT _hr = raw_size(bstrDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(528)
inline HRESULT IGAMEDIA::IWMPLayoutView::returnToMediaCenter ( ) {
    HRESULT _hr = raw_returnToMediaCenter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(529)
inline HRESULT IGAMEDIA::IWMPLayoutView::updateWindow ( ) {
    HRESULT _hr = raw_updateWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPEventObject wrapper method implementations
//

#pragma implementation_key(530)
inline IDispatchPtr IGAMEDIA::IWMPEventObject::GetsrcElement ( ) {
    IDispatch * _result;
    HRESULT _hr = get_srcElement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(531)
inline VARIANT_BOOL IGAMEDIA::IWMPEventObject::GetaltKey ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_altKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(532)
inline VARIANT_BOOL IGAMEDIA::IWMPEventObject::GetctrlKey ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ctrlKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(533)
inline VARIANT_BOOL IGAMEDIA::IWMPEventObject::GetshiftKey ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_shiftKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(534)
inline IDispatchPtr IGAMEDIA::IWMPEventObject::GetfromElement ( ) {
    IDispatch * _result;
    HRESULT _hr = get_fromElement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(535)
inline IDispatchPtr IGAMEDIA::IWMPEventObject::GettoElement ( ) {
    IDispatch * _result;
    HRESULT _hr = get_toElement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(536)
inline void IGAMEDIA::IWMPEventObject::PutkeyCode ( long p ) {
    HRESULT _hr = put_keyCode(p);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(537)
inline long IGAMEDIA::IWMPEventObject::GetkeyCode ( ) {
    long _result;
    HRESULT _hr = get_keyCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(538)
inline long IGAMEDIA::IWMPEventObject::Getbutton ( ) {
    long _result;
    HRESULT _hr = get_button(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(539)
inline long IGAMEDIA::IWMPEventObject::Getx ( ) {
    long _result;
    HRESULT _hr = get_x(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(540)
inline long IGAMEDIA::IWMPEventObject::Gety ( ) {
    long _result;
    HRESULT _hr = get_y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(541)
inline long IGAMEDIA::IWMPEventObject::GetclientX ( ) {
    long _result;
    HRESULT _hr = get_clientX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(542)
inline long IGAMEDIA::IWMPEventObject::GetclientY ( ) {
    long _result;
    HRESULT _hr = get_clientY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(543)
inline long IGAMEDIA::IWMPEventObject::GetoffsetX ( ) {
    long _result;
    HRESULT _hr = get_offsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(544)
inline long IGAMEDIA::IWMPEventObject::GetoffsetY ( ) {
    long _result;
    HRESULT _hr = get_offsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(545)
inline long IGAMEDIA::IWMPEventObject::GetscreenX ( ) {
    long _result;
    HRESULT _hr = get_screenX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(546)
inline long IGAMEDIA::IWMPEventObject::GetscreenY ( ) {
    long _result;
    HRESULT _hr = get_screenY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(547)
inline long IGAMEDIA::IWMPEventObject::GetscreenWidth ( ) {
    long _result;
    HRESULT _hr = get_screenWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(548)
inline long IGAMEDIA::IWMPEventObject::GetscreenHeight ( ) {
    long _result;
    HRESULT _hr = get_screenHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPTheme wrapper method implementations
//

#pragma implementation_key(549)
inline _bstr_t IGAMEDIA::IWMPTheme::Gettitle ( ) {
    BSTR _result;
    HRESULT _hr = get_title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(550)
inline float IGAMEDIA::IWMPTheme::Getversion ( ) {
    float _result;
    HRESULT _hr = get_version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(551)
inline _bstr_t IGAMEDIA::IWMPTheme::GetauthorVersion ( ) {
    BSTR _result;
    HRESULT _hr = get_authorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(552)
inline _bstr_t IGAMEDIA::IWMPTheme::Getauthor ( ) {
    BSTR _result;
    HRESULT _hr = get_author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(553)
inline _bstr_t IGAMEDIA::IWMPTheme::Getcopyright ( ) {
    BSTR _result;
    HRESULT _hr = get_copyright(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(554)
inline _bstr_t IGAMEDIA::IWMPTheme::GetcurrentViewID ( ) {
    BSTR _result;
    HRESULT _hr = get_currentViewID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(555)
inline void IGAMEDIA::IWMPTheme::PutcurrentViewID ( _bstr_t pVal ) {
    HRESULT _hr = put_currentViewID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(556)
inline HRESULT IGAMEDIA::IWMPTheme::showErrorDialog ( ) {
    HRESULT _hr = raw_showErrorDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(557)
inline HRESULT IGAMEDIA::IWMPTheme::logString ( _bstr_t stringVal ) {
    HRESULT _hr = raw_logString(stringVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(558)
inline HRESULT IGAMEDIA::IWMPTheme::openView ( _bstr_t viewID ) {
    HRESULT _hr = raw_openView(viewID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(559)
inline HRESULT IGAMEDIA::IWMPTheme::openViewRelative ( _bstr_t viewID, long x, long y ) {
    HRESULT _hr = raw_openViewRelative(viewID, x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(560)
inline HRESULT IGAMEDIA::IWMPTheme::closeView ( _bstr_t viewID ) {
    HRESULT _hr = raw_closeView(viewID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(561)
inline _bstr_t IGAMEDIA::IWMPTheme::openDialog ( _bstr_t dialogType, _bstr_t parameters ) {
    BSTR _result;
    HRESULT _hr = raw_openDialog(dialogType, parameters, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(562)
inline _bstr_t IGAMEDIA::IWMPTheme::loadString ( _bstr_t bstrString ) {
    BSTR _result;
    HRESULT _hr = raw_loadString(bstrString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(563)
inline _bstr_t IGAMEDIA::IWMPTheme::loadPreference ( _bstr_t bstrName ) {
    BSTR _result;
    HRESULT _hr = raw_loadPreference(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(564)
inline HRESULT IGAMEDIA::IWMPTheme::savePreference ( _bstr_t bstrName, _bstr_t bstrValue ) {
    HRESULT _hr = raw_savePreference(bstrName, bstrValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(565)
inline HRESULT IGAMEDIA::IWMPTheme::playSound ( _bstr_t bstrFilename ) {
    HRESULT _hr = raw_playSound(bstrFilename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPLayoutSettingsDispatch wrapper method implementations
//

#pragma implementation_key(566)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GeteffectType ( ) {
    BSTR _result;
    HRESULT _hr = get_effectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(567)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PuteffectType ( _bstr_t pVal ) {
    HRESULT _hr = put_effectType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(568)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GeteffectPreset ( ) {
    long _result;
    HRESULT _hr = get_effectPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(569)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PuteffectPreset ( long pVal ) {
    HRESULT _hr = put_effectPreset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(570)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetsettingsView ( ) {
    BSTR _result;
    HRESULT _hr = get_settingsView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(571)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutsettingsView ( _bstr_t pVal ) {
    HRESULT _hr = put_settingsView(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(572)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetvideoZoom ( ) {
    long _result;
    HRESULT _hr = get_videoZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(573)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutvideoZoom ( long pVal ) {
    HRESULT _hr = put_videoZoom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(574)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetvideoShrinkToFit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_videoShrinkToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(575)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutvideoShrinkToFit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_videoShrinkToFit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(576)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetvideoStretchToFit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_videoStretchToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(577)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutvideoStretchToFit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_videoStretchToFit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(578)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetuserVideoStretchToFit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_userVideoStretchToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(579)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutuserVideoStretchToFit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_userVideoStretchToFit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(580)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetshowCaptions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_showCaptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(581)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutshowCaptions ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showCaptions(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(582)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetshowTitles ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_showTitles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(583)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutshowTitles ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showTitles(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(584)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetshowEffects ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_showEffects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(585)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutshowEffects ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showEffects(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(586)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetshowFullScreenPlaylist ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_showFullScreenPlaylist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(587)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutshowFullScreenPlaylist ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showFullScreenPlaylist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(588)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetcontrastMode ( ) {
    BSTR _result;
    HRESULT _hr = get_contrastMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(589)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::getNamedString ( _bstr_t bstrName ) {
    BSTR _result;
    HRESULT _hr = raw_getNamedString(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(590)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::getDurationStringFromSeconds ( long lDurationVal ) {
    BSTR _result;
    HRESULT _hr = raw_getDurationStringFromSeconds(lDurationVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(591)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetdisplayView ( ) {
    BSTR _result;
    HRESULT _hr = get_displayView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(592)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutdisplayView ( _bstr_t pVal ) {
    HRESULT _hr = put_displayView(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(593)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetmetadataView ( ) {
    BSTR _result;
    HRESULT _hr = get_metadataView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(594)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutmetadataView ( _bstr_t pVal ) {
    HRESULT _hr = put_metadataView(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(595)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetshowSettings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_showSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(596)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutshowSettings ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showSettings(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(597)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetshowResizeBars ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_showResizeBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(598)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutshowResizeBars ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showResizeBars(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(599)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetshowPlaylist ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_showPlaylist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(600)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutshowPlaylist ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showPlaylist(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(601)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetshowMetadata ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_showMetadata(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(602)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutshowMetadata ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showMetadata(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(603)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetsettingsWidth ( ) {
    long _result;
    HRESULT _hr = get_settingsWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(604)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutsettingsWidth ( long pVal ) {
    HRESULT _hr = put_settingsWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(605)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetsettingsHeight ( ) {
    long _result;
    HRESULT _hr = get_settingsHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(606)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutsettingsHeight ( long pVal ) {
    HRESULT _hr = put_settingsHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(607)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetplaylistWidth ( ) {
    long _result;
    HRESULT _hr = get_playlistWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(608)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutplaylistWidth ( long pVal ) {
    HRESULT _hr = put_playlistWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(609)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetplaylistHeight ( ) {
    long _result;
    HRESULT _hr = get_playlistHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(610)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutplaylistHeight ( long pVal ) {
    HRESULT _hr = put_playlistHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(611)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetmetadataWidth ( ) {
    long _result;
    HRESULT _hr = get_metadataWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(612)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutmetadataWidth ( long pVal ) {
    HRESULT _hr = put_metadataWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(613)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetmetadataHeight ( ) {
    long _result;
    HRESULT _hr = get_metadataHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(614)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutmetadataHeight ( long pVal ) {
    HRESULT _hr = put_metadataHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(615)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetfullScreenAvailable ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_fullScreenAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(616)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutfullScreenAvailable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_fullScreenAvailable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(617)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetfullScreenRequest ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_fullScreenRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(618)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutfullScreenRequest ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_fullScreenRequest(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(619)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetquickHide ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_quickHide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(620)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutquickHide ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_quickHide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(621)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetdisplayPreset ( ) {
    long _result;
    HRESULT _hr = get_displayPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(622)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutdisplayPreset ( long pVal ) {
    HRESULT _hr = put_displayPreset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(623)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetsettingsPreset ( ) {
    long _result;
    HRESULT _hr = get_settingsPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(624)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutsettingsPreset ( long pVal ) {
    HRESULT _hr = put_settingsPreset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(625)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetmetadataPreset ( ) {
    long _result;
    HRESULT _hr = get_metadataPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(626)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutmetadataPreset ( long pVal ) {
    HRESULT _hr = put_metadataPreset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(627)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetuserDisplayView ( ) {
    BSTR _result;
    HRESULT _hr = get_userDisplayView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(628)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetuserWMPDisplayView ( ) {
    BSTR _result;
    HRESULT _hr = get_userWMPDisplayView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(629)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetuserDisplayPreset ( ) {
    long _result;
    HRESULT _hr = get_userDisplayPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(630)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetuserWMPDisplayPreset ( ) {
    long _result;
    HRESULT _hr = get_userWMPDisplayPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(631)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetdynamicRangeControl ( ) {
    long _result;
    HRESULT _hr = get_dynamicRangeControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(632)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutdynamicRangeControl ( long pVal ) {
    HRESULT _hr = put_dynamicRangeControl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(633)
inline float IGAMEDIA::IWMPLayoutSettingsDispatch::GetslowRate ( ) {
    float _result;
    HRESULT _hr = get_slowRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(634)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutslowRate ( float pVal ) {
    HRESULT _hr = put_slowRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(635)
inline float IGAMEDIA::IWMPLayoutSettingsDispatch::GetfastRate ( ) {
    float _result;
    HRESULT _hr = get_fastRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(636)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutfastRate ( float pVal ) {
    HRESULT _hr = put_fastRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(637)
inline float IGAMEDIA::IWMPLayoutSettingsDispatch::GetbuttonHueShift ( ) {
    float _result;
    HRESULT _hr = get_buttonHueShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(638)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutbuttonHueShift ( float pVal ) {
    HRESULT _hr = put_buttonHueShift(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(639)
inline float IGAMEDIA::IWMPLayoutSettingsDispatch::GetbuttonSaturation ( ) {
    float _result;
    HRESULT _hr = get_buttonSaturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(640)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutbuttonSaturation ( float pVal ) {
    HRESULT _hr = put_buttonSaturation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(641)
inline float IGAMEDIA::IWMPLayoutSettingsDispatch::GetbackHueShift ( ) {
    float _result;
    HRESULT _hr = get_backHueShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(642)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutbackHueShift ( float pVal ) {
    HRESULT _hr = put_backHueShift(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(643)
inline float IGAMEDIA::IWMPLayoutSettingsDispatch::GetbackSaturation ( ) {
    float _result;
    HRESULT _hr = get_backSaturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(644)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutbackSaturation ( float pVal ) {
    HRESULT _hr = put_backSaturation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(645)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetvizRequest ( ) {
    long _result;
    HRESULT _hr = get_vizRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(646)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutvizRequest ( long pVal ) {
    HRESULT _hr = put_vizRequest(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(647)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorLight ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorLight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(648)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorMedium ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorMedium(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(649)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorDark ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorDark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(650)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GettoolbarButtonHighlight ( ) {
    BSTR _result;
    HRESULT _hr = get_toolbarButtonHighlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(651)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GettoolbarButtonShadow ( ) {
    BSTR _result;
    HRESULT _hr = get_toolbarButtonShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(652)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GettoolbarButtonFace ( ) {
    BSTR _result;
    HRESULT _hr = get_toolbarButtonFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(653)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetitemPlayingColor ( ) {
    BSTR _result;
    HRESULT _hr = get_itemPlayingColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(654)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetitemPlayingBackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_itemPlayingBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(655)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetitemErrorColor ( ) {
    BSTR _result;
    HRESULT _hr = get_itemErrorColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(656)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorLimited ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_appColorLimited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(657)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorBlackBackground ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_appColorBlackBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutappColorBlackBackground ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_appColorBlackBackground(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(659)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorVideoBorder ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorVideoBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(660)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutappColorVideoBorder ( _bstr_t pVal ) {
    HRESULT _hr = put_appColorVideoBorder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(661)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux1 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(662)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux2 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(663)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux3 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(664)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux4 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(665)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux5 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(666)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux6 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(667)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux7 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(668)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux8 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux8(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(669)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux9 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux9(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(670)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux10 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(671)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux11 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux11(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(672)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux12 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux12(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(673)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux13 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux13(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(674)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux14 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux14(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(675)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetappColorAux15 ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorAux15(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(676)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::Getstatus ( ) {
    BSTR _result;
    HRESULT _hr = get_status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(677)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::Putstatus ( _bstr_t pVal ) {
    HRESULT _hr = put_status(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(678)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetuserWMPSettingsView ( ) {
    BSTR _result;
    HRESULT _hr = get_userWMPSettingsView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(679)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetuserWMPSettingsPreset ( ) {
    long _result;
    HRESULT _hr = get_userWMPSettingsPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(680)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetuserWMPShowSettings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_userWMPShowSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(681)
inline _bstr_t IGAMEDIA::IWMPLayoutSettingsDispatch::GetuserWMPMetadataView ( ) {
    BSTR _result;
    HRESULT _hr = get_userWMPMetadataView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(682)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetuserWMPMetadataPreset ( ) {
    long _result;
    HRESULT _hr = get_userWMPMetadataPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(683)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetuserWMPShowMetadata ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_userWMPShowMetadata(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(684)
inline long IGAMEDIA::IWMPLayoutSettingsDispatch::GetcaptionsHeight ( ) {
    long _result;
    HRESULT _hr = get_captionsHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(685)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutcaptionsHeight ( long pVal ) {
    HRESULT _hr = put_captionsHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(686)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetsnapToVideo ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_snapToVideo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(687)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutsnapToVideo ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_snapToVideo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(688)
inline VARIANT_BOOL IGAMEDIA::IWMPLayoutSettingsDispatch::GetpinFullScreenControls ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_pinFullScreenControls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(689)
inline void IGAMEDIA::IWMPLayoutSettingsDispatch::PutpinFullScreenControls ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_pinFullScreenControls(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPBrandDispatch wrapper method implementations
//

#pragma implementation_key(690)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetfullServiceName ( ) {
    BSTR _result;
    HRESULT _hr = get_fullServiceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(691)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetfriendlyName ( ) {
    BSTR _result;
    HRESULT _hr = get_friendlyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(692)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetguideButtonText ( ) {
    BSTR _result;
    HRESULT _hr = get_guideButtonText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(693)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetguideButtonTip ( ) {
    BSTR _result;
    HRESULT _hr = get_guideButtonTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(694)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetguideMenuText ( ) {
    BSTR _result;
    HRESULT _hr = get_guideMenuText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(695)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetguideAccText ( ) {
    BSTR _result;
    HRESULT _hr = get_guideAccText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(696)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask1ButtonText ( ) {
    BSTR _result;
    HRESULT _hr = get_task1ButtonText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(697)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask1ButtonTip ( ) {
    BSTR _result;
    HRESULT _hr = get_task1ButtonTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(698)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask1MenuText ( ) {
    BSTR _result;
    HRESULT _hr = get_task1MenuText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(699)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask1AccText ( ) {
    BSTR _result;
    HRESULT _hr = get_task1AccText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(700)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask2ButtonText ( ) {
    BSTR _result;
    HRESULT _hr = get_task2ButtonText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(701)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask2ButtonTip ( ) {
    BSTR _result;
    HRESULT _hr = get_task2ButtonTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(702)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask2MenuText ( ) {
    BSTR _result;
    HRESULT _hr = get_task2MenuText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(703)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask2AccText ( ) {
    BSTR _result;
    HRESULT _hr = get_task2AccText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(704)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask3ButtonText ( ) {
    BSTR _result;
    HRESULT _hr = get_task3ButtonText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(705)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask3ButtonTip ( ) {
    BSTR _result;
    HRESULT _hr = get_task3ButtonTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(706)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask3MenuText ( ) {
    BSTR _result;
    HRESULT _hr = get_task3MenuText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(707)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask3AccText ( ) {
    BSTR _result;
    HRESULT _hr = get_task3AccText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(708)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetguideUrl ( ) {
    BSTR _result;
    HRESULT _hr = get_guideUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(709)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask1Url ( ) {
    BSTR _result;
    HRESULT _hr = get_task1Url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(710)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask2Url ( ) {
    BSTR _result;
    HRESULT _hr = get_task2Url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(711)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::Gettask3Url ( ) {
    BSTR _result;
    HRESULT _hr = get_task3Url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(712)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetimageLargeUrl ( ) {
    BSTR _result;
    HRESULT _hr = get_imageLargeUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(713)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetimageSmallUrl ( ) {
    BSTR _result;
    HRESULT _hr = get_imageSmallUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(714)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetimageMenuUrl ( ) {
    BSTR _result;
    HRESULT _hr = get_imageMenuUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(715)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetinfoCenterUrl ( ) {
    BSTR _result;
    HRESULT _hr = get_infoCenterUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(716)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetalbumInfoUrl ( ) {
    BSTR _result;
    HRESULT _hr = get_albumInfoUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(717)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetbuyCDUrl ( ) {
    BSTR _result;
    HRESULT _hr = get_buyCDUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(718)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GethtmlViewUrl ( ) {
    BSTR _result;
    HRESULT _hr = get_htmlViewUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(719)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetnavigateUrl ( ) {
    BSTR _result;
    HRESULT _hr = get_navigateUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(720)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetcookieUrl ( ) {
    BSTR _result;
    HRESULT _hr = get_cookieUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(721)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetdownloadStatusUrl ( ) {
    BSTR _result;
    HRESULT _hr = get_downloadStatusUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(722)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetcolorPlayer ( ) {
    BSTR _result;
    HRESULT _hr = get_colorPlayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(723)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetcolorPlayerText ( ) {
    BSTR _result;
    HRESULT _hr = get_colorPlayerText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(724)
inline long IGAMEDIA::IWMPBrandDispatch::GetnavigateDispid ( ) {
    long _result;
    HRESULT _hr = get_navigateDispid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(725)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetnavigateParams ( ) {
    BSTR _result;
    HRESULT _hr = get_navigateParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(726)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetnavigatePane ( ) {
    BSTR _result;
    HRESULT _hr = get_navigatePane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(727)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::GetselectedPane ( ) {
    BSTR _result;
    HRESULT _hr = get_selectedPane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(728)
inline void IGAMEDIA::IWMPBrandDispatch::PutselectedPane ( _bstr_t pVal ) {
    HRESULT _hr = put_selectedPane(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(729)
inline HRESULT IGAMEDIA::IWMPBrandDispatch::setNavigateProps ( _bstr_t bstrPane, long lDispid, _bstr_t bstrParams ) {
    HRESULT _hr = raw_setNavigateProps(bstrPane, lDispid, bstrParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(730)
inline _bstr_t IGAMEDIA::IWMPBrandDispatch::getMediaParams ( IUnknown * pObject, _bstr_t bstrURL ) {
    BSTR _result;
    HRESULT _hr = raw_getMediaParams(pObject, bstrURL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(731)
inline void IGAMEDIA::IWMPBrandDispatch::PutselectedTask ( long _arg1 ) {
    HRESULT _hr = put_selectedTask(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPNowPlayingHelperDispatch wrapper method implementations
//

#pragma implementation_key(732)
inline _bstr_t IGAMEDIA::IWMPNowPlayingHelperDispatch::GetviewFriendlyName ( _bstr_t bstrView ) {
    BSTR _result;
    HRESULT _hr = get_viewFriendlyName(bstrView, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(733)
inline long IGAMEDIA::IWMPNowPlayingHelperDispatch::GetviewPresetCount ( _bstr_t bstrView ) {
    long _result;
    HRESULT _hr = get_viewPresetCount(bstrView, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(734)
inline _bstr_t IGAMEDIA::IWMPNowPlayingHelperDispatch::GetviewPresetName ( _bstr_t bstrView, long nPresetIndex ) {
    BSTR _result;
    HRESULT _hr = get_viewPresetName(bstrView, nPresetIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(735)
inline _bstr_t IGAMEDIA::IWMPNowPlayingHelperDispatch::GeteffectFriendlyName ( _bstr_t bstrEffect ) {
    BSTR _result;
    HRESULT _hr = get_effectFriendlyName(bstrEffect, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(736)
inline _bstr_t IGAMEDIA::IWMPNowPlayingHelperDispatch::GeteffectPresetName ( _bstr_t bstrEffect, long nPresetIndex ) {
    BSTR _result;
    HRESULT _hr = get_effectPresetName(bstrEffect, nPresetIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(737)
inline _bstr_t IGAMEDIA::IWMPNowPlayingHelperDispatch::resolveDisplayView ( VARIANT_BOOL fSafe ) {
    BSTR _result;
    HRESULT _hr = raw_resolveDisplayView(fSafe, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(738)
inline VARIANT_BOOL IGAMEDIA::IWMPNowPlayingHelperDispatch::isValidDisplayView ( _bstr_t bstrView ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_isValidDisplayView(bstrView, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(739)
inline _bstr_t IGAMEDIA::IWMPNowPlayingHelperDispatch::getSkinFile ( ) {
    BSTR _result;
    HRESULT _hr = raw_getSkinFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(740)
inline VARIANT_BOOL IGAMEDIA::IWMPNowPlayingHelperDispatch::GetcaptionsAvailable ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_captionsAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(741)
inline long IGAMEDIA::IWMPNowPlayingHelperDispatch::GetlinkAvailable ( ) {
    long _result;
    HRESULT _hr = get_linkAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(742)
inline long IGAMEDIA::IWMPNowPlayingHelperDispatch::GetlinkRequest ( ) {
    long _result;
    HRESULT _hr = get_linkRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(743)
inline void IGAMEDIA::IWMPNowPlayingHelperDispatch::PutlinkRequest ( long pVal ) {
    HRESULT _hr = put_linkRequest(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(744)
inline _bstr_t IGAMEDIA::IWMPNowPlayingHelperDispatch::GetlinkRequestParams ( ) {
    BSTR _result;
    HRESULT _hr = get_linkRequestParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(745)
inline void IGAMEDIA::IWMPNowPlayingHelperDispatch::PutlinkRequestParams ( _bstr_t pVal ) {
    HRESULT _hr = put_linkRequestParams(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(746)
inline VARIANT_BOOL IGAMEDIA::IWMPNowPlayingHelperDispatch::GetisXPOrBetter ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_isXPOrBetter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(747)
inline long IGAMEDIA::IWMPNowPlayingHelperDispatch::getCurrentArtID ( VARIANT_BOOL fLargeArt ) {
    long _result;
    HRESULT _hr = raw_getCurrentArtID(fLargeArt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(748)
inline _bstr_t IGAMEDIA::IWMPNowPlayingHelperDispatch::getTimeString ( double dTime ) {
    BSTR _result;
    HRESULT _hr = raw_getTimeString(dTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(749)
inline _bstr_t IGAMEDIA::IWMPNowPlayingHelperDispatch::getCurrentScriptCommand ( _bstr_t bstrType ) {
    BSTR _result;
    HRESULT _hr = raw_getCurrentScriptCommand(bstrType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(750)
inline HRESULT IGAMEDIA::IWMPNowPlayingHelperDispatch::calcLayout ( long lWidth, long lHeight, VARIANT_BOOL vbCaptions, VARIANT_BOOL vbBanner ) {
    HRESULT _hr = raw_calcLayout(lWidth, lHeight, vbCaptions, vbBanner);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(751)
inline long IGAMEDIA::IWMPNowPlayingHelperDispatch::getLayoutSize ( long nProp ) {
    long _result;
    HRESULT _hr = raw_getLayoutSize(nProp, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(752)
inline IDispatchPtr IGAMEDIA::IWMPNowPlayingHelperDispatch::getRootPlaylist ( IDispatch * pPlaylist ) {
    IDispatch * _result;
    HRESULT _hr = raw_getRootPlaylist(pPlaylist, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(753)
inline _bstr_t IGAMEDIA::IWMPNowPlayingHelperDispatch::getHTMLViewURL ( ) {
    BSTR _result;
    HRESULT _hr = raw_getHTMLViewURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(754)
inline VARIANT_BOOL IGAMEDIA::IWMPNowPlayingHelperDispatch::GetcanSendLink ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_canSendLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(755)
inline HRESULT IGAMEDIA::IWMPNowPlayingHelperDispatch::sendLink ( double dblStartTime, double dblEndTime ) {
    HRESULT _hr = raw_sendLink(dblStartTime, dblEndTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(756)
inline IUnknownPtr IGAMEDIA::IWMPNowPlayingHelperDispatch::GeteditObj ( ) {
    IUnknown * _result;
    HRESULT _hr = get_editObj(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(757)
inline void IGAMEDIA::IWMPNowPlayingHelperDispatch::PuteditObj ( IUnknown * ppVal ) {
    HRESULT _hr = put_editObj(ppVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(758)
inline _bstr_t IGAMEDIA::IWMPNowPlayingHelperDispatch::getStatusString ( _bstr_t bstrCategory ) {
    BSTR _result;
    HRESULT _hr = raw_getStatusString(bstrCategory, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(759)
inline _bstr_t IGAMEDIA::IWMPNowPlayingHelperDispatch::GetnotificationString ( ) {
    BSTR _result;
    HRESULT _hr = get_notificationString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(760)
inline _bstr_t IGAMEDIA::IWMPNowPlayingHelperDispatch::GethtmlViewBaseURL ( ) {
    BSTR _result;
    HRESULT _hr = get_htmlViewBaseURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(761)
inline void IGAMEDIA::IWMPNowPlayingHelperDispatch::PuthtmlViewBaseURL ( _bstr_t pVal ) {
    HRESULT _hr = put_htmlViewBaseURL(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(762)
inline _bstr_t IGAMEDIA::IWMPNowPlayingHelperDispatch::GethtmlViewFullURL ( ) {
    BSTR _result;
    HRESULT _hr = get_htmlViewFullURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(763)
inline void IGAMEDIA::IWMPNowPlayingHelperDispatch::PuthtmlViewFullURL ( _bstr_t pVal ) {
    HRESULT _hr = put_htmlViewFullURL(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(764)
inline long IGAMEDIA::IWMPNowPlayingHelperDispatch::GethtmlViewSecureLock ( ) {
    long _result;
    HRESULT _hr = get_htmlViewSecureLock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(765)
inline void IGAMEDIA::IWMPNowPlayingHelperDispatch::PuthtmlViewSecureLock ( long pVal ) {
    HRESULT _hr = put_htmlViewSecureLock(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(766)
inline VARIANT_BOOL IGAMEDIA::IWMPNowPlayingHelperDispatch::GethtmlViewBusy ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_htmlViewBusy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(767)
inline void IGAMEDIA::IWMPNowPlayingHelperDispatch::PuthtmlViewBusy ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_htmlViewBusy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(768)
inline VARIANT_BOOL IGAMEDIA::IWMPNowPlayingHelperDispatch::GethtmlViewShowCert ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_htmlViewShowCert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(769)
inline void IGAMEDIA::IWMPNowPlayingHelperDispatch::PuthtmlViewShowCert ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_htmlViewShowCert(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(770)
inline VARIANT_BOOL IGAMEDIA::IWMPNowPlayingHelperDispatch::GetpreviousEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_previousEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(771)
inline void IGAMEDIA::IWMPNowPlayingHelperDispatch::PutpreviousEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_previousEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(772)
inline VARIANT_BOOL IGAMEDIA::IWMPNowPlayingHelperDispatch::GetdoPreviousNow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_doPreviousNow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(773)
inline void IGAMEDIA::IWMPNowPlayingHelperDispatch::PutdoPreviousNow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_doPreviousNow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(774)
inline long IGAMEDIA::IWMPNowPlayingHelperDispatch::GetDPI ( ) {
    long _result;
    HRESULT _hr = get_DPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(775)
inline HRESULT IGAMEDIA::IWMPNowPlayingHelperDispatch::clearColors ( ) {
    HRESULT _hr = raw_clearColors();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface IWMPButtonCtrlEvents wrapper method implementations
//

#pragma implementation_key(776)
inline HRESULT IGAMEDIA::IWMPButtonCtrlEvents::onclick ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x1400, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface IWMPButtonCtrl wrapper method implementations
//

#pragma implementation_key(777)
inline _bstr_t IGAMEDIA::IWMPButtonCtrl::Getimage ( ) {
    BSTR _result;
    HRESULT _hr = get_image(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(778)
inline void IGAMEDIA::IWMPButtonCtrl::Putimage ( _bstr_t pVal ) {
    HRESULT _hr = put_image(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(779)
inline _bstr_t IGAMEDIA::IWMPButtonCtrl::GethoverImage ( ) {
    BSTR _result;
    HRESULT _hr = get_hoverImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(780)
inline void IGAMEDIA::IWMPButtonCtrl::PuthoverImage ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(781)
inline _bstr_t IGAMEDIA::IWMPButtonCtrl::GetdownImage ( ) {
    BSTR _result;
    HRESULT _hr = get_downImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(782)
inline void IGAMEDIA::IWMPButtonCtrl::PutdownImage ( _bstr_t pVal ) {
    HRESULT _hr = put_downImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(783)
inline _bstr_t IGAMEDIA::IWMPButtonCtrl::GetdisabledImage ( ) {
    BSTR _result;
    HRESULT _hr = get_disabledImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(784)
inline void IGAMEDIA::IWMPButtonCtrl::PutdisabledImage ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(785)
inline _bstr_t IGAMEDIA::IWMPButtonCtrl::GethoverDownImage ( ) {
    BSTR _result;
    HRESULT _hr = get_hoverDownImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(786)
inline void IGAMEDIA::IWMPButtonCtrl::PuthoverDownImage ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverDownImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(787)
inline VARIANT_BOOL IGAMEDIA::IWMPButtonCtrl::Gettiled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_tiled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(788)
inline void IGAMEDIA::IWMPButtonCtrl::Puttiled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_tiled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(789)
inline _bstr_t IGAMEDIA::IWMPButtonCtrl::GettransparencyColor ( ) {
    BSTR _result;
    HRESULT _hr = get_transparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(790)
inline void IGAMEDIA::IWMPButtonCtrl::PuttransparencyColor ( _bstr_t pVal ) {
    HRESULT _hr = put_transparencyColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(791)
inline VARIANT_BOOL IGAMEDIA::IWMPButtonCtrl::Getdown ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_down(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(792)
inline void IGAMEDIA::IWMPButtonCtrl::Putdown ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_down(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(793)
inline VARIANT_BOOL IGAMEDIA::IWMPButtonCtrl::Getsticky ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_sticky(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(794)
inline void IGAMEDIA::IWMPButtonCtrl::Putsticky ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_sticky(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(795)
inline _bstr_t IGAMEDIA::IWMPButtonCtrl::GetupToolTip ( ) {
    BSTR _result;
    HRESULT _hr = get_upToolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(796)
inline void IGAMEDIA::IWMPButtonCtrl::PutupToolTip ( _bstr_t pVal ) {
    HRESULT _hr = put_upToolTip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(797)
inline _bstr_t IGAMEDIA::IWMPButtonCtrl::GetdownToolTip ( ) {
    BSTR _result;
    HRESULT _hr = get_downToolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(798)
inline void IGAMEDIA::IWMPButtonCtrl::PutdownToolTip ( _bstr_t pVal ) {
    HRESULT _hr = put_downToolTip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(799)
inline _bstr_t IGAMEDIA::IWMPButtonCtrl::Getcursor ( ) {
    BSTR _result;
    HRESULT _hr = get_cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(800)
inline void IGAMEDIA::IWMPButtonCtrl::Putcursor ( _bstr_t pVal ) {
    HRESULT _hr = put_cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPListBoxCtrl wrapper method implementations
//

#pragma implementation_key(801)
inline long IGAMEDIA::IWMPListBoxCtrl::GetselectedItem ( ) {
    long _result;
    HRESULT _hr = get_selectedItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(802)
inline void IGAMEDIA::IWMPListBoxCtrl::PutselectedItem ( long pnPos ) {
    HRESULT _hr = put_selectedItem(pnPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(803)
inline VARIANT_BOOL IGAMEDIA::IWMPListBoxCtrl::Getsorted ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_sorted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(804)
inline void IGAMEDIA::IWMPListBoxCtrl::Putsorted ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_sorted(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(805)
inline VARIANT_BOOL IGAMEDIA::IWMPListBoxCtrl::Getmultiselect ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_multiselect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(806)
inline void IGAMEDIA::IWMPListBoxCtrl::Putmultiselect ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_multiselect(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(807)
inline VARIANT_BOOL IGAMEDIA::IWMPListBoxCtrl::GetreadOnly ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_readOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(808)
inline void IGAMEDIA::IWMPListBoxCtrl::PutreadOnly ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_readOnly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(809)
inline _bstr_t IGAMEDIA::IWMPListBoxCtrl::GetforegroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_foregroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(810)
inline void IGAMEDIA::IWMPListBoxCtrl::PutforegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(811)
inline _bstr_t IGAMEDIA::IWMPListBoxCtrl::GetbackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(812)
inline void IGAMEDIA::IWMPListBoxCtrl::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(813)
inline long IGAMEDIA::IWMPListBoxCtrl::GetfontSize ( ) {
    long _result;
    HRESULT _hr = get_fontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(814)
inline void IGAMEDIA::IWMPListBoxCtrl::PutfontSize ( long pVal ) {
    HRESULT _hr = put_fontSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(815)
inline _bstr_t IGAMEDIA::IWMPListBoxCtrl::GetfontStyle ( ) {
    BSTR _result;
    HRESULT _hr = get_fontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(816)
inline void IGAMEDIA::IWMPListBoxCtrl::PutfontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_fontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(817)
inline _bstr_t IGAMEDIA::IWMPListBoxCtrl::GetfontFace ( ) {
    BSTR _result;
    HRESULT _hr = get_fontFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(818)
inline void IGAMEDIA::IWMPListBoxCtrl::PutfontFace ( _bstr_t pVal ) {
    HRESULT _hr = put_fontFace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(819)
inline long IGAMEDIA::IWMPListBoxCtrl::GetitemCount ( ) {
    long _result;
    HRESULT _hr = get_itemCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(820)
inline long IGAMEDIA::IWMPListBoxCtrl::GetfirstVisibleItem ( ) {
    long _result;
    HRESULT _hr = get_firstVisibleItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(821)
inline void IGAMEDIA::IWMPListBoxCtrl::PutfirstVisibleItem ( long pVal ) {
    HRESULT _hr = put_firstVisibleItem(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(822)
inline void IGAMEDIA::IWMPListBoxCtrl::PutpopUp ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_popUp(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(823)
inline long IGAMEDIA::IWMPListBoxCtrl::GetfocusItem ( ) {
    long _result;
    HRESULT _hr = get_focusItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(824)
inline void IGAMEDIA::IWMPListBoxCtrl::PutfocusItem ( long pVal ) {
    HRESULT _hr = put_focusItem(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(825)
inline VARIANT_BOOL IGAMEDIA::IWMPListBoxCtrl::Getborder ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(826)
inline void IGAMEDIA::IWMPListBoxCtrl::Putborder ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_border(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(827)
inline _bstr_t IGAMEDIA::IWMPListBoxCtrl::getItem ( long nPos ) {
    BSTR _result;
    HRESULT _hr = raw_getItem(nPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(828)
inline HRESULT IGAMEDIA::IWMPListBoxCtrl::insertItem ( long nPos, _bstr_t newVal ) {
    HRESULT _hr = raw_insertItem(nPos, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(829)
inline HRESULT IGAMEDIA::IWMPListBoxCtrl::appendItem ( _bstr_t newVal ) {
    HRESULT _hr = raw_appendItem(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(830)
inline HRESULT IGAMEDIA::IWMPListBoxCtrl::replaceItem ( long nPos, _bstr_t newVal ) {
    HRESULT _hr = raw_replaceItem(nPos, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(831)
inline HRESULT IGAMEDIA::IWMPListBoxCtrl::deleteItem ( long nPos ) {
    HRESULT _hr = raw_deleteItem(nPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(832)
inline HRESULT IGAMEDIA::IWMPListBoxCtrl::deleteAll ( ) {
    HRESULT _hr = raw_deleteAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(833)
inline long IGAMEDIA::IWMPListBoxCtrl::findItem ( long nStartIndex, _bstr_t newVal ) {
    long _result;
    HRESULT _hr = raw_findItem(nStartIndex, newVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(834)
inline long IGAMEDIA::IWMPListBoxCtrl::getNextSelectedItem ( long nStartIndex ) {
    long _result;
    HRESULT _hr = raw_getNextSelectedItem(nStartIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(835)
inline HRESULT IGAMEDIA::IWMPListBoxCtrl::setSelectedState ( long nPos, VARIANT_BOOL vbSelected ) {
    HRESULT _hr = raw_setSelectedState(nPos, vbSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(836)
inline HRESULT IGAMEDIA::IWMPListBoxCtrl::show ( ) {
    HRESULT _hr = raw_show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(837)
inline HRESULT IGAMEDIA::IWMPListBoxCtrl::dismiss ( ) {
    HRESULT _hr = raw_dismiss();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPListBoxItem wrapper method implementations
//

#pragma implementation_key(838)
inline void IGAMEDIA::IWMPListBoxItem::Putvalue ( _bstr_t _arg1 ) {
    HRESULT _hr = put_value(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPPlaylistCtrlColumn wrapper method implementations
//

#pragma implementation_key(839)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrlColumn::GetcolumnName ( ) {
    BSTR _result;
    HRESULT _hr = get_columnName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(840)
inline void IGAMEDIA::IWMPPlaylistCtrlColumn::PutcolumnName ( _bstr_t pVal ) {
    HRESULT _hr = put_columnName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(841)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrlColumn::GetcolumnID ( ) {
    BSTR _result;
    HRESULT _hr = get_columnID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(842)
inline void IGAMEDIA::IWMPPlaylistCtrlColumn::PutcolumnID ( _bstr_t pVal ) {
    HRESULT _hr = put_columnID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(843)
inline _bstr_t IGAMEDIA::IWMPPlaylistCtrlColumn::GetcolumnResizeMode ( ) {
    BSTR _result;
    HRESULT _hr = get_columnResizeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(844)
inline void IGAMEDIA::IWMPPlaylistCtrlColumn::PutcolumnResizeMode ( _bstr_t pVal ) {
    HRESULT _hr = put_columnResizeMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(845)
inline long IGAMEDIA::IWMPPlaylistCtrlColumn::GetcolumnWidth ( ) {
    long _result;
    HRESULT _hr = get_columnWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(846)
inline void IGAMEDIA::IWMPPlaylistCtrlColumn::PutcolumnWidth ( long pVal ) {
    HRESULT _hr = put_columnWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface IWMPSliderCtrlEvents wrapper method implementations
//

#pragma implementation_key(847)
inline HRESULT IGAMEDIA::IWMPSliderCtrlEvents::ondragbegin ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x1536, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(848)
inline HRESULT IGAMEDIA::IWMPSliderCtrlEvents::ondragend ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x1537, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(849)
inline HRESULT IGAMEDIA::IWMPSliderCtrlEvents::onpositionchange ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x1538, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface IWMPSliderCtrl wrapper method implementations
//

#pragma implementation_key(850)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::Getdirection ( ) {
    BSTR _result;
    HRESULT _hr = get_direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(851)
inline void IGAMEDIA::IWMPSliderCtrl::Putdirection ( _bstr_t pVal ) {
    HRESULT _hr = put_direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(852)
inline VARIANT_BOOL IGAMEDIA::IWMPSliderCtrl::Getslide ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_slide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(853)
inline void IGAMEDIA::IWMPSliderCtrl::Putslide ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_slide(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(854)
inline VARIANT_BOOL IGAMEDIA::IWMPSliderCtrl::Gettiled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_tiled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(855)
inline void IGAMEDIA::IWMPSliderCtrl::Puttiled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_tiled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(856)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GetforegroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_foregroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(857)
inline void IGAMEDIA::IWMPSliderCtrl::PutforegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(858)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GetforegroundEndColor ( ) {
    BSTR _result;
    HRESULT _hr = get_foregroundEndColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(859)
inline void IGAMEDIA::IWMPSliderCtrl::PutforegroundEndColor ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundEndColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(860)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GetbackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(861)
inline void IGAMEDIA::IWMPSliderCtrl::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(862)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GetbackgroundEndColor ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundEndColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(863)
inline void IGAMEDIA::IWMPSliderCtrl::PutbackgroundEndColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundEndColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(864)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GetdisabledColor ( ) {
    BSTR _result;
    HRESULT _hr = get_disabledColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(865)
inline void IGAMEDIA::IWMPSliderCtrl::PutdisabledColor ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(866)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GettransparencyColor ( ) {
    BSTR _result;
    HRESULT _hr = get_transparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(867)
inline void IGAMEDIA::IWMPSliderCtrl::PuttransparencyColor ( _bstr_t pVal ) {
    HRESULT _hr = put_transparencyColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(868)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GetforegroundImage ( ) {
    BSTR _result;
    HRESULT _hr = get_foregroundImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(869)
inline void IGAMEDIA::IWMPSliderCtrl::PutforegroundImage ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(870)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GetbackgroundImage ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(871)
inline void IGAMEDIA::IWMPSliderCtrl::PutbackgroundImage ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(872)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GetbackgroundHoverImage ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundHoverImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(873)
inline void IGAMEDIA::IWMPSliderCtrl::PutbackgroundHoverImage ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundHoverImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(874)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GetdisabledImage ( ) {
    BSTR _result;
    HRESULT _hr = get_disabledImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(875)
inline void IGAMEDIA::IWMPSliderCtrl::PutdisabledImage ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(876)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GetthumbImage ( ) {
    BSTR _result;
    HRESULT _hr = get_thumbImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(877)
inline void IGAMEDIA::IWMPSliderCtrl::PutthumbImage ( _bstr_t pVal ) {
    HRESULT _hr = put_thumbImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(878)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GetthumbHoverImage ( ) {
    BSTR _result;
    HRESULT _hr = get_thumbHoverImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(879)
inline void IGAMEDIA::IWMPSliderCtrl::PutthumbHoverImage ( _bstr_t pVal ) {
    HRESULT _hr = put_thumbHoverImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(880)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GetthumbDownImage ( ) {
    BSTR _result;
    HRESULT _hr = get_thumbDownImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(881)
inline void IGAMEDIA::IWMPSliderCtrl::PutthumbDownImage ( _bstr_t pVal ) {
    HRESULT _hr = put_thumbDownImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(882)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GetthumbDisabledImage ( ) {
    BSTR _result;
    HRESULT _hr = get_thumbDisabledImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(883)
inline void IGAMEDIA::IWMPSliderCtrl::PutthumbDisabledImage ( _bstr_t pVal ) {
    HRESULT _hr = put_thumbDisabledImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(884)
inline float IGAMEDIA::IWMPSliderCtrl::Getmin ( ) {
    float _result;
    HRESULT _hr = get_min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(885)
inline void IGAMEDIA::IWMPSliderCtrl::Putmin ( float pVal ) {
    HRESULT _hr = put_min(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(886)
inline float IGAMEDIA::IWMPSliderCtrl::Getmax ( ) {
    float _result;
    HRESULT _hr = get_max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(887)
inline void IGAMEDIA::IWMPSliderCtrl::Putmax ( float pVal ) {
    HRESULT _hr = put_max(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(888)
inline float IGAMEDIA::IWMPSliderCtrl::Getvalue ( ) {
    float _result;
    HRESULT _hr = get_value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(889)
inline void IGAMEDIA::IWMPSliderCtrl::Putvalue ( float pVal ) {
    HRESULT _hr = put_value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(890)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GettoolTip ( ) {
    BSTR _result;
    HRESULT _hr = get_toolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(891)
inline void IGAMEDIA::IWMPSliderCtrl::PuttoolTip ( _bstr_t pVal ) {
    HRESULT _hr = put_toolTip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(892)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::Getcursor ( ) {
    BSTR _result;
    HRESULT _hr = get_cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(893)
inline void IGAMEDIA::IWMPSliderCtrl::Putcursor ( _bstr_t pVal ) {
    HRESULT _hr = put_cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(894)
inline int IGAMEDIA::IWMPSliderCtrl::GetborderSize ( ) {
    int _result;
    HRESULT _hr = get_borderSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(895)
inline void IGAMEDIA::IWMPSliderCtrl::PutborderSize ( int pVal ) {
    HRESULT _hr = put_borderSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(896)
inline _bstr_t IGAMEDIA::IWMPSliderCtrl::GetforegroundHoverImage ( ) {
    BSTR _result;
    HRESULT _hr = get_foregroundHoverImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(897)
inline void IGAMEDIA::IWMPSliderCtrl::PutforegroundHoverImage ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundHoverImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(898)
inline float IGAMEDIA::IWMPSliderCtrl::GetforegroundProgress ( ) {
    float _result;
    HRESULT _hr = get_foregroundProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(899)
inline void IGAMEDIA::IWMPSliderCtrl::PutforegroundProgress ( float pVal ) {
    HRESULT _hr = put_foregroundProgress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(900)
inline VARIANT_BOOL IGAMEDIA::IWMPSliderCtrl::GetuseForegroundProgress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_useForegroundProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(901)
inline void IGAMEDIA::IWMPSliderCtrl::PutuseForegroundProgress ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_useForegroundProgress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface IWMPVideoCtrlEvents wrapper method implementations
//

#pragma implementation_key(902)
inline HRESULT IGAMEDIA::IWMPVideoCtrlEvents::onvideostart ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x1658, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(903)
inline HRESULT IGAMEDIA::IWMPVideoCtrlEvents::onvideoend ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x1659, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface IWMPVideoCtrl wrapper method implementations
//

#pragma implementation_key(904)
inline void IGAMEDIA::IWMPVideoCtrl::Putwindowless ( VARIANT_BOOL pbClipped ) {
    HRESULT _hr = put_windowless(pbClipped);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(905)
inline VARIANT_BOOL IGAMEDIA::IWMPVideoCtrl::Getwindowless ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_windowless(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(906)
inline void IGAMEDIA::IWMPVideoCtrl::Putcursor ( _bstr_t pbstrCursor ) {
    HRESULT _hr = put_cursor(pbstrCursor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(907)
inline _bstr_t IGAMEDIA::IWMPVideoCtrl::Getcursor ( ) {
    BSTR _result;
    HRESULT _hr = get_cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(908)
inline void IGAMEDIA::IWMPVideoCtrl::PutbackgroundColor ( _bstr_t pbstrColor ) {
    HRESULT _hr = put_backgroundColor(pbstrColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(909)
inline _bstr_t IGAMEDIA::IWMPVideoCtrl::GetbackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(910)
inline void IGAMEDIA::IWMPVideoCtrl::PutmaintainAspectRatio ( VARIANT_BOOL pbMaintainAspectRatio ) {
    HRESULT _hr = put_maintainAspectRatio(pbMaintainAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(911)
inline VARIANT_BOOL IGAMEDIA::IWMPVideoCtrl::GetmaintainAspectRatio ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_maintainAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(912)
inline void IGAMEDIA::IWMPVideoCtrl::PuttoolTip ( _bstr_t bstrToolTip ) {
    HRESULT _hr = put_toolTip(bstrToolTip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(913)
inline _bstr_t IGAMEDIA::IWMPVideoCtrl::GettoolTip ( ) {
    BSTR _result;
    HRESULT _hr = get_toolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(914)
inline VARIANT_BOOL IGAMEDIA::IWMPVideoCtrl::GetfullScreen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_fullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(915)
inline void IGAMEDIA::IWMPVideoCtrl::PutfullScreen ( VARIANT_BOOL pbFullScreen ) {
    HRESULT _hr = put_fullScreen(pbFullScreen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(916)
inline void IGAMEDIA::IWMPVideoCtrl::PutshrinkToFit ( VARIANT_BOOL pbShrinkToFit ) {
    HRESULT _hr = put_shrinkToFit(pbShrinkToFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(917)
inline VARIANT_BOOL IGAMEDIA::IWMPVideoCtrl::GetshrinkToFit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_shrinkToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(918)
inline void IGAMEDIA::IWMPVideoCtrl::PutstretchToFit ( VARIANT_BOOL pbStretchToFit ) {
    HRESULT _hr = put_stretchToFit(pbStretchToFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(919)
inline VARIANT_BOOL IGAMEDIA::IWMPVideoCtrl::GetstretchToFit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_stretchToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(920)
inline void IGAMEDIA::IWMPVideoCtrl::Putzoom ( long pzoom ) {
    HRESULT _hr = put_zoom(pzoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(921)
inline long IGAMEDIA::IWMPVideoCtrl::Getzoom ( ) {
    long _result;
    HRESULT _hr = get_zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPEffectsCtrl wrapper method implementations
//

#pragma implementation_key(922)
inline VARIANT_BOOL IGAMEDIA::IWMPEffectsCtrl::Getwindowed ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_windowed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(923)
inline void IGAMEDIA::IWMPEffectsCtrl::Putwindowed ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_windowed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(924)
inline VARIANT_BOOL IGAMEDIA::IWMPEffectsCtrl::GetallowAll ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_allowAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(925)
inline void IGAMEDIA::IWMPEffectsCtrl::PutallowAll ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_allowAll(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(926)
inline void IGAMEDIA::IWMPEffectsCtrl::PutcurrentEffectType ( _bstr_t pVal ) {
    HRESULT _hr = put_currentEffectType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(927)
inline _bstr_t IGAMEDIA::IWMPEffectsCtrl::GetcurrentEffectType ( ) {
    BSTR _result;
    HRESULT _hr = get_currentEffectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(928)
inline _bstr_t IGAMEDIA::IWMPEffectsCtrl::GetcurrentEffectTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_currentEffectTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(929)
inline HRESULT IGAMEDIA::IWMPEffectsCtrl::next ( ) {
    HRESULT _hr = raw_next();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(930)
inline HRESULT IGAMEDIA::IWMPEffectsCtrl::previous ( ) {
    HRESULT _hr = raw_previous();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(931)
inline HRESULT IGAMEDIA::IWMPEffectsCtrl::settings ( ) {
    HRESULT _hr = raw_settings();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(932)
inline IDispatchPtr IGAMEDIA::IWMPEffectsCtrl::GetcurrentEffect ( ) {
    IDispatch * _result;
    HRESULT _hr = get_currentEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(933)
inline void IGAMEDIA::IWMPEffectsCtrl::PutcurrentEffect ( IDispatch * p ) {
    HRESULT _hr = put_currentEffect(p);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(934)
inline HRESULT IGAMEDIA::IWMPEffectsCtrl::nextEffect ( ) {
    HRESULT _hr = raw_nextEffect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(935)
inline HRESULT IGAMEDIA::IWMPEffectsCtrl::previousEffect ( ) {
    HRESULT _hr = raw_previousEffect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(936)
inline HRESULT IGAMEDIA::IWMPEffectsCtrl::nextPreset ( ) {
    HRESULT _hr = raw_nextPreset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(937)
inline HRESULT IGAMEDIA::IWMPEffectsCtrl::previousPreset ( ) {
    HRESULT _hr = raw_previousPreset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(938)
inline long IGAMEDIA::IWMPEffectsCtrl::GetcurrentPreset ( ) {
    long _result;
    HRESULT _hr = get_currentPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(939)
inline void IGAMEDIA::IWMPEffectsCtrl::PutcurrentPreset ( long pVal ) {
    HRESULT _hr = put_currentPreset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(940)
inline _bstr_t IGAMEDIA::IWMPEffectsCtrl::GetcurrentPresetTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_currentPresetTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(941)
inline long IGAMEDIA::IWMPEffectsCtrl::GetcurrentEffectPresetCount ( ) {
    long _result;
    HRESULT _hr = get_currentEffectPresetCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(942)
inline VARIANT_BOOL IGAMEDIA::IWMPEffectsCtrl::GetfullScreen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_fullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(943)
inline void IGAMEDIA::IWMPEffectsCtrl::PutfullScreen ( VARIANT_BOOL pbFullScreen ) {
    HRESULT _hr = put_fullScreen(pbFullScreen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(944)
inline VARIANT_BOOL IGAMEDIA::IWMPEffectsCtrl::GeteffectCanGoFullScreen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_effectCanGoFullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(945)
inline VARIANT_BOOL IGAMEDIA::IWMPEffectsCtrl::GeteffectHasPropertyPage ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_effectHasPropertyPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(946)
inline long IGAMEDIA::IWMPEffectsCtrl::GeteffectCount ( ) {
    long _result;
    HRESULT _hr = get_effectCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(947)
inline _bstr_t IGAMEDIA::IWMPEffectsCtrl::GeteffectTitle ( long index ) {
    BSTR _result;
    HRESULT _hr = get_effectTitle(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(948)
inline _bstr_t IGAMEDIA::IWMPEffectsCtrl::GeteffectType ( long index ) {
    BSTR _result;
    HRESULT _hr = get_effectType(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPEqualizerSettingsCtrl wrapper method implementations
//

#pragma implementation_key(949)
inline VARIANT_BOOL IGAMEDIA::IWMPEqualizerSettingsCtrl::Getbypass ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_bypass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(950)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::Putbypass ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_bypass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(951)
inline float IGAMEDIA::IWMPEqualizerSettingsCtrl::GetgainLevel1 ( ) {
    float _result;
    HRESULT _hr = get_gainLevel1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(952)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutgainLevel1 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel1(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(953)
inline float IGAMEDIA::IWMPEqualizerSettingsCtrl::GetgainLevel2 ( ) {
    float _result;
    HRESULT _hr = get_gainLevel2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(954)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutgainLevel2 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel2(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(955)
inline float IGAMEDIA::IWMPEqualizerSettingsCtrl::GetgainLevel3 ( ) {
    float _result;
    HRESULT _hr = get_gainLevel3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(956)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutgainLevel3 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel3(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(957)
inline float IGAMEDIA::IWMPEqualizerSettingsCtrl::GetgainLevel4 ( ) {
    float _result;
    HRESULT _hr = get_gainLevel4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(958)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutgainLevel4 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel4(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(959)
inline float IGAMEDIA::IWMPEqualizerSettingsCtrl::GetgainLevel5 ( ) {
    float _result;
    HRESULT _hr = get_gainLevel5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(960)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutgainLevel5 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel5(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(961)
inline float IGAMEDIA::IWMPEqualizerSettingsCtrl::GetgainLevel6 ( ) {
    float _result;
    HRESULT _hr = get_gainLevel6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(962)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutgainLevel6 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel6(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(963)
inline float IGAMEDIA::IWMPEqualizerSettingsCtrl::GetgainLevel7 ( ) {
    float _result;
    HRESULT _hr = get_gainLevel7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(964)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutgainLevel7 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel7(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(965)
inline float IGAMEDIA::IWMPEqualizerSettingsCtrl::GetgainLevel8 ( ) {
    float _result;
    HRESULT _hr = get_gainLevel8(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(966)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutgainLevel8 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel8(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(967)
inline float IGAMEDIA::IWMPEqualizerSettingsCtrl::GetgainLevel9 ( ) {
    float _result;
    HRESULT _hr = get_gainLevel9(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(968)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutgainLevel9 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel9(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(969)
inline float IGAMEDIA::IWMPEqualizerSettingsCtrl::GetgainLevel10 ( ) {
    float _result;
    HRESULT _hr = get_gainLevel10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(970)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutgainLevel10 ( float pflLevel ) {
    HRESULT _hr = put_gainLevel10(pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(971)
inline float IGAMEDIA::IWMPEqualizerSettingsCtrl::GetgainLevels ( long iIndex ) {
    float _result;
    HRESULT _hr = get_gainLevels(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(972)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutgainLevels ( long iIndex, float pflLevel ) {
    HRESULT _hr = put_gainLevels(iIndex, pflLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(973)
inline HRESULT IGAMEDIA::IWMPEqualizerSettingsCtrl::reset ( ) {
    HRESULT _hr = raw_reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(974)
inline long IGAMEDIA::IWMPEqualizerSettingsCtrl::Getbands ( ) {
    long _result;
    HRESULT _hr = get_bands(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(975)
inline HRESULT IGAMEDIA::IWMPEqualizerSettingsCtrl::nextPreset ( ) {
    HRESULT _hr = raw_nextPreset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(976)
inline HRESULT IGAMEDIA::IWMPEqualizerSettingsCtrl::previousPreset ( ) {
    HRESULT _hr = raw_previousPreset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(977)
inline long IGAMEDIA::IWMPEqualizerSettingsCtrl::GetcurrentPreset ( ) {
    long _result;
    HRESULT _hr = get_currentPreset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(978)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutcurrentPreset ( long pVal ) {
    HRESULT _hr = put_currentPreset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(979)
inline _bstr_t IGAMEDIA::IWMPEqualizerSettingsCtrl::GetcurrentPresetTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_currentPresetTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(980)
inline long IGAMEDIA::IWMPEqualizerSettingsCtrl::GetpresetCount ( ) {
    long _result;
    HRESULT _hr = get_presetCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(981)
inline VARIANT_BOOL IGAMEDIA::IWMPEqualizerSettingsCtrl::GetenhancedAudio ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_enhancedAudio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(982)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutenhancedAudio ( VARIANT_BOOL pfVal ) {
    HRESULT _hr = put_enhancedAudio(pfVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(983)
inline long IGAMEDIA::IWMPEqualizerSettingsCtrl::GetspeakerSize ( ) {
    long _result;
    HRESULT _hr = get_speakerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(984)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutspeakerSize ( long plVal ) {
    HRESULT _hr = put_speakerSize(plVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(985)
inline _bstr_t IGAMEDIA::IWMPEqualizerSettingsCtrl::GetcurrentSpeakerName ( ) {
    BSTR _result;
    HRESULT _hr = get_currentSpeakerName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(986)
inline long IGAMEDIA::IWMPEqualizerSettingsCtrl::GettruBassLevel ( ) {
    long _result;
    HRESULT _hr = get_truBassLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(987)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PuttruBassLevel ( long plTruBassLevel ) {
    HRESULT _hr = put_truBassLevel(plTruBassLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(988)
inline long IGAMEDIA::IWMPEqualizerSettingsCtrl::GetwowLevel ( ) {
    long _result;
    HRESULT _hr = get_wowLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(989)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutwowLevel ( long plWowLevel ) {
    HRESULT _hr = put_wowLevel(plWowLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(990)
inline float IGAMEDIA::IWMPEqualizerSettingsCtrl::GetsplineTension ( ) {
    float _result;
    HRESULT _hr = get_splineTension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(991)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutsplineTension ( float pflSplineTension ) {
    HRESULT _hr = put_splineTension(pflSplineTension);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(992)
inline VARIANT_BOOL IGAMEDIA::IWMPEqualizerSettingsCtrl::GetenableSplineTension ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_enableSplineTension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(993)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutenableSplineTension ( VARIANT_BOOL pfEnableSplineTension ) {
    HRESULT _hr = put_enableSplineTension(pfEnableSplineTension);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(994)
inline _bstr_t IGAMEDIA::IWMPEqualizerSettingsCtrl::GetpresetTitle ( long iIndex ) {
    BSTR _result;
    HRESULT _hr = get_presetTitle(iIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(995)
inline VARIANT_BOOL IGAMEDIA::IWMPEqualizerSettingsCtrl::Getnormalization ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_normalization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(996)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::Putnormalization ( VARIANT_BOOL pfVal ) {
    HRESULT _hr = put_normalization(pfVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(997)
inline float IGAMEDIA::IWMPEqualizerSettingsCtrl::GetnormalizationAverage ( ) {
    float _result;
    HRESULT _hr = get_normalizationAverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(998)
inline float IGAMEDIA::IWMPEqualizerSettingsCtrl::GetnormalizationPeak ( ) {
    float _result;
    HRESULT _hr = get_normalizationPeak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(999)
inline VARIANT_BOOL IGAMEDIA::IWMPEqualizerSettingsCtrl::GetcrossFade ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_crossFade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1000)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutcrossFade ( VARIANT_BOOL pfVal ) {
    HRESULT _hr = put_crossFade(pfVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1001)
inline long IGAMEDIA::IWMPEqualizerSettingsCtrl::GetcrossFadeWindow ( ) {
    long _result;
    HRESULT _hr = get_crossFadeWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1002)
inline void IGAMEDIA::IWMPEqualizerSettingsCtrl::PutcrossFadeWindow ( long plWindow ) {
    HRESULT _hr = put_crossFadeWindow(plWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPVideoSettingsCtrl wrapper method implementations
//

#pragma implementation_key(1003)
inline long IGAMEDIA::IWMPVideoSettingsCtrl::Getbrightness ( ) {
    long _result;
    HRESULT _hr = get_brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1004)
inline void IGAMEDIA::IWMPVideoSettingsCtrl::Putbrightness ( long pVal ) {
    HRESULT _hr = put_brightness(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1005)
inline long IGAMEDIA::IWMPVideoSettingsCtrl::Getcontrast ( ) {
    long _result;
    HRESULT _hr = get_contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1006)
inline void IGAMEDIA::IWMPVideoSettingsCtrl::Putcontrast ( long pVal ) {
    HRESULT _hr = put_contrast(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1007)
inline long IGAMEDIA::IWMPVideoSettingsCtrl::Gethue ( ) {
    long _result;
    HRESULT _hr = get_hue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1008)
inline void IGAMEDIA::IWMPVideoSettingsCtrl::Puthue ( long pVal ) {
    HRESULT _hr = put_hue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1009)
inline long IGAMEDIA::IWMPVideoSettingsCtrl::Getsaturation ( ) {
    long _result;
    HRESULT _hr = get_saturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1010)
inline void IGAMEDIA::IWMPVideoSettingsCtrl::Putsaturation ( long pVal ) {
    HRESULT _hr = put_saturation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1011)
inline HRESULT IGAMEDIA::IWMPVideoSettingsCtrl::reset ( ) {
    HRESULT _hr = raw_reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPLibraryTreeCtrl wrapper method implementations
//

#pragma implementation_key(1012)
inline VARIANT_BOOL IGAMEDIA::IWMPLibraryTreeCtrl::GetdropDownVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_dropDownVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1013)
inline void IGAMEDIA::IWMPLibraryTreeCtrl::PutdropDownVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_dropDownVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1014)
inline _bstr_t IGAMEDIA::IWMPLibraryTreeCtrl::GetforegroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_foregroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1015)
inline void IGAMEDIA::IWMPLibraryTreeCtrl::PutforegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1016)
inline _bstr_t IGAMEDIA::IWMPLibraryTreeCtrl::GetbackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1017)
inline void IGAMEDIA::IWMPLibraryTreeCtrl::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1018)
inline long IGAMEDIA::IWMPLibraryTreeCtrl::GetfontSize ( ) {
    long _result;
    HRESULT _hr = get_fontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1019)
inline void IGAMEDIA::IWMPLibraryTreeCtrl::PutfontSize ( long pVal ) {
    HRESULT _hr = put_fontSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1020)
inline _bstr_t IGAMEDIA::IWMPLibraryTreeCtrl::GetfontStyle ( ) {
    BSTR _result;
    HRESULT _hr = get_fontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1021)
inline void IGAMEDIA::IWMPLibraryTreeCtrl::PutfontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_fontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1022)
inline _bstr_t IGAMEDIA::IWMPLibraryTreeCtrl::GetfontFace ( ) {
    BSTR _result;
    HRESULT _hr = get_fontFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1023)
inline void IGAMEDIA::IWMPLibraryTreeCtrl::PutfontFace ( _bstr_t pVal ) {
    HRESULT _hr = put_fontFace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1024)
inline _bstr_t IGAMEDIA::IWMPLibraryTreeCtrl::Getfilter ( ) {
    BSTR _result;
    HRESULT _hr = get_filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1025)
inline void IGAMEDIA::IWMPLibraryTreeCtrl::Putfilter ( _bstr_t pVal ) {
    HRESULT _hr = put_filter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1026)
inline _bstr_t IGAMEDIA::IWMPLibraryTreeCtrl::GetexpandState ( ) {
    BSTR _result;
    HRESULT _hr = get_expandState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1027)
inline void IGAMEDIA::IWMPLibraryTreeCtrl::PutexpandState ( _bstr_t pVal ) {
    HRESULT _hr = put_expandState(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1028)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPLibraryTreeCtrl::GetPlaylist ( ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = get_Playlist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1029)
inline void IGAMEDIA::IWMPLibraryTreeCtrl::PutPlaylist ( struct IWMPPlaylist * ppPlaylist ) {
    HRESULT _hr = put_Playlist(ppPlaylist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1030)
inline IGAMEDIA::IWMPPlaylistPtr IGAMEDIA::IWMPLibraryTreeCtrl::GetselectedPlaylist ( ) {
    struct IWMPPlaylist * _result;
    HRESULT _hr = get_selectedPlaylist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPPlaylistPtr(_result, false);
}

#pragma implementation_key(1031)
inline IGAMEDIA::IWMPMediaPtr IGAMEDIA::IWMPLibraryTreeCtrl::GetselectedMedia ( ) {
    struct IWMPMedia * _result;
    HRESULT _hr = get_selectedMedia(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPMediaPtr(_result, false);
}

//
// interface IWMPEditCtrl wrapper method implementations
//

#pragma implementation_key(1032)
inline _bstr_t IGAMEDIA::IWMPEditCtrl::Getvalue ( ) {
    BSTR _result;
    HRESULT _hr = get_value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1033)
inline void IGAMEDIA::IWMPEditCtrl::Putvalue ( _bstr_t pVal ) {
    HRESULT _hr = put_value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1034)
inline VARIANT_BOOL IGAMEDIA::IWMPEditCtrl::Getborder ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1035)
inline void IGAMEDIA::IWMPEditCtrl::Putborder ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_border(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1036)
inline _bstr_t IGAMEDIA::IWMPEditCtrl::Getjustification ( ) {
    BSTR _result;
    HRESULT _hr = get_justification(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1037)
inline void IGAMEDIA::IWMPEditCtrl::Putjustification ( _bstr_t pVal ) {
    HRESULT _hr = put_justification(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1038)
inline _bstr_t IGAMEDIA::IWMPEditCtrl::GeteditStyle ( ) {
    BSTR _result;
    HRESULT _hr = get_editStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1039)
inline void IGAMEDIA::IWMPEditCtrl::PuteditStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_editStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1040)
inline VARIANT_BOOL IGAMEDIA::IWMPEditCtrl::GetwordWrap ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_wordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1041)
inline void IGAMEDIA::IWMPEditCtrl::PutwordWrap ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_wordWrap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1042)
inline VARIANT_BOOL IGAMEDIA::IWMPEditCtrl::GetreadOnly ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_readOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1043)
inline void IGAMEDIA::IWMPEditCtrl::PutreadOnly ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_readOnly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1044)
inline _bstr_t IGAMEDIA::IWMPEditCtrl::GetforegroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_foregroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1045)
inline void IGAMEDIA::IWMPEditCtrl::PutforegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1046)
inline _bstr_t IGAMEDIA::IWMPEditCtrl::GetbackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1047)
inline void IGAMEDIA::IWMPEditCtrl::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1048)
inline long IGAMEDIA::IWMPEditCtrl::GetfontSize ( ) {
    long _result;
    HRESULT _hr = get_fontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1049)
inline void IGAMEDIA::IWMPEditCtrl::PutfontSize ( long pVal ) {
    HRESULT _hr = put_fontSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1050)
inline _bstr_t IGAMEDIA::IWMPEditCtrl::GetfontStyle ( ) {
    BSTR _result;
    HRESULT _hr = get_fontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1051)
inline void IGAMEDIA::IWMPEditCtrl::PutfontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_fontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1052)
inline _bstr_t IGAMEDIA::IWMPEditCtrl::GetfontFace ( ) {
    BSTR _result;
    HRESULT _hr = get_fontFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1053)
inline void IGAMEDIA::IWMPEditCtrl::PutfontFace ( _bstr_t pVal ) {
    HRESULT _hr = put_fontFace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1054)
inline long IGAMEDIA::IWMPEditCtrl::GettextLimit ( ) {
    long _result;
    HRESULT _hr = get_textLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1055)
inline void IGAMEDIA::IWMPEditCtrl::PuttextLimit ( long pVal ) {
    HRESULT _hr = put_textLimit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1056)
inline long IGAMEDIA::IWMPEditCtrl::GetlineCount ( ) {
    long _result;
    HRESULT _hr = get_lineCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1057)
inline _bstr_t IGAMEDIA::IWMPEditCtrl::getLine ( long nIndex ) {
    BSTR _result;
    HRESULT _hr = raw_getLine(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1058)
inline long IGAMEDIA::IWMPEditCtrl::getSelectionStart ( ) {
    long _result;
    HRESULT _hr = raw_getSelectionStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1059)
inline long IGAMEDIA::IWMPEditCtrl::getSelectionEnd ( ) {
    long _result;
    HRESULT _hr = raw_getSelectionEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1060)
inline HRESULT IGAMEDIA::IWMPEditCtrl::setSelection ( long nStart, long nEnd ) {
    HRESULT _hr = raw_setSelection(nStart, nEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1061)
inline HRESULT IGAMEDIA::IWMPEditCtrl::replaceSelection ( _bstr_t newVal ) {
    HRESULT _hr = raw_replaceSelection(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1062)
inline long IGAMEDIA::IWMPEditCtrl::getLineIndex ( long nIndex ) {
    long _result;
    HRESULT _hr = raw_getLineIndex(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1063)
inline long IGAMEDIA::IWMPEditCtrl::getLineFromChar ( long nPosition ) {
    long _result;
    HRESULT _hr = raw_getLineFromChar(nPosition, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWMPPluginUIHost wrapper method implementations
//

#pragma implementation_key(1064)
inline _bstr_t IGAMEDIA::IWMPPluginUIHost::GetbackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1065)
inline void IGAMEDIA::IWMPPluginUIHost::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1066)
inline _bstr_t IGAMEDIA::IWMPPluginUIHost::GetobjectID ( ) {
    BSTR _result;
    HRESULT _hr = get_objectID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1067)
inline void IGAMEDIA::IWMPPluginUIHost::PutobjectID ( _bstr_t pVal ) {
    HRESULT _hr = put_objectID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1068)
inline _variant_t IGAMEDIA::IWMPPluginUIHost::getProperty ( _bstr_t bstrName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_getProperty(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1069)
inline HRESULT IGAMEDIA::IWMPPluginUIHost::setProperty ( _bstr_t bstrName, const _variant_t & newVal ) {
    HRESULT _hr = raw_setProperty(bstrName, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPMenuCtrl wrapper method implementations
//

#pragma implementation_key(1070)
inline HRESULT IGAMEDIA::IWMPMenuCtrl::deleteAllItems ( ) {
    HRESULT _hr = raw_deleteAllItems();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1071)
inline HRESULT IGAMEDIA::IWMPMenuCtrl::appendItem ( long nID, _bstr_t bstrItem ) {
    HRESULT _hr = raw_appendItem(nID, bstrItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1072)
inline HRESULT IGAMEDIA::IWMPMenuCtrl::appendSeparator ( ) {
    HRESULT _hr = raw_appendSeparator();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1073)
inline HRESULT IGAMEDIA::IWMPMenuCtrl::enableItem ( long nID, VARIANT_BOOL newVal ) {
    HRESULT _hr = raw_enableItem(nID, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1074)
inline HRESULT IGAMEDIA::IWMPMenuCtrl::checkItem ( long nID, VARIANT_BOOL newVal ) {
    HRESULT _hr = raw_checkItem(nID, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1075)
inline HRESULT IGAMEDIA::IWMPMenuCtrl::checkRadioItem ( long nID, VARIANT_BOOL newVal ) {
    HRESULT _hr = raw_checkRadioItem(nID, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1076)
inline long IGAMEDIA::IWMPMenuCtrl::GetshowFlags ( ) {
    long _result;
    HRESULT _hr = get_showFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1077)
inline void IGAMEDIA::IWMPMenuCtrl::PutshowFlags ( long pVal ) {
    HRESULT _hr = put_showFlags(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1078)
inline long IGAMEDIA::IWMPMenuCtrl::show ( ) {
    long _result;
    HRESULT _hr = raw_show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1079)
inline HRESULT IGAMEDIA::IWMPMenuCtrl::showEx ( long nID ) {
    HRESULT _hr = raw_showEx(nID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPAutoMenuCtrl wrapper method implementations
//

#pragma implementation_key(1080)
inline HRESULT IGAMEDIA::IWMPAutoMenuCtrl::show ( _bstr_t newVal ) {
    HRESULT _hr = raw_show(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPRegionalButtonCtrl wrapper method implementations
//

#pragma implementation_key(1081)
inline _bstr_t IGAMEDIA::IWMPRegionalButtonCtrl::Getimage ( ) {
    BSTR _result;
    HRESULT _hr = get_image(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1082)
inline void IGAMEDIA::IWMPRegionalButtonCtrl::Putimage ( _bstr_t pVal ) {
    HRESULT _hr = put_image(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1083)
inline _bstr_t IGAMEDIA::IWMPRegionalButtonCtrl::GethoverImage ( ) {
    BSTR _result;
    HRESULT _hr = get_hoverImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1084)
inline void IGAMEDIA::IWMPRegionalButtonCtrl::PuthoverImage ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1085)
inline _bstr_t IGAMEDIA::IWMPRegionalButtonCtrl::GetdownImage ( ) {
    BSTR _result;
    HRESULT _hr = get_downImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1086)
inline void IGAMEDIA::IWMPRegionalButtonCtrl::PutdownImage ( _bstr_t pVal ) {
    HRESULT _hr = put_downImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1087)
inline _bstr_t IGAMEDIA::IWMPRegionalButtonCtrl::GethoverDownImage ( ) {
    BSTR _result;
    HRESULT _hr = get_hoverDownImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1088)
inline void IGAMEDIA::IWMPRegionalButtonCtrl::PuthoverDownImage ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverDownImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1089)
inline _bstr_t IGAMEDIA::IWMPRegionalButtonCtrl::GetdisabledImage ( ) {
    BSTR _result;
    HRESULT _hr = get_disabledImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1090)
inline void IGAMEDIA::IWMPRegionalButtonCtrl::PutdisabledImage ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1091)
inline _bstr_t IGAMEDIA::IWMPRegionalButtonCtrl::GetmappingImage ( ) {
    BSTR _result;
    HRESULT _hr = get_mappingImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1092)
inline void IGAMEDIA::IWMPRegionalButtonCtrl::PutmappingImage ( _bstr_t pVal ) {
    HRESULT _hr = put_mappingImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1093)
inline _bstr_t IGAMEDIA::IWMPRegionalButtonCtrl::GettransparencyColor ( ) {
    BSTR _result;
    HRESULT _hr = get_transparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1094)
inline void IGAMEDIA::IWMPRegionalButtonCtrl::PuttransparencyColor ( _bstr_t pVal ) {
    HRESULT _hr = put_transparencyColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1095)
inline _bstr_t IGAMEDIA::IWMPRegionalButtonCtrl::Getcursor ( ) {
    BSTR _result;
    HRESULT _hr = get_cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1096)
inline void IGAMEDIA::IWMPRegionalButtonCtrl::Putcursor ( _bstr_t pVal ) {
    HRESULT _hr = put_cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1097)
inline VARIANT_BOOL IGAMEDIA::IWMPRegionalButtonCtrl::GetshowBackground ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_showBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1098)
inline void IGAMEDIA::IWMPRegionalButtonCtrl::PutshowBackground ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showBackground(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1099)
inline VARIANT_BOOL IGAMEDIA::IWMPRegionalButtonCtrl::Getradio ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_radio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1100)
inline void IGAMEDIA::IWMPRegionalButtonCtrl::Putradio ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_radio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1101)
inline long IGAMEDIA::IWMPRegionalButtonCtrl::GetbuttonCount ( ) {
    long _result;
    HRESULT _hr = get_buttonCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1102)
inline IDispatchPtr IGAMEDIA::IWMPRegionalButtonCtrl::createButton ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_createButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1103)
inline IDispatchPtr IGAMEDIA::IWMPRegionalButtonCtrl::getButton ( long nButton ) {
    IDispatch * _result;
    HRESULT _hr = raw_getButton(nButton, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1104)
inline HRESULT IGAMEDIA::IWMPRegionalButtonCtrl::Click ( long nButton ) {
    HRESULT _hr = raw_Click(nButton);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1105)
inline float IGAMEDIA::IWMPRegionalButtonCtrl::GethueShift ( ) {
    float _result;
    HRESULT _hr = get_hueShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1106)
inline void IGAMEDIA::IWMPRegionalButtonCtrl::PuthueShift ( float pVal ) {
    HRESULT _hr = put_hueShift(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1107)
inline float IGAMEDIA::IWMPRegionalButtonCtrl::Getsaturation ( ) {
    float _result;
    HRESULT _hr = get_saturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1108)
inline void IGAMEDIA::IWMPRegionalButtonCtrl::Putsaturation ( float pVal ) {
    HRESULT _hr = put_saturation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface IWMPRegionalButtonEvents wrapper method implementations
//

#pragma implementation_key(1109)
inline HRESULT IGAMEDIA::IWMPRegionalButtonEvents::onblur ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x14f0, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1110)
inline HRESULT IGAMEDIA::IWMPRegionalButtonEvents::onfocus ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x14f1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1111)
inline HRESULT IGAMEDIA::IWMPRegionalButtonEvents::onclick ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x14f2, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1112)
inline HRESULT IGAMEDIA::IWMPRegionalButtonEvents::ondblclick ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x14f3, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1113)
inline HRESULT IGAMEDIA::IWMPRegionalButtonEvents::onmousedown ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x14f4, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1114)
inline HRESULT IGAMEDIA::IWMPRegionalButtonEvents::onmouseup ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x14f5, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1115)
inline HRESULT IGAMEDIA::IWMPRegionalButtonEvents::onmousemove ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x14f6, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1116)
inline HRESULT IGAMEDIA::IWMPRegionalButtonEvents::onmouseover ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x14f7, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1117)
inline HRESULT IGAMEDIA::IWMPRegionalButtonEvents::onmouseout ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x14f8, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1118)
inline HRESULT IGAMEDIA::IWMPRegionalButtonEvents::onkeypress ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x14f9, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1119)
inline HRESULT IGAMEDIA::IWMPRegionalButtonEvents::onkeydown ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x14fa, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1120)
inline HRESULT IGAMEDIA::IWMPRegionalButtonEvents::onkeyup ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x14fb, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface IWMPRegionalButton wrapper method implementations
//

#pragma implementation_key(1121)
inline _bstr_t IGAMEDIA::IWMPRegionalButton::GetupToolTip ( ) {
    BSTR _result;
    HRESULT _hr = get_upToolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1122)
inline void IGAMEDIA::IWMPRegionalButton::PutupToolTip ( _bstr_t pVal ) {
    HRESULT _hr = put_upToolTip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1123)
inline _bstr_t IGAMEDIA::IWMPRegionalButton::GetdownToolTip ( ) {
    BSTR _result;
    HRESULT _hr = get_downToolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1124)
inline void IGAMEDIA::IWMPRegionalButton::PutdownToolTip ( _bstr_t pVal ) {
    HRESULT _hr = put_downToolTip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1125)
inline _bstr_t IGAMEDIA::IWMPRegionalButton::GetmappingColor ( ) {
    BSTR _result;
    HRESULT _hr = get_mappingColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1126)
inline void IGAMEDIA::IWMPRegionalButton::PutmappingColor ( _bstr_t pVal ) {
    HRESULT _hr = put_mappingColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1127)
inline VARIANT_BOOL IGAMEDIA::IWMPRegionalButton::Getenabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1128)
inline void IGAMEDIA::IWMPRegionalButton::Putenabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_enabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1129)
inline VARIANT_BOOL IGAMEDIA::IWMPRegionalButton::Getsticky ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_sticky(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1130)
inline void IGAMEDIA::IWMPRegionalButton::Putsticky ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_sticky(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1131)
inline VARIANT_BOOL IGAMEDIA::IWMPRegionalButton::Getdown ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_down(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1132)
inline void IGAMEDIA::IWMPRegionalButton::Putdown ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_down(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1133)
inline long IGAMEDIA::IWMPRegionalButton::Getindex ( ) {
    long _result;
    HRESULT _hr = get_index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1134)
inline VARIANT_BOOL IGAMEDIA::IWMPRegionalButton::GettabStop ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_tabStop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1135)
inline void IGAMEDIA::IWMPRegionalButton::PuttabStop ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_tabStop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1136)
inline _bstr_t IGAMEDIA::IWMPRegionalButton::Getcursor ( ) {
    BSTR _result;
    HRESULT _hr = get_cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1137)
inline void IGAMEDIA::IWMPRegionalButton::Putcursor ( _bstr_t pVal ) {
    HRESULT _hr = put_cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1138)
inline HRESULT IGAMEDIA::IWMPRegionalButton::Click ( ) {
    HRESULT _hr = raw_Click();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1139)
inline _bstr_t IGAMEDIA::IWMPRegionalButton::GetaccName ( ) {
    BSTR _result;
    HRESULT _hr = get_accName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1140)
inline void IGAMEDIA::IWMPRegionalButton::PutaccName ( _bstr_t pszName ) {
    HRESULT _hr = put_accName(pszName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1141)
inline _bstr_t IGAMEDIA::IWMPRegionalButton::GetaccDescription ( ) {
    BSTR _result;
    HRESULT _hr = get_accDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1142)
inline void IGAMEDIA::IWMPRegionalButton::PutaccDescription ( _bstr_t pszDescription ) {
    HRESULT _hr = put_accDescription(pszDescription);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1143)
inline _bstr_t IGAMEDIA::IWMPRegionalButton::GetaccKeyboardShortcut ( ) {
    BSTR _result;
    HRESULT _hr = get_accKeyboardShortcut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1144)
inline void IGAMEDIA::IWMPRegionalButton::PutaccKeyboardShortcut ( _bstr_t pszShortcut ) {
    HRESULT _hr = put_accKeyboardShortcut(pszShortcut);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface IWMPCustomSliderCtrlEvents wrapper method implementations
//

#pragma implementation_key(1145)
inline HRESULT IGAMEDIA::IWMPCustomSliderCtrlEvents::ondragbegin ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x139c, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1146)
inline HRESULT IGAMEDIA::IWMPCustomSliderCtrlEvents::ondragend ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x139d, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(1147)
inline HRESULT IGAMEDIA::IWMPCustomSliderCtrlEvents::onpositionchange ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0x139e, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface IWMPCustomSlider wrapper method implementations
//

#pragma implementation_key(1148)
inline _bstr_t IGAMEDIA::IWMPCustomSlider::Getcursor ( ) {
    BSTR _result;
    HRESULT _hr = get_cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1149)
inline void IGAMEDIA::IWMPCustomSlider::Putcursor ( _bstr_t pVal ) {
    HRESULT _hr = put_cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1150)
inline float IGAMEDIA::IWMPCustomSlider::Getmin ( ) {
    float _result;
    HRESULT _hr = get_min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1151)
inline void IGAMEDIA::IWMPCustomSlider::Putmin ( float pVal ) {
    HRESULT _hr = put_min(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1152)
inline float IGAMEDIA::IWMPCustomSlider::Getmax ( ) {
    float _result;
    HRESULT _hr = get_max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1153)
inline void IGAMEDIA::IWMPCustomSlider::Putmax ( float pVal ) {
    HRESULT _hr = put_max(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1154)
inline float IGAMEDIA::IWMPCustomSlider::Getvalue ( ) {
    float _result;
    HRESULT _hr = get_value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1155)
inline void IGAMEDIA::IWMPCustomSlider::Putvalue ( float pVal ) {
    HRESULT _hr = put_value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1156)
inline _bstr_t IGAMEDIA::IWMPCustomSlider::GettoolTip ( ) {
    BSTR _result;
    HRESULT _hr = get_toolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1157)
inline void IGAMEDIA::IWMPCustomSlider::PuttoolTip ( _bstr_t pVal ) {
    HRESULT _hr = put_toolTip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1158)
inline _bstr_t IGAMEDIA::IWMPCustomSlider::GetpositionImage ( ) {
    BSTR _result;
    HRESULT _hr = get_positionImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1159)
inline void IGAMEDIA::IWMPCustomSlider::PutpositionImage ( _bstr_t pVal ) {
    HRESULT _hr = put_positionImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1160)
inline _bstr_t IGAMEDIA::IWMPCustomSlider::Getimage ( ) {
    BSTR _result;
    HRESULT _hr = get_image(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1161)
inline void IGAMEDIA::IWMPCustomSlider::Putimage ( _bstr_t pVal ) {
    HRESULT _hr = put_image(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1162)
inline _bstr_t IGAMEDIA::IWMPCustomSlider::GethoverImage ( ) {
    BSTR _result;
    HRESULT _hr = get_hoverImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1163)
inline void IGAMEDIA::IWMPCustomSlider::PuthoverImage ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1164)
inline _bstr_t IGAMEDIA::IWMPCustomSlider::GetdisabledImage ( ) {
    BSTR _result;
    HRESULT _hr = get_disabledImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1165)
inline void IGAMEDIA::IWMPCustomSlider::PutdisabledImage ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1166)
inline _bstr_t IGAMEDIA::IWMPCustomSlider::GetdownImage ( ) {
    BSTR _result;
    HRESULT _hr = get_downImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1167)
inline void IGAMEDIA::IWMPCustomSlider::PutdownImage ( _bstr_t pVal ) {
    HRESULT _hr = put_downImage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1168)
inline _bstr_t IGAMEDIA::IWMPCustomSlider::GettransparencyColor ( ) {
    BSTR _result;
    HRESULT _hr = get_transparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1169)
inline void IGAMEDIA::IWMPCustomSlider::PuttransparencyColor ( _bstr_t pVal ) {
    HRESULT _hr = put_transparencyColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPTextCtrl wrapper method implementations
//

#pragma implementation_key(1170)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::GetbackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1171)
inline void IGAMEDIA::IWMPTextCtrl::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1172)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::GetfontFace ( ) {
    BSTR _result;
    HRESULT _hr = get_fontFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1173)
inline void IGAMEDIA::IWMPTextCtrl::PutfontFace ( _bstr_t pVal ) {
    HRESULT _hr = put_fontFace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1174)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::GetfontStyle ( ) {
    BSTR _result;
    HRESULT _hr = get_fontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1175)
inline void IGAMEDIA::IWMPTextCtrl::PutfontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_fontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1176)
inline long IGAMEDIA::IWMPTextCtrl::GetfontSize ( ) {
    long _result;
    HRESULT _hr = get_fontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1177)
inline void IGAMEDIA::IWMPTextCtrl::PutfontSize ( long pVal ) {
    HRESULT _hr = put_fontSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1178)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::GetforegroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_foregroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1179)
inline void IGAMEDIA::IWMPTextCtrl::PutforegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1180)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::GethoverBackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_hoverBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1181)
inline void IGAMEDIA::IWMPTextCtrl::PuthoverBackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverBackgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1182)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::GethoverForegroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_hoverForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1183)
inline void IGAMEDIA::IWMPTextCtrl::PuthoverForegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverForegroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1184)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::GethoverFontStyle ( ) {
    BSTR _result;
    HRESULT _hr = get_hoverFontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1185)
inline void IGAMEDIA::IWMPTextCtrl::PuthoverFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_hoverFontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1186)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::Getvalue ( ) {
    BSTR _result;
    HRESULT _hr = get_value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1187)
inline void IGAMEDIA::IWMPTextCtrl::Putvalue ( _bstr_t pVal ) {
    HRESULT _hr = put_value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1188)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::GettoolTip ( ) {
    BSTR _result;
    HRESULT _hr = get_toolTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1189)
inline void IGAMEDIA::IWMPTextCtrl::PuttoolTip ( _bstr_t pVal ) {
    HRESULT _hr = put_toolTip(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1190)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::GetdisabledFontStyle ( ) {
    BSTR _result;
    HRESULT _hr = get_disabledFontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1191)
inline void IGAMEDIA::IWMPTextCtrl::PutdisabledFontStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledFontStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1192)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::GetdisabledForegroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_disabledForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1193)
inline void IGAMEDIA::IWMPTextCtrl::PutdisabledForegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledForegroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1194)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::GetdisabledBackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_disabledBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1195)
inline void IGAMEDIA::IWMPTextCtrl::PutdisabledBackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_disabledBackgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1196)
inline VARIANT_BOOL IGAMEDIA::IWMPTextCtrl::GetfontSmoothing ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_fontSmoothing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1197)
inline void IGAMEDIA::IWMPTextCtrl::PutfontSmoothing ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_fontSmoothing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1198)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::Getjustification ( ) {
    BSTR _result;
    HRESULT _hr = get_justification(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1199)
inline void IGAMEDIA::IWMPTextCtrl::Putjustification ( _bstr_t pVal ) {
    HRESULT _hr = put_justification(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1200)
inline VARIANT_BOOL IGAMEDIA::IWMPTextCtrl::GetwordWrap ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_wordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1201)
inline void IGAMEDIA::IWMPTextCtrl::PutwordWrap ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_wordWrap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1202)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::Getcursor ( ) {
    BSTR _result;
    HRESULT _hr = get_cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1203)
inline void IGAMEDIA::IWMPTextCtrl::Putcursor ( _bstr_t pVal ) {
    HRESULT _hr = put_cursor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1204)
inline VARIANT_BOOL IGAMEDIA::IWMPTextCtrl::Getscrolling ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_scrolling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1205)
inline void IGAMEDIA::IWMPTextCtrl::Putscrolling ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_scrolling(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1206)
inline _bstr_t IGAMEDIA::IWMPTextCtrl::GetscrollingDirection ( ) {
    BSTR _result;
    HRESULT _hr = get_scrollingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1207)
inline void IGAMEDIA::IWMPTextCtrl::PutscrollingDirection ( _bstr_t pVal ) {
    HRESULT _hr = put_scrollingDirection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1208)
inline int IGAMEDIA::IWMPTextCtrl::GetscrollingDelay ( ) {
    int _result;
    HRESULT _hr = get_scrollingDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1209)
inline void IGAMEDIA::IWMPTextCtrl::PutscrollingDelay ( int pVal ) {
    HRESULT _hr = put_scrollingDelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1210)
inline int IGAMEDIA::IWMPTextCtrl::GetscrollingAmount ( ) {
    int _result;
    HRESULT _hr = get_scrollingAmount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1211)
inline void IGAMEDIA::IWMPTextCtrl::PutscrollingAmount ( int pVal ) {
    HRESULT _hr = put_scrollingAmount(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1212)
inline int IGAMEDIA::IWMPTextCtrl::GettextWidth ( ) {
    int _result;
    HRESULT _hr = get_textWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITaskCntrCtrl wrapper method implementations
//

#pragma implementation_key(1213)
inline IUnknownPtr IGAMEDIA::ITaskCntrCtrl::GetCurrentContainer ( ) {
    IUnknown * _result;
    HRESULT _hr = get_CurrentContainer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1214)
inline void IGAMEDIA::ITaskCntrCtrl::PutCurrentContainer ( IUnknown * ppUnk ) {
    HRESULT _hr = put_CurrentContainer(ppUnk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1215)
inline HRESULT IGAMEDIA::ITaskCntrCtrl::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface _WMPCoreEvents wrapper method implementations
//

#pragma implementation_key(1216)
inline HRESULT IGAMEDIA::_WMPCoreEvents::OpenStateChange ( long NewState ) {
    return _com_dispatch_method(this, 0x1389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", NewState);
}

#pragma implementation_key(1217)
inline HRESULT IGAMEDIA::_WMPCoreEvents::PlayStateChange ( long NewState ) {
    return _com_dispatch_method(this, 0x13ed, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", NewState);
}

#pragma implementation_key(1218)
inline HRESULT IGAMEDIA::_WMPCoreEvents::AudioLanguageChange ( long LangID ) {
    return _com_dispatch_method(this, 0x13ee, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", LangID);
}

#pragma implementation_key(1219)
inline HRESULT IGAMEDIA::_WMPCoreEvents::StatusChange ( ) {
    return _com_dispatch_method(this, 0x138a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1220)
inline HRESULT IGAMEDIA::_WMPCoreEvents::ScriptCommand ( _bstr_t scType, _bstr_t Param ) {
    return _com_dispatch_method(this, 0x14b5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008", (BSTR)scType, (BSTR)Param);
}

#pragma implementation_key(1221)
inline HRESULT IGAMEDIA::_WMPCoreEvents::NewStream ( ) {
    return _com_dispatch_method(this, 0x151b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1222)
inline HRESULT IGAMEDIA::_WMPCoreEvents::Disconnect ( long Result ) {
    return _com_dispatch_method(this, 0x1519, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Result);
}

#pragma implementation_key(1223)
inline HRESULT IGAMEDIA::_WMPCoreEvents::Buffering ( VARIANT_BOOL Start ) {
    return _com_dispatch_method(this, 0x151a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000b", Start);
}

#pragma implementation_key(1224)
inline HRESULT IGAMEDIA::_WMPCoreEvents::Error ( ) {
    return _com_dispatch_method(this, 0x157d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1225)
inline HRESULT IGAMEDIA::_WMPCoreEvents::Warning ( long WarningType, long Param, _bstr_t Description ) {
    return _com_dispatch_method(this, 0x15e1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0008", WarningType, Param, (BSTR)Description);
}

#pragma implementation_key(1226)
inline HRESULT IGAMEDIA::_WMPCoreEvents::EndOfStream ( long Result ) {
    return _com_dispatch_method(this, 0x1451, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Result);
}

#pragma implementation_key(1227)
inline HRESULT IGAMEDIA::_WMPCoreEvents::PositionChange ( double oldPosition, double newPosition ) {
    return _com_dispatch_method(this, 0x1452, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0005", oldPosition, newPosition);
}

#pragma implementation_key(1228)
inline HRESULT IGAMEDIA::_WMPCoreEvents::MarkerHit ( long MarkerNum ) {
    return _com_dispatch_method(this, 0x1453, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", MarkerNum);
}

#pragma implementation_key(1229)
inline HRESULT IGAMEDIA::_WMPCoreEvents::DurationUnitChange ( long NewDurationUnit ) {
    return _com_dispatch_method(this, 0x1454, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", NewDurationUnit);
}

#pragma implementation_key(1230)
inline HRESULT IGAMEDIA::_WMPCoreEvents::CdromMediaChange ( long CdromNum ) {
    return _com_dispatch_method(this, 0x1645, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", CdromNum);
}

#pragma implementation_key(1231)
inline HRESULT IGAMEDIA::_WMPCoreEvents::PlaylistChange ( IDispatch * Playlist, enum WMPPlaylistChangeEventType change ) {
    return _com_dispatch_method(this, 0x16a9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", Playlist, change);
}

#pragma implementation_key(1232)
inline HRESULT IGAMEDIA::_WMPCoreEvents::CurrentPlaylistChange ( enum WMPPlaylistChangeEventType change ) {
    return _com_dispatch_method(this, 0x16ac, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", change);
}

#pragma implementation_key(1233)
inline HRESULT IGAMEDIA::_WMPCoreEvents::CurrentPlaylistItemAvailable ( _bstr_t bstrItemName ) {
    return _com_dispatch_method(this, 0x16ad, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrItemName);
}

#pragma implementation_key(1234)
inline HRESULT IGAMEDIA::_WMPCoreEvents::MediaChange ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0x16aa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(1235)
inline HRESULT IGAMEDIA::_WMPCoreEvents::CurrentMediaItemAvailable ( _bstr_t bstrItemName ) {
    return _com_dispatch_method(this, 0x16ab, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrItemName);
}

#pragma implementation_key(1236)
inline HRESULT IGAMEDIA::_WMPCoreEvents::CurrentItemChange ( IDispatch * pdispMedia ) {
    return _com_dispatch_method(this, 0x16ae, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pdispMedia);
}

#pragma implementation_key(1237)
inline HRESULT IGAMEDIA::_WMPCoreEvents::MediaCollectionChange ( ) {
    return _com_dispatch_method(this, 0x16af, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1238)
inline HRESULT IGAMEDIA::_WMPCoreEvents::MediaCollectionAttributeStringAdded ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal ) {
    return _com_dispatch_method(this, 0x16b0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008", (BSTR)bstrAttribName, (BSTR)bstrAttribVal);
}

#pragma implementation_key(1239)
inline HRESULT IGAMEDIA::_WMPCoreEvents::MediaCollectionAttributeStringRemoved ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal ) {
    return _com_dispatch_method(this, 0x16b1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008", (BSTR)bstrAttribName, (BSTR)bstrAttribVal);
}

#pragma implementation_key(1240)
inline HRESULT IGAMEDIA::_WMPCoreEvents::MediaCollectionAttributeStringChanged ( _bstr_t bstrAttribName, _bstr_t bstrOldAttribVal, _bstr_t bstrNewAttribVal ) {
    return _com_dispatch_method(this, 0x16bc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0008\x0008", (BSTR)bstrAttribName, (BSTR)bstrOldAttribVal, (BSTR)bstrNewAttribVal);
}

#pragma implementation_key(1241)
inline HRESULT IGAMEDIA::_WMPCoreEvents::PlaylistCollectionChange ( ) {
    return _com_dispatch_method(this, 0x16b2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(1242)
inline HRESULT IGAMEDIA::_WMPCoreEvents::PlaylistCollectionPlaylistAdded ( _bstr_t bstrPlaylistName ) {
    return _com_dispatch_method(this, 0x16b3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrPlaylistName);
}

#pragma implementation_key(1243)
inline HRESULT IGAMEDIA::_WMPCoreEvents::PlaylistCollectionPlaylistRemoved ( _bstr_t bstrPlaylistName ) {
    return _com_dispatch_method(this, 0x16b4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)bstrPlaylistName);
}

#pragma implementation_key(1244)
inline HRESULT IGAMEDIA::_WMPCoreEvents::PlaylistCollectionPlaylistSetAsDeleted ( _bstr_t bstrPlaylistName, VARIANT_BOOL varfIsDeleted ) {
    return _com_dispatch_method(this, 0x16ba, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x000b", (BSTR)bstrPlaylistName, varfIsDeleted);
}

#pragma implementation_key(1245)
inline HRESULT IGAMEDIA::_WMPCoreEvents::ModeChange ( _bstr_t ModeName, VARIANT_BOOL NewValue ) {
    return _com_dispatch_method(this, 0x16bb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x000b", (BSTR)ModeName, NewValue);
}

#pragma implementation_key(1246)
inline HRESULT IGAMEDIA::_WMPCoreEvents::MediaError ( IDispatch * pMediaObject ) {
    return _com_dispatch_method(this, 0x16bd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pMediaObject);
}

#pragma implementation_key(1247)
inline HRESULT IGAMEDIA::_WMPCoreEvents::OpenPlaylistSwitch ( IDispatch * pItem ) {
    return _com_dispatch_method(this, 0x16bf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pItem);
}

#pragma implementation_key(1248)
inline HRESULT IGAMEDIA::_WMPCoreEvents::DomainChange ( _bstr_t strDomain ) {
    return _com_dispatch_method(this, 0x16be, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)strDomain);
}

//
// interface IWMPGraphEventHandler wrapper method implementations
//

#pragma implementation_key(1249)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyGraphStateChange ( ULONG_PTR punkGraph, long lGraphState ) {
    HRESULT _hr = raw_NotifyGraphStateChange(punkGraph, lGraphState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1250)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::AsyncNotifyGraphStateChange ( ULONG_PTR punkGraph, long lGraphState ) {
    HRESULT _hr = raw_AsyncNotifyGraphStateChange(punkGraph, lGraphState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1251)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyRateChange ( ULONG_PTR punkGraph, double dRate ) {
    HRESULT _hr = raw_NotifyRateChange(punkGraph, dRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1252)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyPlaybackEnd ( ULONG_PTR punkGraph, _bstr_t bstrQueuedUrl, unsigned long dwCurrentContext ) {
    HRESULT _hr = raw_NotifyPlaybackEnd(punkGraph, bstrQueuedUrl, dwCurrentContext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1253)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyStreamEnd ( ULONG_PTR punkGraph ) {
    HRESULT _hr = raw_NotifyStreamEnd(punkGraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1254)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyScriptCommand ( ULONG_PTR punkGraph, _bstr_t bstrCommand, _bstr_t bstrParam ) {
    HRESULT _hr = raw_NotifyScriptCommand(punkGraph, bstrCommand, bstrParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1255)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyEarlyScriptCommand ( ULONG_PTR punkGraph, _bstr_t bstrCommand, _bstr_t bstrParam, double dTime ) {
    HRESULT _hr = raw_NotifyEarlyScriptCommand(punkGraph, bstrCommand, bstrParam, dTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1256)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyMarkerHit ( ULONG_PTR punkGraph, long lMarker ) {
    HRESULT _hr = raw_NotifyMarkerHit(punkGraph, lMarker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1257)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyGraphError ( ULONG_PTR punkGraph, long lErrMajor, long lErrMinor, long lCondition, _bstr_t bstrInfo ) {
    HRESULT _hr = raw_NotifyGraphError(punkGraph, lErrMajor, lErrMinor, lCondition, bstrInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1258)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyAcquireCredentials ( ULONG_PTR punkGraph, _bstr_t bstrRealm, _bstr_t bstrSite, _bstr_t bstrUser, _bstr_t bstrPassword, unsigned long * pdwFlags, VARIANT_BOOL * pfCancel ) {
    HRESULT _hr = raw_NotifyAcquireCredentials(punkGraph, bstrRealm, bstrSite, bstrUser, bstrPassword, pdwFlags, pfCancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1259)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyUntrustedLicense ( ULONG_PTR punkGraph, _bstr_t bstrURL, VARIANT_BOOL * pfCancel ) {
    HRESULT _hr = raw_NotifyUntrustedLicense(punkGraph, bstrURL, pfCancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1260)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyLicenseDialog ( ULONG_PTR punkGraph, _bstr_t bstrURL, unsigned char * pPostData, unsigned long dwPostDataSize, long lResult ) {
    HRESULT _hr = raw_NotifyLicenseDialog(punkGraph, bstrURL, pPostData, dwPostDataSize, lResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1261)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyNeedsIndividualization ( ULONG_PTR punkGraph, VARIANT_BOOL * pfResult ) {
    HRESULT _hr = raw_NotifyNeedsIndividualization(punkGraph, pfResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1262)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyNewMetadata ( ULONG_PTR punkGraph ) {
    HRESULT _hr = raw_NotifyNewMetadata(punkGraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1263)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyNewMediaCaps ( ULONG_PTR punkGraph ) {
    HRESULT _hr = raw_NotifyNewMediaCaps(punkGraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1264)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyDisconnect ( ULONG_PTR punkGraph, long lResult ) {
    HRESULT _hr = raw_NotifyDisconnect(punkGraph, lResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1265)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifySave ( ULONG_PTR punkGraph, long fStarted, long lResult ) {
    HRESULT _hr = raw_NotifySave(punkGraph, fStarted, lResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1266)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyDelayClose ( ULONG_PTR punkGraph, VARIANT_BOOL fDelay ) {
    HRESULT _hr = raw_NotifyDelayClose(punkGraph, fDelay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1267)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyDVD ( ULONG_PTR punkGraph, long lEventCode, long lParam1, long lParam2 ) {
    HRESULT _hr = raw_NotifyDVD(punkGraph, lEventCode, lParam1, lParam2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1268)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyRequestAppThreadAction ( ULONG_PTR punkGraph, unsigned long dwAction ) {
    HRESULT _hr = raw_NotifyRequestAppThreadAction(punkGraph, dwAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1269)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyPrerollReady ( ULONG_PTR punkGraph ) {
    HRESULT _hr = raw_NotifyPrerollReady(punkGraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1270)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyNewIcons ( ULONG_PTR punkGraph ) {
    HRESULT _hr = raw_NotifyNewIcons(punkGraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1271)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyStepComplete ( ULONG_PTR punkGraph ) {
    HRESULT _hr = raw_NotifyStepComplete(punkGraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1272)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyNewBitrate ( ULONG_PTR punkGraph, unsigned long dwBitrate ) {
    HRESULT _hr = raw_NotifyNewBitrate(punkGraph, dwBitrate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1273)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyGraphCreationPreRender ( ULONG_PTR punkGraph, ULONG_PTR punkFilterGraph, ULONG_PTR punkCardeaEncConfig, ULONG_PTR phrContinue, ULONG_PTR hEventToSet ) {
    HRESULT _hr = raw_NotifyGraphCreationPreRender(punkGraph, punkFilterGraph, punkCardeaEncConfig, phrContinue, hEventToSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1274)
inline HRESULT IGAMEDIA::IWMPGraphEventHandler::NotifyGraphCreationPostRender ( ULONG_PTR punkGraph, ULONG_PTR punkFilterGraph, ULONG_PTR phrContinue, ULONG_PTR hEventToSet ) {
    HRESULT _hr = raw_NotifyGraphCreationPostRender(punkGraph, punkFilterGraph, phrContinue, hEventToSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IBattery wrapper method implementations
//

#pragma implementation_key(1275)
inline long IGAMEDIA::IBattery::GetpresetCount ( ) {
    long _result;
    HRESULT _hr = get_presetCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1276)
inline IDispatchPtr IGAMEDIA::IBattery::Getpreset ( long nIndex ) {
    IDispatch * _result;
    HRESULT _hr = get_preset(nIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IBatteryPreset wrapper method implementations
//

#pragma implementation_key(1277)
inline _bstr_t IGAMEDIA::IBatteryPreset::Gettitle ( ) {
    BSTR _result;
    HRESULT _hr = get_title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1278)
inline void IGAMEDIA::IBatteryPreset::Puttitle ( _bstr_t pVal ) {
    HRESULT _hr = put_title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBarsEffect wrapper method implementations
//

#pragma implementation_key(1279)
inline long IGAMEDIA::IBarsEffect::GetdisplayMode ( ) {
    long _result;
    HRESULT _hr = get_displayMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1280)
inline void IGAMEDIA::IBarsEffect::PutdisplayMode ( long pVal ) {
    HRESULT _hr = put_displayMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1281)
inline VARIANT_BOOL IGAMEDIA::IBarsEffect::GetshowPeaks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_showPeaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1282)
inline void IGAMEDIA::IBarsEffect::PutshowPeaks ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_showPeaks(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1283)
inline long IGAMEDIA::IBarsEffect::GetpeakHangTime ( ) {
    long _result;
    HRESULT _hr = get_peakHangTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1284)
inline void IGAMEDIA::IBarsEffect::PutpeakHangTime ( long pVal ) {
    HRESULT _hr = put_peakHangTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1285)
inline float IGAMEDIA::IBarsEffect::GetpeakFallbackAcceleration ( ) {
    float _result;
    HRESULT _hr = get_peakFallbackAcceleration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1286)
inline void IGAMEDIA::IBarsEffect::PutpeakFallbackAcceleration ( float pVal ) {
    HRESULT _hr = put_peakFallbackAcceleration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1287)
inline float IGAMEDIA::IBarsEffect::GetpeakFallbackSpeed ( ) {
    float _result;
    HRESULT _hr = get_peakFallbackSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1288)
inline void IGAMEDIA::IBarsEffect::PutpeakFallbackSpeed ( float pVal ) {
    HRESULT _hr = put_peakFallbackSpeed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1289)
inline float IGAMEDIA::IBarsEffect::GetlevelFallbackAcceleration ( ) {
    float _result;
    HRESULT _hr = get_levelFallbackAcceleration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1290)
inline void IGAMEDIA::IBarsEffect::PutlevelFallbackAcceleration ( float pVal ) {
    HRESULT _hr = put_levelFallbackAcceleration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1291)
inline float IGAMEDIA::IBarsEffect::GetlevelFallbackSpeed ( ) {
    float _result;
    HRESULT _hr = get_levelFallbackSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1292)
inline void IGAMEDIA::IBarsEffect::PutlevelFallbackSpeed ( float pVal ) {
    HRESULT _hr = put_levelFallbackSpeed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1293)
inline _bstr_t IGAMEDIA::IBarsEffect::GetbackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1294)
inline void IGAMEDIA::IBarsEffect::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1295)
inline _bstr_t IGAMEDIA::IBarsEffect::GetlevelColor ( ) {
    BSTR _result;
    HRESULT _hr = get_levelColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1296)
inline void IGAMEDIA::IBarsEffect::PutlevelColor ( _bstr_t pVal ) {
    HRESULT _hr = put_levelColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1297)
inline _bstr_t IGAMEDIA::IBarsEffect::GetpeakColor ( ) {
    BSTR _result;
    HRESULT _hr = get_peakColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1298)
inline void IGAMEDIA::IBarsEffect::PutpeakColor ( _bstr_t pVal ) {
    HRESULT _hr = put_peakColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1299)
inline long IGAMEDIA::IBarsEffect::GethorizontalSpacing ( ) {
    long _result;
    HRESULT _hr = get_horizontalSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1300)
inline void IGAMEDIA::IBarsEffect::PuthorizontalSpacing ( long pVal ) {
    HRESULT _hr = put_horizontalSpacing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1301)
inline long IGAMEDIA::IBarsEffect::GetlevelWidth ( ) {
    long _result;
    HRESULT _hr = get_levelWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1302)
inline void IGAMEDIA::IBarsEffect::PutlevelWidth ( long pVal ) {
    HRESULT _hr = put_levelWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1303)
inline float IGAMEDIA::IBarsEffect::GetlevelScale ( ) {
    float _result;
    HRESULT _hr = get_levelScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1304)
inline void IGAMEDIA::IBarsEffect::PutlevelScale ( float pVal ) {
    HRESULT _hr = put_levelScale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1305)
inline long IGAMEDIA::IBarsEffect::GetfadeRate ( ) {
    long _result;
    HRESULT _hr = get_fadeRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1306)
inline void IGAMEDIA::IBarsEffect::PutfadeRate ( long pVal ) {
    HRESULT _hr = put_fadeRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1307)
inline long IGAMEDIA::IBarsEffect::GetfadeMode ( ) {
    long _result;
    HRESULT _hr = get_fadeMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1308)
inline void IGAMEDIA::IBarsEffect::PutfadeMode ( long pVal ) {
    HRESULT _hr = put_fadeMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1309)
inline VARIANT_BOOL IGAMEDIA::IBarsEffect::Gettransparent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1310)
inline void IGAMEDIA::IBarsEffect::Puttransparent ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_transparent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISpikesEffect wrapper method implementations
//

#pragma implementation_key(1311)
inline _bstr_t IGAMEDIA::ISpikesEffect::GetbackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1312)
inline void IGAMEDIA::ISpikesEffect::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1313)
inline _bstr_t IGAMEDIA::ISpikesEffect::GetforegroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_foregroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1314)
inline void IGAMEDIA::ISpikesEffect::PutforegroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_foregroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1315)
inline long IGAMEDIA::ISpikesEffect::GetdisplayMode ( ) {
    long _result;
    HRESULT _hr = get_displayMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1316)
inline void IGAMEDIA::ISpikesEffect::PutdisplayMode ( long pVal ) {
    HRESULT _hr = put_displayMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1317)
inline float IGAMEDIA::ISpikesEffect::GetfallbackSpeed ( ) {
    float _result;
    HRESULT _hr = get_fallbackSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1318)
inline void IGAMEDIA::ISpikesEffect::PutfallbackSpeed ( float pVal ) {
    HRESULT _hr = put_fallbackSpeed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1319)
inline VARIANT_BOOL IGAMEDIA::ISpikesEffect::Gettransparent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1320)
inline void IGAMEDIA::ISpikesEffect::Puttransparent ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_transparent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDotPlaneEffect wrapper method implementations
//

#pragma implementation_key(1321)
inline float IGAMEDIA::IDotPlaneEffect::GetcameraDistance ( ) {
    float _result;
    HRESULT _hr = get_cameraDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1322)
inline void IGAMEDIA::IDotPlaneEffect::PutcameraDistance ( float pVal ) {
    HRESULT _hr = put_cameraDistance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1323)
inline float IGAMEDIA::IDotPlaneEffect::GetfallbackAcceleration ( ) {
    float _result;
    HRESULT _hr = get_fallbackAcceleration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1324)
inline void IGAMEDIA::IDotPlaneEffect::PutfallbackAcceleration ( float pVal ) {
    HRESULT _hr = put_fallbackAcceleration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1325)
inline float IGAMEDIA::IDotPlaneEffect::GetfallbackSpeed ( ) {
    float _result;
    HRESULT _hr = get_fallbackSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1326)
inline void IGAMEDIA::IDotPlaneEffect::PutfallbackSpeed ( float pVal ) {
    HRESULT _hr = put_fallbackSpeed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1327)
inline VARIANT_BOOL IGAMEDIA::IDotPlaneEffect::GetspinZ ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_spinZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1328)
inline void IGAMEDIA::IDotPlaneEffect::PutspinZ ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_spinZ(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1329)
inline VARIANT_BOOL IGAMEDIA::IDotPlaneEffect::GetspinX ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_spinX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1330)
inline void IGAMEDIA::IDotPlaneEffect::PutspinX ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_spinX(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1331)
inline VARIANT_BOOL IGAMEDIA::IDotPlaneEffect::GetspinY ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_spinY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1332)
inline void IGAMEDIA::IDotPlaneEffect::PutspinY ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_spinY(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1333)
inline HRESULT IGAMEDIA::IDotPlaneEffect::reset ( ) {
    HRESULT _hr = raw_reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1334)
inline HRESULT IGAMEDIA::IDotPlaneEffect::stopSpin ( ) {
    HRESULT _hr = raw_stopSpin();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1335)
inline _bstr_t IGAMEDIA::IDotPlaneEffect::GetbackgroundColor ( ) {
    BSTR _result;
    HRESULT _hr = get_backgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1336)
inline void IGAMEDIA::IDotPlaneEffect::PutbackgroundColor ( _bstr_t pVal ) {
    HRESULT _hr = put_backgroundColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1337)
inline _bstr_t IGAMEDIA::IDotPlaneEffect::GetfadeColor1 ( ) {
    BSTR _result;
    HRESULT _hr = get_fadeColor1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1338)
inline void IGAMEDIA::IDotPlaneEffect::PutfadeColor1 ( _bstr_t pVal ) {
    HRESULT _hr = put_fadeColor1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1339)
inline _bstr_t IGAMEDIA::IDotPlaneEffect::GetfadeColor2 ( ) {
    BSTR _result;
    HRESULT _hr = get_fadeColor2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1340)
inline void IGAMEDIA::IDotPlaneEffect::PutfadeColor2 ( _bstr_t pVal ) {
    HRESULT _hr = put_fadeColor2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1341)
inline _bstr_t IGAMEDIA::IDotPlaneEffect::GetfadeColor3 ( ) {
    BSTR _result;
    HRESULT _hr = get_fadeColor3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1342)
inline void IGAMEDIA::IDotPlaneEffect::PutfadeColor3 ( _bstr_t pVal ) {
    HRESULT _hr = put_fadeColor3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1343)
inline _bstr_t IGAMEDIA::IDotPlaneEffect::GetfadeColor4 ( ) {
    BSTR _result;
    HRESULT _hr = get_fadeColor4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1344)
inline void IGAMEDIA::IDotPlaneEffect::PutfadeColor4 ( _bstr_t pVal ) {
    HRESULT _hr = put_fadeColor4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1345)
inline _bstr_t IGAMEDIA::IDotPlaneEffect::GetfadeColor5 ( ) {
    BSTR _result;
    HRESULT _hr = get_fadeColor5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1346)
inline void IGAMEDIA::IDotPlaneEffect::PutfadeColor5 ( _bstr_t pVal ) {
    HRESULT _hr = put_fadeColor5(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1347)
inline VARIANT_BOOL IGAMEDIA::IDotPlaneEffect::Gettransparent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1348)
inline void IGAMEDIA::IDotPlaneEffect::Puttransparent ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_transparent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPExternal wrapper method implementations
//

#pragma implementation_key(1349)
inline _bstr_t IGAMEDIA::IWMPExternal::Getversion ( ) {
    BSTR _result;
    HRESULT _hr = get_version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1350)
inline _bstr_t IGAMEDIA::IWMPExternal::GetappColorLight ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorLight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1351)
inline void IGAMEDIA::IWMPExternal::PutOnColorChange ( IDispatch * _arg1 ) {
    HRESULT _hr = put_OnColorChange(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IWMPExternalColors wrapper method implementations
//

#pragma implementation_key(1352)
inline _bstr_t IGAMEDIA::IWMPExternalColors::GetappColorMedium ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorMedium(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1353)
inline _bstr_t IGAMEDIA::IWMPExternalColors::GetappColorDark ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorDark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1354)
inline _bstr_t IGAMEDIA::IWMPExternalColors::GetappColorButtonHighlight ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorButtonHighlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1355)
inline _bstr_t IGAMEDIA::IWMPExternalColors::GetappColorButtonShadow ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorButtonShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1356)
inline _bstr_t IGAMEDIA::IWMPExternalColors::GetappColorButtonHoverFace ( ) {
    BSTR _result;
    HRESULT _hr = get_appColorButtonHoverFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPSubscriptionServiceLimited wrapper method implementations
//

#pragma implementation_key(1357)
inline HRESULT IGAMEDIA::IWMPSubscriptionServiceLimited::NavigateTaskPaneURL ( _bstr_t bstrKeyName, _bstr_t bstrTaskPane, _bstr_t bstrParams ) {
    HRESULT _hr = raw_NavigateTaskPaneURL(bstrKeyName, bstrTaskPane, bstrParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1358)
inline void IGAMEDIA::IWMPSubscriptionServiceLimited::PutSelectedTaskPane ( _bstr_t bstrTaskPane ) {
    HRESULT _hr = put_SelectedTaskPane(bstrTaskPane);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1359)
inline _bstr_t IGAMEDIA::IWMPSubscriptionServiceLimited::GetSelectedTaskPane ( ) {
    BSTR _result;
    HRESULT _hr = get_SelectedTaskPane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPSubscriptionServiceExternal wrapper method implementations
//

#pragma implementation_key(1360)
inline IGAMEDIA::IWMPDownloadManagerPtr IGAMEDIA::IWMPSubscriptionServiceExternal::GetDownloadManager ( ) {
    struct IWMPDownloadManager * _result;
    HRESULT _hr = get_DownloadManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPDownloadManagerPtr(_result, false);
}

//
// interface IWMPDownloadManager wrapper method implementations
//

#pragma implementation_key(1361)
inline IGAMEDIA::IWMPDownloadCollectionPtr IGAMEDIA::IWMPDownloadManager::getDownloadCollection ( long lCollectionId ) {
    struct IWMPDownloadCollection * _result;
    HRESULT _hr = raw_getDownloadCollection(lCollectionId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPDownloadCollectionPtr(_result, false);
}

#pragma implementation_key(1362)
inline IGAMEDIA::IWMPDownloadCollectionPtr IGAMEDIA::IWMPDownloadManager::createDownloadCollection ( ) {
    struct IWMPDownloadCollection * _result;
    HRESULT _hr = raw_createDownloadCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPDownloadCollectionPtr(_result, false);
}

//
// interface IWMPDownloadCollection wrapper method implementations
//

#pragma implementation_key(1363)
inline long IGAMEDIA::IWMPDownloadCollection::Getid ( ) {
    long _result;
    HRESULT _hr = get_id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1364)
inline long IGAMEDIA::IWMPDownloadCollection::Getcount ( ) {
    long _result;
    HRESULT _hr = get_count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1365)
inline IGAMEDIA::IWMPDownloadItem2Ptr IGAMEDIA::IWMPDownloadCollection::Item ( long lItem ) {
    struct IWMPDownloadItem2 * _result;
    HRESULT _hr = raw_Item(lItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPDownloadItem2Ptr(_result, false);
}

#pragma implementation_key(1366)
inline IGAMEDIA::IWMPDownloadItem2Ptr IGAMEDIA::IWMPDownloadCollection::startDownload ( _bstr_t bstrSourceURL, _bstr_t bstrType ) {
    struct IWMPDownloadItem2 * _result;
    HRESULT _hr = raw_startDownload(bstrSourceURL, bstrType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IWMPDownloadItem2Ptr(_result, false);
}

#pragma implementation_key(1367)
inline HRESULT IGAMEDIA::IWMPDownloadCollection::removeItem ( long lItem ) {
    HRESULT _hr = raw_removeItem(lItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1368)
inline HRESULT IGAMEDIA::IWMPDownloadCollection::clear ( ) {
    HRESULT _hr = raw_clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPDownloadItem wrapper method implementations
//

#pragma implementation_key(1369)
inline _bstr_t IGAMEDIA::IWMPDownloadItem::GetsourceURL ( ) {
    BSTR _result;
    HRESULT _hr = get_sourceURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1370)
inline long IGAMEDIA::IWMPDownloadItem::Getsize ( ) {
    long _result;
    HRESULT _hr = get_size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1371)
inline _bstr_t IGAMEDIA::IWMPDownloadItem::Gettype ( ) {
    BSTR _result;
    HRESULT _hr = get_type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1372)
inline long IGAMEDIA::IWMPDownloadItem::Getprogress ( ) {
    long _result;
    HRESULT _hr = get_progress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1373)
inline enum WMPSubscriptionDownloadState IGAMEDIA::IWMPDownloadItem::GetdownloadState ( ) {
    enum WMPSubscriptionDownloadState _result;
    HRESULT _hr = get_downloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1374)
inline HRESULT IGAMEDIA::IWMPDownloadItem::pause ( ) {
    HRESULT _hr = raw_pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1375)
inline HRESULT IGAMEDIA::IWMPDownloadItem::resume ( ) {
    HRESULT _hr = raw_resume();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1376)
inline HRESULT IGAMEDIA::IWMPDownloadItem::cancel ( ) {
    HRESULT _hr = raw_cancel();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPDownloadItem2 wrapper method implementations
//

#pragma implementation_key(1377)
inline _bstr_t IGAMEDIA::IWMPDownloadItem2::getItemInfo ( _bstr_t bstrItemName ) {
    BSTR _result;
    HRESULT _hr = raw_getItemInfo(bstrItemName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IWMPSubscriptionServicePlayMedia wrapper method implementations
//

#pragma implementation_key(1378)
inline HRESULT IGAMEDIA::IWMPSubscriptionServicePlayMedia::playMedia ( _bstr_t bstrURL ) {
    HRESULT _hr = raw_playMedia(bstrURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPCDDVDWizardExternal wrapper method implementations
//

#pragma implementation_key(1379)
inline HRESULT IGAMEDIA::IWMPCDDVDWizardExternal::WriteNames ( _bstr_t bstrTOC, _bstr_t bstrMetadata ) {
    HRESULT _hr = raw_WriteNames(bstrTOC, bstrMetadata);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1380)
inline HRESULT IGAMEDIA::IWMPCDDVDWizardExternal::ReturnToMainTask ( ) {
    HRESULT _hr = raw_ReturnToMainTask();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1381)
inline HRESULT IGAMEDIA::IWMPCDDVDWizardExternal::WriteNamesEx ( enum WMP_WRITENAMESEX_TYPE type, _bstr_t bstrTypeId, _bstr_t bstrMetadata, VARIANT_BOOL fRenameRegroupFiles ) {
    HRESULT _hr = raw_WriteNamesEx(type, bstrTypeId, bstrMetadata, fRenameRegroupFiles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1382)
inline _bstr_t IGAMEDIA::IWMPCDDVDWizardExternal::GetMDQByRequestID ( _bstr_t bstrRequestID ) {
    BSTR _result;
    HRESULT _hr = raw_GetMDQByRequestID(bstrRequestID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1383)
inline HRESULT IGAMEDIA::IWMPCDDVDWizardExternal::EditMetadata ( ) {
    HRESULT _hr = raw_EditMetadata();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1384)
inline VARIANT_BOOL IGAMEDIA::IWMPCDDVDWizardExternal::IsMetadataAvailableForEdit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsMetadataAvailableForEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1385)
inline HRESULT IGAMEDIA::IWMPCDDVDWizardExternal::BuyCD ( _bstr_t bstrTitle, _bstr_t bstrArtist, _bstr_t bstrAlbum, _bstr_t bstrUFID, _bstr_t bstrWMID ) {
    HRESULT _hr = raw_BuyCD(bstrTitle, bstrArtist, bstrAlbum, bstrUFID, bstrWMID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWMPOfflineExternal wrapper method implementations
//

#pragma implementation_key(1386)
inline HRESULT IGAMEDIA::IWMPOfflineExternal::forceOnline ( ) {
    HRESULT _hr = raw_forceOnline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
